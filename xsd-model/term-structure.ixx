// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MODEL_TERM_STRUCTURE_IXX
#define CXX___SCHEMA_XSD_MODEL_TERM_STRUCTURE_IXX

// Begin prologue.
//
//
// End prologue.

#include "model.ixx"

#include "types.ixx"

// XsdTermStructure
// 

inline
const XsdTermStructure::refDate_optional& XsdTermStructure::
refDate () const
{
  return this->refDate_;
}

inline
XsdTermStructure::refDate_optional& XsdTermStructure::
refDate ()
{
  return this->refDate_;
}

inline
void XsdTermStructure::
refDate (const refDate_type& x)
{
  this->refDate_.set (x);
}

inline
void XsdTermStructure::
refDate (const refDate_optional& x)
{
  this->refDate_ = x;
}

inline
void XsdTermStructure::
refDate (::std::auto_ptr< refDate_type > x)
{
  this->refDate_.set (x);
}

inline
const XsdTermStructure::maxDate_optional& XsdTermStructure::
maxDate () const
{
  return this->maxDate_;
}

inline
XsdTermStructure::maxDate_optional& XsdTermStructure::
maxDate ()
{
  return this->maxDate_;
}

inline
void XsdTermStructure::
maxDate (const maxDate_type& x)
{
  this->maxDate_.set (x);
}

inline
void XsdTermStructure::
maxDate (const maxDate_optional& x)
{
  this->maxDate_ = x;
}

inline
void XsdTermStructure::
maxDate (::std::auto_ptr< maxDate_type > x)
{
  this->maxDate_.set (x);
}

inline
const XsdTermStructure::convention_optional& XsdTermStructure::
convention () const
{
  return this->convention_;
}

inline
XsdTermStructure::convention_optional& XsdTermStructure::
convention ()
{
  return this->convention_;
}

inline
void XsdTermStructure::
convention (const convention_type& x)
{
  this->convention_.set (x);
}

inline
void XsdTermStructure::
convention (const convention_optional& x)
{
  this->convention_ = x;
}

inline
void XsdTermStructure::
convention (::std::auto_ptr< convention_type > x)
{
  this->convention_.set (x);
}

inline
const XsdTermStructure::params_optional& XsdTermStructure::
params () const
{
  return this->params_;
}

inline
XsdTermStructure::params_optional& XsdTermStructure::
params ()
{
  return this->params_;
}

inline
void XsdTermStructure::
params (const params_type& x)
{
  this->params_.set (x);
}

inline
void XsdTermStructure::
params (const params_optional& x)
{
  this->params_ = x;
}

inline
void XsdTermStructure::
params (::std::auto_ptr< params_type > x)
{
  this->params_.set (x);
}


// XsdTermStructureKey
// 

inline
const XsdTermStructureKey::name_type& XsdTermStructureKey::
name () const
{
  return this->name_.get ();
}

inline
XsdTermStructureKey::name_type& XsdTermStructureKey::
name ()
{
  return this->name_.get ();
}

inline
void XsdTermStructureKey::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdTermStructureKey::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// XsdCalibrationOptions
// 

inline
const XsdCalibrationOptions::saveAsResult_optional& XsdCalibrationOptions::
saveAsResult () const
{
  return this->saveAsResult_;
}

inline
XsdCalibrationOptions::saveAsResult_optional& XsdCalibrationOptions::
saveAsResult ()
{
  return this->saveAsResult_;
}

inline
void XsdCalibrationOptions::
saveAsResult (const saveAsResult_type& x)
{
  this->saveAsResult_.set (x);
}

inline
void XsdCalibrationOptions::
saveAsResult (const saveAsResult_optional& x)
{
  this->saveAsResult_ = x;
}

inline
const XsdCalibrationOptions::bounds_optional& XsdCalibrationOptions::
bounds () const
{
  return this->bounds_;
}

inline
XsdCalibrationOptions::bounds_optional& XsdCalibrationOptions::
bounds ()
{
  return this->bounds_;
}

inline
void XsdCalibrationOptions::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdCalibrationOptions::
bounds (const bounds_optional& x)
{
  this->bounds_ = x;
}

inline
void XsdCalibrationOptions::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdCalibrationOptions::truncate_optional& XsdCalibrationOptions::
truncate () const
{
  return this->truncate_;
}

inline
XsdCalibrationOptions::truncate_optional& XsdCalibrationOptions::
truncate ()
{
  return this->truncate_;
}

inline
void XsdCalibrationOptions::
truncate (const truncate_type& x)
{
  this->truncate_.set (x);
}

inline
void XsdCalibrationOptions::
truncate (const truncate_optional& x)
{
  this->truncate_ = x;
}

inline
XsdCalibrationOptions::truncate_type XsdCalibrationOptions::
truncate_default_value ()
{
  return truncate_type (false);
}


// XsdBenchmark
// 

inline
const XsdBenchmark::asset_type& XsdBenchmark::
asset () const
{
  return this->asset_.get ();
}

inline
XsdBenchmark::asset_type& XsdBenchmark::
asset ()
{
  return this->asset_.get ();
}

inline
void XsdBenchmark::
asset (const asset_type& x)
{
  this->asset_.set (x);
}

inline
void XsdBenchmark::
asset (::std::auto_ptr< asset_type > x)
{
  this->asset_.set (x);
}

inline
const XsdBenchmark::quote_sequence& XsdBenchmark::
quote () const
{
  return this->quote_;
}

inline
XsdBenchmark::quote_sequence& XsdBenchmark::
quote ()
{
  return this->quote_;
}

inline
void XsdBenchmark::
quote (const quote_sequence& s)
{
  this->quote_ = s;
}

inline
const XsdBenchmark::assumptions_optional& XsdBenchmark::
assumptions () const
{
  return this->assumptions_;
}

inline
XsdBenchmark::assumptions_optional& XsdBenchmark::
assumptions ()
{
  return this->assumptions_;
}

inline
void XsdBenchmark::
assumptions (const assumptions_type& x)
{
  this->assumptions_.set (x);
}

inline
void XsdBenchmark::
assumptions (const assumptions_optional& x)
{
  this->assumptions_ = x;
}

inline
void XsdBenchmark::
assumptions (::std::auto_ptr< assumptions_type > x)
{
  this->assumptions_.set (x);
}

inline
const XsdBenchmark::weight_type& XsdBenchmark::
weight () const
{
  return this->weight_.get ();
}

inline
XsdBenchmark::weight_type& XsdBenchmark::
weight ()
{
  return this->weight_.get ();
}

inline
void XsdBenchmark::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
void XsdBenchmark::
weight (::std::auto_ptr< weight_type > x)
{
  this->weight_.set (x);
}

inline
XsdBenchmark::weight_type XsdBenchmark::
weight_default_value ()
{
  return weight_type (1.0);
}


// XsdPolynomialDetails
// 

inline
const XsdPolynomialDetails::degree_type& XsdPolynomialDetails::
degree () const
{
  return this->degree_.get ();
}

inline
XsdPolynomialDetails::degree_type& XsdPolynomialDetails::
degree ()
{
  return this->degree_.get ();
}

inline
void XsdPolynomialDetails::
degree (const degree_type& x)
{
  this->degree_.set (x);
}

inline
XsdPolynomialDetails::degree_type XsdPolynomialDetails::
degree_default_value ()
{
  return degree_type (5ULL);
}


// XsdExponentialDetails
// 

inline
const XsdExponentialDetails::order_type& XsdExponentialDetails::
order () const
{
  return this->order_.get ();
}

inline
XsdExponentialDetails::order_type& XsdExponentialDetails::
order ()
{
  return this->order_.get ();
}

inline
void XsdExponentialDetails::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
XsdExponentialDetails::order_type XsdExponentialDetails::
order_default_value ()
{
  return order_type (4ULL);
}


// XsdBasisSplineDetails
// 

inline
const XsdBasisSplineDetails::order_type& XsdBasisSplineDetails::
order () const
{
  return this->order_.get ();
}

inline
XsdBasisSplineDetails::order_type& XsdBasisSplineDetails::
order ()
{
  return this->order_.get ();
}

inline
void XsdBasisSplineDetails::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
XsdBasisSplineDetails::order_type XsdBasisSplineDetails::
order_default_value ()
{
  return order_type (4ULL);
}

inline
const XsdBasisSplineDetails::mesh_type& XsdBasisSplineDetails::
mesh () const
{
  return this->mesh_.get ();
}

inline
XsdBasisSplineDetails::mesh_type& XsdBasisSplineDetails::
mesh ()
{
  return this->mesh_.get ();
}

inline
void XsdBasisSplineDetails::
mesh (const mesh_type& x)
{
  this->mesh_.set (x);
}

inline
void XsdBasisSplineDetails::
mesh (::std::auto_ptr< mesh_type > x)
{
  this->mesh_.set (x);
}

inline
const XsdBasisSplineDetails::mesh_type& XsdBasisSplineDetails::
mesh_default_value ()
{
  return mesh_default_value_;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MODEL_TERM_STRUCTURE_IXX
