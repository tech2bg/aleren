// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MODEL_ENUMS_IXX
#define CXX___SCHEMA_XSD_MODEL_ENUMS_IXX

// Begin prologue.
//
//
// End prologue.

#include "../xsd-asset/enums.ixx"

// XsdConvexityMethod
// 

inline
XsdConvexityMethod::
XsdConvexityMethod ()
: ::xml_schema::string ()
{
}

inline
XsdConvexityMethod::
XsdConvexityMethod (value v)
: ::xml_schema::string (_xsd_XsdConvexityMethod_literals_[v])
{
}

inline
XsdConvexityMethod::
XsdConvexityMethod (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdConvexityMethod::
XsdConvexityMethod (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdConvexityMethod::
XsdConvexityMethod (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdConvexityMethod::
XsdConvexityMethod (const XsdConvexityMethod& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdConvexityMethod& XsdConvexityMethod::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdConvexityMethod_literals_[v]);

  return *this;
}


// XsdDiscountType
// 

inline
XsdDiscountType::
XsdDiscountType ()
: ::xml_schema::string ()
{
}

inline
XsdDiscountType::
XsdDiscountType (value v)
: ::xml_schema::string (_xsd_XsdDiscountType_literals_[v])
{
}

inline
XsdDiscountType::
XsdDiscountType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDiscountType::
XsdDiscountType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDiscountType::
XsdDiscountType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDiscountType::
XsdDiscountType (const XsdDiscountType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDiscountType& XsdDiscountType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDiscountType_literals_[v]);

  return *this;
}


// XsdPriceVolatilityType
// 

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType ()
: ::xml_schema::string ()
{
}

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType (value v)
: ::xml_schema::string (_xsd_XsdPriceVolatilityType_literals_[v])
{
}

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPriceVolatilityType::
XsdPriceVolatilityType (const XsdPriceVolatilityType& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdPriceVolatilityType& XsdPriceVolatilityType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdPriceVolatilityType_literals_[v]);

  return *this;
}


// XsdHazardType
// 

inline
XsdHazardType::
XsdHazardType ()
: ::xml_schema::string ()
{
}

inline
XsdHazardType::
XsdHazardType (value v)
: ::xml_schema::string (_xsd_XsdHazardType_literals_[v])
{
}

inline
XsdHazardType::
XsdHazardType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdHazardType::
XsdHazardType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdHazardType::
XsdHazardType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdHazardType::
XsdHazardType (const XsdHazardType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdHazardType& XsdHazardType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdHazardType_literals_[v]);

  return *this;
}


// XsdOutputType
// 

inline
XsdOutputType::
XsdOutputType ()
: ::xml_schema::string ()
{
}

inline
XsdOutputType::
XsdOutputType (value v)
: ::xml_schema::string (_xsd_XsdOutputType_literals_[v])
{
}

inline
XsdOutputType::
XsdOutputType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdOutputType::
XsdOutputType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdOutputType::
XsdOutputType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdOutputType::
XsdOutputType (const XsdOutputType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdOutputType& XsdOutputType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdOutputType_literals_[v]);

  return *this;
}


// XsdProcessType
// 

inline
XsdProcessType::
XsdProcessType ()
: ::xml_schema::string ()
{
}

inline
XsdProcessType::
XsdProcessType (value v)
: ::xml_schema::string (_xsd_XsdProcessType_literals_[v])
{
}

inline
XsdProcessType::
XsdProcessType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdProcessType::
XsdProcessType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdProcessType::
XsdProcessType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdProcessType::
XsdProcessType (const XsdProcessType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdProcessType& XsdProcessType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdProcessType_literals_[v]);

  return *this;
}


// XsdRateVolatilityType
// 

inline
XsdRateVolatilityType::
XsdRateVolatilityType ()
: ::xml_schema::string ()
{
}

inline
XsdRateVolatilityType::
XsdRateVolatilityType (value v)
: ::xml_schema::string (_xsd_XsdRateVolatilityType_literals_[v])
{
}

inline
XsdRateVolatilityType::
XsdRateVolatilityType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRateVolatilityType::
XsdRateVolatilityType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateVolatilityType::
XsdRateVolatilityType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateVolatilityType::
XsdRateVolatilityType (const XsdRateVolatilityType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRateVolatilityType& XsdRateVolatilityType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRateVolatilityType_literals_[v]);

  return *this;
}


// XsdScenarioType
// 

inline
XsdScenarioType::
XsdScenarioType ()
: ::xml_schema::string ()
{
}

inline
XsdScenarioType::
XsdScenarioType (value v)
: ::xml_schema::string (_xsd_XsdScenarioType_literals_[v])
{
}

inline
XsdScenarioType::
XsdScenarioType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdScenarioType::
XsdScenarioType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdScenarioType::
XsdScenarioType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdScenarioType::
XsdScenarioType (const XsdScenarioType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdScenarioType& XsdScenarioType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdScenarioType_literals_[v]);

  return *this;
}


// XsdSpreadType
// 

inline
XsdSpreadType::
XsdSpreadType ()
: ::xml_schema::string ()
{
}

inline
XsdSpreadType::
XsdSpreadType (value v)
: ::xml_schema::string (_xsd_XsdSpreadType_literals_[v])
{
}

inline
XsdSpreadType::
XsdSpreadType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSpreadType::
XsdSpreadType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSpreadType::
XsdSpreadType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSpreadType::
XsdSpreadType (const XsdSpreadType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSpreadType& XsdSpreadType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSpreadType_literals_[v]);

  return *this;
}


// XsdTermStructureType
// 

inline
XsdTermStructureType::
XsdTermStructureType ()
: ::xml_schema::string ()
{
}

inline
XsdTermStructureType::
XsdTermStructureType (value v)
: ::xml_schema::string (_xsd_XsdTermStructureType_literals_[v])
{
}

inline
XsdTermStructureType::
XsdTermStructureType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdTermStructureType::
XsdTermStructureType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdTermStructureType::
XsdTermStructureType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdTermStructureType::
XsdTermStructureType (const XsdTermStructureType& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdTermStructureType& XsdTermStructureType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdTermStructureType_literals_[v]);

  return *this;
}


// XsdVolatilityBoundaryType
// 

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType ()
: ::xml_schema::string ()
{
}

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType (value v)
: ::xml_schema::string (_xsd_XsdVolatilityBoundaryType_literals_[v])
{
}

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityBoundaryType::
XsdVolatilityBoundaryType (const XsdVolatilityBoundaryType& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdVolatilityBoundaryType& XsdVolatilityBoundaryType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdVolatilityBoundaryType_literals_[v]);

  return *this;
}


// XsdVolatilityCategory
// 

inline
XsdVolatilityCategory::
XsdVolatilityCategory ()
: ::xml_schema::string ()
{
}

inline
XsdVolatilityCategory::
XsdVolatilityCategory (value v)
: ::xml_schema::string (_xsd_XsdVolatilityCategory_literals_[v])
{
}

inline
XsdVolatilityCategory::
XsdVolatilityCategory (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityCategory::
XsdVolatilityCategory (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityCategory::
XsdVolatilityCategory (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityCategory::
XsdVolatilityCategory (const XsdVolatilityCategory& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdVolatilityCategory& XsdVolatilityCategory::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdVolatilityCategory_literals_[v]);

  return *this;
}


// XsdVolatilityType
// 

inline
XsdVolatilityType::
XsdVolatilityType ()
: ::xml_schema::string ()
{
}

inline
XsdVolatilityType::
XsdVolatilityType (value v)
: ::xml_schema::string (_xsd_XsdVolatilityType_literals_[v])
{
}

inline
XsdVolatilityType::
XsdVolatilityType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityType::
XsdVolatilityType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityType::
XsdVolatilityType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdVolatilityType::
XsdVolatilityType (const XsdVolatilityType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdVolatilityType& XsdVolatilityType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdVolatilityType_literals_[v]);

  return *this;
}


// XsdYieldType
// 

inline
XsdYieldType::
XsdYieldType ()
: ::xml_schema::string ()
{
}

inline
XsdYieldType::
XsdYieldType (value v)
: ::xml_schema::string (_xsd_XsdYieldType_literals_[v])
{
}

inline
XsdYieldType::
XsdYieldType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdYieldType::
XsdYieldType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdYieldType::
XsdYieldType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdYieldType::
XsdYieldType (const XsdYieldType& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdYieldType& XsdYieldType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdYieldType_literals_[v]);

  return *this;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MODEL_ENUMS_IXX
