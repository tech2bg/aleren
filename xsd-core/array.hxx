// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_ARRAY_HXX
#define CXX___SCHEMA_XSD_CORE_ARRAY_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "../xsd-base/xml-schema.hxx"

// Forward declarations.
//
class XsdDoubleArray;
class XsdIntegerArray;
class XsdSizeArray;
class XsdDoubleArrayResult;
class XsdIntegerArrayResult;
class XsdSizeArrayResult;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "vector.hxx"

#include "result.hxx"

#include "enums.hxx"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "vector.hxx"

#include "result.hxx"

#include "enums.hxx"

#endif // XSD_DONT_INCLUDE_INLINE

class XsdDoubleArray: public ::XsdDoubleVector
{
  public:
  // size
  // 
  typedef ::XsdSizeVector size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // order
  // 
  typedef ::XsdRowOrColumn order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // Constructors.
  //
  XsdDoubleArray ();

  XsdDoubleArray (const size_type&);

  XsdDoubleArray (const ::XsdDoubleVector&,
                  const size_type&);

  XsdDoubleArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  XsdDoubleArray (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  XsdDoubleArray (const XsdDoubleArray& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual XsdDoubleArray*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdDoubleArray ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
};

bool
operator== (const XsdDoubleArray&, const XsdDoubleArray&);

bool
operator!= (const XsdDoubleArray&, const XsdDoubleArray&);


class XsdIntegerArray: public ::XsdIntegerVector
{
  public:
  // size
  // 
  typedef ::XsdSizeVector size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // order
  // 
  typedef ::XsdRowOrColumn order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // Constructors.
  //
  XsdIntegerArray ();

  XsdIntegerArray (const size_type&);

  XsdIntegerArray (const ::XsdIntegerVector&,
                   const size_type&);

  XsdIntegerArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  XsdIntegerArray (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  XsdIntegerArray (const XsdIntegerArray& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual XsdIntegerArray*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdIntegerArray ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
};

bool
operator== (const XsdIntegerArray&, const XsdIntegerArray&);

bool
operator!= (const XsdIntegerArray&, const XsdIntegerArray&);


class XsdSizeArray: public ::XsdSizeVector
{
  public:
  // size
  // 
  typedef ::XsdSizeVector size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  void
  size (::std::auto_ptr< size_type > p);

  // order
  // 
  typedef ::XsdRowOrColumn order_type;
  typedef ::xsd::cxx::tree::traits< order_type, char > order_traits;

  const order_type&
  order () const;

  order_type&
  order ();

  void
  order (const order_type& x);

  void
  order (::std::auto_ptr< order_type > p);

  static const order_type&
  order_default_value ();

  // Constructors.
  //
  XsdSizeArray ();

  XsdSizeArray (const size_type&);

  XsdSizeArray (const ::XsdSizeVector&,
                const size_type&);

  XsdSizeArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  XsdSizeArray (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  XsdSizeArray (const XsdSizeArray& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual XsdSizeArray*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdSizeArray ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< order_type > order_;
  static const order_type order_default_value_;
};

bool
operator== (const XsdSizeArray&, const XsdSizeArray&);

bool
operator!= (const XsdSizeArray&, const XsdSizeArray&);


class XsdDoubleArrayResult: public ::XsdResult
{
  public:
  // value
  // 
  typedef ::XsdDoubleArray value_type;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_type&
  value () const;

  value_type&
  value ();

  void
  value (const value_type& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  XsdDoubleArrayResult ();

  XsdDoubleArrayResult (const ::XsdResult&,
                        const value_type&);

  XsdDoubleArrayResult (const ::XsdResult&,
                        ::std::auto_ptr< value_type >&);

  XsdDoubleArrayResult (const calculationID_type&,
                        const value_type&);

  XsdDoubleArrayResult (const calculationID_type&,
                        ::std::auto_ptr< value_type >&);

  XsdDoubleArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  XsdDoubleArrayResult (const xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  XsdDoubleArrayResult (const XsdDoubleArrayResult& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual XsdDoubleArrayResult*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdDoubleArrayResult ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< value_type > value_;
};

bool
operator== (const XsdDoubleArrayResult&, const XsdDoubleArrayResult&);

bool
operator!= (const XsdDoubleArrayResult&, const XsdDoubleArrayResult&);


class XsdIntegerArrayResult: public ::XsdResult
{
  public:
  // value
  // 
  typedef ::XsdIntegerArray value_type;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_type&
  value () const;

  value_type&
  value ();

  void
  value (const value_type& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  XsdIntegerArrayResult ();

  XsdIntegerArrayResult (const ::XsdResult&,
                         const value_type&);

  XsdIntegerArrayResult (const ::XsdResult&,
                         ::std::auto_ptr< value_type >&);

  XsdIntegerArrayResult (const calculationID_type&,
                         const value_type&);

  XsdIntegerArrayResult (const calculationID_type&,
                         ::std::auto_ptr< value_type >&);

  XsdIntegerArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  XsdIntegerArrayResult (const xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  XsdIntegerArrayResult (const XsdIntegerArrayResult& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual XsdIntegerArrayResult*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdIntegerArrayResult ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< value_type > value_;
};

bool
operator== (const XsdIntegerArrayResult&, const XsdIntegerArrayResult&);

bool
operator!= (const XsdIntegerArrayResult&, const XsdIntegerArrayResult&);


class XsdSizeArrayResult: public ::XsdResult
{
  public:
  // value
  // 
  typedef ::XsdSizeArray value_type;
  typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

  const value_type&
  value () const;

  value_type&
  value ();

  void
  value (const value_type& x);

  void
  value (::std::auto_ptr< value_type > p);

  // Constructors.
  //
  XsdSizeArrayResult ();

  XsdSizeArrayResult (const ::XsdResult&,
                      const value_type&);

  XsdSizeArrayResult (const ::XsdResult&,
                      ::std::auto_ptr< value_type >&);

  XsdSizeArrayResult (const calculationID_type&,
                      const value_type&);

  XsdSizeArrayResult (const calculationID_type&,
                      ::std::auto_ptr< value_type >&);

  XsdSizeArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  XsdSizeArrayResult (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  XsdSizeArrayResult (const XsdSizeArrayResult& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual XsdSizeArrayResult*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdSizeArrayResult ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  ::xsd::cxx::tree::one< value_type > value_;
};

bool
operator== (const XsdSizeArrayResult&, const XsdSizeArrayResult&);

bool
operator!= (const XsdSizeArrayResult&, const XsdSizeArrayResult&);


#ifndef XSD_DONT_INCLUDE_INLINE

#include "vector.ixx"

#include "result.ixx"

#include "enums.ixx"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const XsdDoubleArray&);

::std::ostream&
operator<< (::std::ostream&, const XsdIntegerArray&);

::std::ostream&
operator<< (::std::ostream&, const XsdSizeArray&);

::std::ostream&
operator<< (::std::ostream&, const XsdDoubleArrayResult&);

::std::ostream&
operator<< (::std::ostream&, const XsdIntegerArrayResult&);

::std::ostream&
operator<< (::std::ostream&, const XsdSizeArrayResult&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (xercesc::DOMElement&, const XsdDoubleArray&);

void
operator<< (xercesc::DOMElement&, const XsdIntegerArray&);

void
operator<< (xercesc::DOMElement&, const XsdSizeArray&);

void
operator<< (xercesc::DOMElement&, const XsdDoubleArrayResult&);

void
operator<< (xercesc::DOMElement&, const XsdIntegerArrayResult&);

void
operator<< (xercesc::DOMElement&, const XsdSizeArrayResult&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdDoubleArray&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdIntegerArray&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdSizeArray&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdDoubleArrayResult&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdIntegerArrayResult&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdSizeArrayResult&);

#ifndef XSD_DONT_INCLUDE_INLINE
#include "array.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_ARRAY_HXX
