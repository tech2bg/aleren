// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_RESULT_IXX
#define CXX___SCHEMA_XSD_CORE_RESULT_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdResult
// 

inline
const XsdResult::comment_sequence& XsdResult::
comment () const
{
  return this->comment_;
}

inline
XsdResult::comment_sequence& XsdResult::
comment ()
{
  return this->comment_;
}

inline
void XsdResult::
comment (const comment_sequence& s)
{
  this->comment_ = s;
}

inline
const XsdResult::calculationID_type& XsdResult::
calculationID () const
{
  return this->calculationID_.get ();
}

inline
XsdResult::calculationID_type& XsdResult::
calculationID ()
{
  return this->calculationID_.get ();
}

inline
void XsdResult::
calculationID (const calculationID_type& x)
{
  this->calculationID_.set (x);
}

inline
void XsdResult::
calculationID (::std::auto_ptr< calculationID_type > x)
{
  this->calculationID_.set (x);
}

inline
const XsdResult::elapsedTime_optional& XsdResult::
elapsedTime () const
{
  return this->elapsedTime_;
}

inline
XsdResult::elapsedTime_optional& XsdResult::
elapsedTime ()
{
  return this->elapsedTime_;
}

inline
void XsdResult::
elapsedTime (const elapsedTime_type& x)
{
  this->elapsedTime_.set (x);
}

inline
void XsdResult::
elapsedTime (const elapsedTime_optional& x)
{
  this->elapsedTime_ = x;
}

inline
void XsdResult::
elapsedTime (::std::auto_ptr< elapsedTime_type > x)
{
  this->elapsedTime_.set (x);
}


// XsdBooleanResult
// 


// XsdDateResult
// 

inline
const XsdDateResult::value_type& XsdDateResult::
value () const
{
  return this->value_.get ();
}

inline
XsdDateResult::value_type& XsdDateResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdDateResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdDateResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdDateTimeResult
// 

inline
const XsdDateTimeResult::value_type& XsdDateTimeResult::
value () const
{
  return this->value_.get ();
}

inline
XsdDateTimeResult::value_type& XsdDateTimeResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdDateTimeResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdDateTimeResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdDoubleResult
// 

inline
const XsdDoubleResult::value_type& XsdDoubleResult::
value () const
{
  return this->value_.get ();
}

inline
XsdDoubleResult::value_type& XsdDoubleResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdDoubleResult::
value (const value_type& x)
{
  this->value_.set (x);
}


// XsdErrorResult
// 

inline
const XsdErrorResult::error_type& XsdErrorResult::
error () const
{
  return this->error_.get ();
}

inline
XsdErrorResult::error_type& XsdErrorResult::
error ()
{
  return this->error_.get ();
}

inline
void XsdErrorResult::
error (const error_type& x)
{
  this->error_.set (x);
}

inline
void XsdErrorResult::
error (::std::auto_ptr< error_type > x)
{
  this->error_.set (x);
}


// XsdIntegerResult
// 

inline
const XsdIntegerResult::value_type& XsdIntegerResult::
value () const
{
  return this->value_.get ();
}

inline
XsdIntegerResult::value_type& XsdIntegerResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdIntegerResult::
value (const value_type& x)
{
  this->value_.set (x);
}


// XsdStringResult
// 

inline
const XsdStringResult::value_type& XsdStringResult::
value () const
{
  return this->value_.get ();
}

inline
XsdStringResult::value_type& XsdStringResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdStringResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdStringResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdTenorResult
// 

inline
const XsdTenorResult::value_type& XsdTenorResult::
value () const
{
  return this->value_.get ();
}

inline
XsdTenorResult::value_type& XsdTenorResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdTenorResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdTenorResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_RESULT_IXX
