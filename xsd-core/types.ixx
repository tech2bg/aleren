// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_TYPES_IXX
#define CXX___SCHEMA_XSD_CORE_TYPES_IXX

// Begin prologue.
//
//
// End prologue.

#include "enums.ixx"

#include "value.ixx"

// XsdBaseSchema
// 

inline
const XsdBaseSchema::dependsOn_optional& XsdBaseSchema::
dependsOn () const
{
  return this->dependsOn_;
}

inline
XsdBaseSchema::dependsOn_optional& XsdBaseSchema::
dependsOn ()
{
  return this->dependsOn_;
}

inline
void XsdBaseSchema::
dependsOn (const dependsOn_type& x)
{
  this->dependsOn_.set (x);
}

inline
void XsdBaseSchema::
dependsOn (const dependsOn_optional& x)
{
  this->dependsOn_ = x;
}

inline
void XsdBaseSchema::
dependsOn (::std::auto_ptr< dependsOn_type > x)
{
  this->dependsOn_.set (x);
}

inline
const XsdBaseSchema::library_optional& XsdBaseSchema::
library () const
{
  return this->library_;
}

inline
XsdBaseSchema::library_optional& XsdBaseSchema::
library ()
{
  return this->library_;
}

inline
void XsdBaseSchema::
library (const library_type& x)
{
  this->library_.set (x);
}

inline
void XsdBaseSchema::
library (const library_optional& x)
{
  this->library_ = x;
}

inline
void XsdBaseSchema::
library (::std::auto_ptr< library_type > x)
{
  this->library_.set (x);
}

inline
const XsdBaseSchema::library_type& XsdBaseSchema::
library_default_value ()
{
  return library_default_value_;
}

inline
const XsdBaseSchema::uniqueID_optional& XsdBaseSchema::
uniqueID () const
{
  return this->uniqueID_;
}

inline
XsdBaseSchema::uniqueID_optional& XsdBaseSchema::
uniqueID ()
{
  return this->uniqueID_;
}

inline
void XsdBaseSchema::
uniqueID (const uniqueID_type& x)
{
  this->uniqueID_.set (x);
}

inline
void XsdBaseSchema::
uniqueID (const uniqueID_optional& x)
{
  this->uniqueID_ = x;
}

inline
void XsdBaseSchema::
uniqueID (::std::auto_ptr< uniqueID_type > x)
{
  this->uniqueID_.set (x);
}

inline
const XsdBaseSchema::referenceID_optional& XsdBaseSchema::
referenceID () const
{
  return this->referenceID_;
}

inline
XsdBaseSchema::referenceID_optional& XsdBaseSchema::
referenceID ()
{
  return this->referenceID_;
}

inline
void XsdBaseSchema::
referenceID (const referenceID_type& x)
{
  this->referenceID_.set (x);
}

inline
void XsdBaseSchema::
referenceID (const referenceID_optional& x)
{
  this->referenceID_ = x;
}

inline
void XsdBaseSchema::
referenceID (::std::auto_ptr< referenceID_type > x)
{
  this->referenceID_.set (x);
}


// XsdDataSchema
// 


// XsdNamedSchema
// 

inline
const XsdNamedSchema::name_optional& XsdNamedSchema::
name () const
{
  return this->name_;
}

inline
XsdNamedSchema::name_optional& XsdNamedSchema::
name ()
{
  return this->name_;
}

inline
void XsdNamedSchema::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdNamedSchema::
name (const name_optional& x)
{
  this->name_ = x;
}

inline
void XsdNamedSchema::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

inline
const XsdNamedSchema::date_optional& XsdNamedSchema::
date () const
{
  return this->date_;
}

inline
XsdNamedSchema::date_optional& XsdNamedSchema::
date ()
{
  return this->date_;
}

inline
void XsdNamedSchema::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdNamedSchema::
date (const date_optional& x)
{
  this->date_ = x;
}

inline
void XsdNamedSchema::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}


// XsdCalculationSchema
// 


// XsdException
// 

inline
const XsdException::file_optional& XsdException::
file () const
{
  return this->file_;
}

inline
XsdException::file_optional& XsdException::
file ()
{
  return this->file_;
}

inline
void XsdException::
file (const file_type& x)
{
  this->file_.set (x);
}

inline
void XsdException::
file (const file_optional& x)
{
  this->file_ = x;
}

inline
void XsdException::
file (::std::auto_ptr< file_type > x)
{
  this->file_.set (x);
}

inline
const XsdException::line_optional& XsdException::
line () const
{
  return this->line_;
}

inline
XsdException::line_optional& XsdException::
line ()
{
  return this->line_;
}

inline
void XsdException::
line (const line_type& x)
{
  this->line_.set (x);
}

inline
void XsdException::
line (const line_optional& x)
{
  this->line_ = x;
}

inline
const XsdException::method_optional& XsdException::
method () const
{
  return this->method_;
}

inline
XsdException::method_optional& XsdException::
method ()
{
  return this->method_;
}

inline
void XsdException::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void XsdException::
method (const method_optional& x)
{
  this->method_ = x;
}

inline
void XsdException::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const XsdException::condition_optional& XsdException::
condition () const
{
  return this->condition_;
}

inline
XsdException::condition_optional& XsdException::
condition ()
{
  return this->condition_;
}

inline
void XsdException::
condition (const condition_type& x)
{
  this->condition_.set (x);
}

inline
void XsdException::
condition (const condition_optional& x)
{
  this->condition_ = x;
}

inline
void XsdException::
condition (::std::auto_ptr< condition_type > x)
{
  this->condition_.set (x);
}

inline
const XsdException::message_optional& XsdException::
message () const
{
  return this->message_;
}

inline
XsdException::message_optional& XsdException::
message ()
{
  return this->message_;
}

inline
void XsdException::
message (const message_type& x)
{
  this->message_.set (x);
}

inline
void XsdException::
message (const message_optional& x)
{
  this->message_ = x;
}

inline
void XsdException::
message (::std::auto_ptr< message_type > x)
{
  this->message_.set (x);
}

inline
const XsdException::source_optional& XsdException::
source () const
{
  return this->source_;
}

inline
XsdException::source_optional& XsdException::
source ()
{
  return this->source_;
}

inline
void XsdException::
source (const source_type& x)
{
  this->source_.set (x);
}

inline
void XsdException::
source (const source_optional& x)
{
  this->source_ = x;
}

inline
void XsdException::
source (::std::auto_ptr< source_type > x)
{
  this->source_.set (x);
}

inline
const XsdException::source_type& XsdException::
source_default_value ()
{
  return source_default_value_;
}

inline
const XsdException::calledBy_optional& XsdException::
calledBy () const
{
  return this->calledBy_;
}

inline
XsdException::calledBy_optional& XsdException::
calledBy ()
{
  return this->calledBy_;
}

inline
void XsdException::
calledBy (const calledBy_type& x)
{
  this->calledBy_.set (x);
}

inline
void XsdException::
calledBy (const calledBy_optional& x)
{
  this->calledBy_ = x;
}

inline
void XsdException::
calledBy (::std::auto_ptr< calledBy_type > x)
{
  this->calledBy_.set (x);
}

inline
const XsdException::process_optional& XsdException::
process () const
{
  return this->process_;
}

inline
XsdException::process_optional& XsdException::
process ()
{
  return this->process_;
}

inline
void XsdException::
process (const process_type& x)
{
  this->process_.set (x);
}

inline
void XsdException::
process (const process_optional& x)
{
  this->process_ = x;
}

inline
void XsdException::
process (::std::auto_ptr< process_type > x)
{
  this->process_.set (x);
}


// XsdPlaceHolder
// 


// XsdWeekOfMonth
// 

inline
const XsdWeekOfMonth::weekDay_type& XsdWeekOfMonth::
weekDay () const
{
  return this->weekDay_.get ();
}

inline
XsdWeekOfMonth::weekDay_type& XsdWeekOfMonth::
weekDay ()
{
  return this->weekDay_.get ();
}

inline
void XsdWeekOfMonth::
weekDay (const weekDay_type& x)
{
  this->weekDay_.set (x);
}

inline
void XsdWeekOfMonth::
weekDay (::std::auto_ptr< weekDay_type > x)
{
  this->weekDay_.set (x);
}


// XsdQuantile
// 

inline
const XsdQuantile::percentile_type& XsdQuantile::
percentile () const
{
  return this->percentile_.get ();
}

inline
XsdQuantile::percentile_type& XsdQuantile::
percentile ()
{
  return this->percentile_.get ();
}

inline
void XsdQuantile::
percentile (const percentile_type& x)
{
  this->percentile_.set (x);
}

inline
void XsdQuantile::
percentile (::std::auto_ptr< percentile_type > x)
{
  this->percentile_.set (x);
}


// XsdDateOrTenor
//

inline
XsdDateOrTenor::
XsdDateOrTenor ()
: ::xml_schema::string ()
{
}

inline
XsdDateOrTenor::
XsdDateOrTenor (const char* s)
: ::xml_schema::string (s)
{
}

inline
XsdDateOrTenor::
XsdDateOrTenor (const ::std::string& s)
: ::xml_schema::string (s)
{
}

inline
XsdDateOrTenor::
XsdDateOrTenor (const XsdDateOrTenor& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (o, f, c)
{
}

// XsdNamedValue
// 

inline
const XsdNamedValue::name_type& XsdNamedValue::
name () const
{
  return this->name_.get ();
}

inline
XsdNamedValue::name_type& XsdNamedValue::
name ()
{
  return this->name_.get ();
}

inline
void XsdNamedValue::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdNamedValue::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// XsdNameValuePair
// 

inline
const XsdNameValuePair::name_type& XsdNameValuePair::
name () const
{
  return this->name_.get ();
}

inline
XsdNameValuePair::name_type& XsdNameValuePair::
name ()
{
  return this->name_.get ();
}

inline
void XsdNameValuePair::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdNameValuePair::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_TYPES_IXX
