// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_ENUMS_IXX
#define CXX___SCHEMA_XSD_CORE_ENUMS_IXX

// Begin prologue.
//
//
// End prologue.

// XsdLibrary
// 

inline
XsdLibrary::
XsdLibrary ()
: ::xml_schema::string ()
{
}

inline
XsdLibrary::
XsdLibrary (value v)
: ::xml_schema::string (_xsd_XsdLibrary_literals_[v])
{
}

inline
XsdLibrary::
XsdLibrary (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdLibrary::
XsdLibrary (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdLibrary::
XsdLibrary (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdLibrary::
XsdLibrary (const XsdLibrary& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdLibrary& XsdLibrary::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdLibrary_literals_[v]);

  return *this;
}


// XsdDataSource
// 

inline
XsdDataSource::
XsdDataSource ()
: ::xml_schema::string ()
{
}

inline
XsdDataSource::
XsdDataSource (value v)
: ::xml_schema::string (_xsd_XsdDataSource_literals_[v])
{
}

inline
XsdDataSource::
XsdDataSource (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDataSource::
XsdDataSource (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDataSource::
XsdDataSource (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDataSource::
XsdDataSource (const XsdDataSource& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDataSource& XsdDataSource::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDataSource_literals_[v]);

  return *this;
}


// XsdSchemaType
// 

inline
XsdSchemaType::
XsdSchemaType ()
: ::xml_schema::string ()
{
}

inline
XsdSchemaType::
XsdSchemaType (value v)
: ::xml_schema::string (_xsd_XsdSchemaType_literals_[v])
{
}

inline
XsdSchemaType::
XsdSchemaType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSchemaType::
XsdSchemaType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSchemaType::
XsdSchemaType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSchemaType::
XsdSchemaType (const XsdSchemaType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSchemaType& XsdSchemaType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSchemaType_literals_[v]);

  return *this;
}


// XsdCountry
// 

inline
XsdCountry::
XsdCountry ()
: ::xml_schema::string ()
{
}

inline
XsdCountry::
XsdCountry (value v)
: ::xml_schema::string (_xsd_XsdCountry_literals_[v])
{
}

inline
XsdCountry::
XsdCountry (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCountry::
XsdCountry (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCountry::
XsdCountry (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCountry::
XsdCountry (const XsdCountry& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCountry& XsdCountry::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCountry_literals_[v]);

  return *this;
}


// XsdCurrency
// 

inline
XsdCurrency::
XsdCurrency ()
: ::xml_schema::string ()
{
}

inline
XsdCurrency::
XsdCurrency (value v)
: ::xml_schema::string (_xsd_XsdCurrency_literals_[v])
{
}

inline
XsdCurrency::
XsdCurrency (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCurrency::
XsdCurrency (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCurrency::
XsdCurrency (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCurrency::
XsdCurrency (const XsdCurrency& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCurrency& XsdCurrency::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCurrency_literals_[v]);

  return *this;
}


// XsdExchange
// 

inline
XsdExchange::
XsdExchange ()
: ::xml_schema::string ()
{
}

inline
XsdExchange::
XsdExchange (value v)
: ::xml_schema::string (_xsd_XsdExchange_literals_[v])
{
}

inline
XsdExchange::
XsdExchange (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdExchange::
XsdExchange (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExchange::
XsdExchange (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExchange::
XsdExchange (const XsdExchange& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdExchange& XsdExchange::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdExchange_literals_[v]);

  return *this;
}


// XsdMatrixStyle
// 

inline
XsdMatrixStyle::
XsdMatrixStyle ()
: ::xml_schema::string ()
{
}

inline
XsdMatrixStyle::
XsdMatrixStyle (value v)
: ::xml_schema::string (_xsd_XsdMatrixStyle_literals_[v])
{
}

inline
XsdMatrixStyle::
XsdMatrixStyle (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMatrixStyle::
XsdMatrixStyle (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMatrixStyle::
XsdMatrixStyle (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMatrixStyle::
XsdMatrixStyle (const XsdMatrixStyle& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMatrixStyle& XsdMatrixStyle::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMatrixStyle_literals_[v]);

  return *this;
}


// XsdDayOfMonth
// 

inline
const XsdDayOfMonth::businessOnly_type& XsdDayOfMonth::
businessOnly () const
{
  return this->businessOnly_.get ();
}

inline
XsdDayOfMonth::businessOnly_type& XsdDayOfMonth::
businessOnly ()
{
  return this->businessOnly_.get ();
}

inline
void XsdDayOfMonth::
businessOnly (const businessOnly_type& x)
{
  this->businessOnly_.set (x);
}

inline
XsdDayOfMonth::businessOnly_type XsdDayOfMonth::
businessOnly_default_value ()
{
  return businessOnly_type (false);
}


// XsdDayOfWeek
// 

inline
XsdDayOfWeek::
XsdDayOfWeek ()
: ::xml_schema::string ()
{
}

inline
XsdDayOfWeek::
XsdDayOfWeek (value v)
: ::xml_schema::string (_xsd_XsdDayOfWeek_literals_[v])
{
}

inline
XsdDayOfWeek::
XsdDayOfWeek (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDayOfWeek::
XsdDayOfWeek (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDayOfWeek::
XsdDayOfWeek (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDayOfWeek::
XsdDayOfWeek (const XsdDayOfWeek& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDayOfWeek& XsdDayOfWeek::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDayOfWeek_literals_[v]);

  return *this;
}


// XsdFrequency
// 

inline
XsdFrequency::
XsdFrequency ()
: ::xml_schema::string ()
{
}

inline
XsdFrequency::
XsdFrequency (value v)
: ::xml_schema::string (_xsd_XsdFrequency_literals_[v])
{
}

inline
XsdFrequency::
XsdFrequency (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdFrequency::
XsdFrequency (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdFrequency::
XsdFrequency (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdFrequency::
XsdFrequency (const XsdFrequency& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdFrequency& XsdFrequency::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdFrequency_literals_[v]);

  return *this;
}


// XsdImmMonth
// 

inline
XsdImmMonth::
XsdImmMonth ()
: ::xml_schema::string ()
{
}

inline
XsdImmMonth::
XsdImmMonth (value v)
: ::xml_schema::string (_xsd_XsdImmMonth_literals_[v])
{
}

inline
XsdImmMonth::
XsdImmMonth (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdImmMonth::
XsdImmMonth (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdImmMonth::
XsdImmMonth (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdImmMonth::
XsdImmMonth (const XsdImmMonth& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdImmMonth& XsdImmMonth::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdImmMonth_literals_[v]);

  return *this;
}


// XsdMonthOfYear
// 

inline
XsdMonthOfYear::
XsdMonthOfYear ()
: ::xml_schema::string ()
{
}

inline
XsdMonthOfYear::
XsdMonthOfYear (value v)
: ::xml_schema::string (_xsd_XsdMonthOfYear_literals_[v])
{
}

inline
XsdMonthOfYear::
XsdMonthOfYear (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMonthOfYear::
XsdMonthOfYear (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMonthOfYear::
XsdMonthOfYear (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMonthOfYear::
XsdMonthOfYear (const XsdMonthOfYear& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMonthOfYear& XsdMonthOfYear::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMonthOfYear_literals_[v]);

  return *this;
}


// XsdTimeUnit
// 

inline
XsdTimeUnit::
XsdTimeUnit ()
: ::xml_schema::string ()
{
}

inline
XsdTimeUnit::
XsdTimeUnit (value v)
: ::xml_schema::string (_xsd_XsdTimeUnit_literals_[v])
{
}

inline
XsdTimeUnit::
XsdTimeUnit (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdTimeUnit::
XsdTimeUnit (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdTimeUnit::
XsdTimeUnit (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdTimeUnit::
XsdTimeUnit (const XsdTimeUnit& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdTimeUnit& XsdTimeUnit::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdTimeUnit_literals_[v]);

  return *this;
}


// XsdDirection
// 

inline
XsdDirection::
XsdDirection ()
: ::xml_schema::string ()
{
}

inline
XsdDirection::
XsdDirection (value v)
: ::xml_schema::string (_xsd_XsdDirection_literals_[v])
{
}

inline
XsdDirection::
XsdDirection (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDirection::
XsdDirection (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDirection::
XsdDirection (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDirection::
XsdDirection (const XsdDirection& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDirection& XsdDirection::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDirection_literals_[v]);

  return *this;
}


// XsdSortType
// 

inline
XsdSortType::
XsdSortType ()
: ::xml_schema::string ()
{
}

inline
XsdSortType::
XsdSortType (value v)
: ::xml_schema::string (_xsd_XsdSortType_literals_[v])
{
}

inline
XsdSortType::
XsdSortType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSortType::
XsdSortType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSortType::
XsdSortType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSortType::
XsdSortType (const XsdSortType& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSortType& XsdSortType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSortType_literals_[v]);

  return *this;
}


// XsdRowOrColumn
// 

inline
XsdRowOrColumn::
XsdRowOrColumn ()
: ::xml_schema::string ()
{
}

inline
XsdRowOrColumn::
XsdRowOrColumn (value v)
: ::xml_schema::string (_xsd_XsdRowOrColumn_literals_[v])
{
}

inline
XsdRowOrColumn::
XsdRowOrColumn (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRowOrColumn::
XsdRowOrColumn (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRowOrColumn::
XsdRowOrColumn (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRowOrColumn::
XsdRowOrColumn (const XsdRowOrColumn& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRowOrColumn& XsdRowOrColumn::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRowOrColumn_literals_[v]);

  return *this;
}


// XsdUnionOrIntersection
// 

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection ()
: ::xml_schema::string ()
{
}

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection (value v)
: ::xml_schema::string (_xsd_XsdUnionOrIntersection_literals_[v])
{
}

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUnionOrIntersection::
XsdUnionOrIntersection (const XsdUnionOrIntersection& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdUnionOrIntersection& XsdUnionOrIntersection::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdUnionOrIntersection_literals_[v]);

  return *this;
}


// XsdLowerOrUpper
// 

inline
XsdLowerOrUpper::
XsdLowerOrUpper ()
: ::xml_schema::string ()
{
}

inline
XsdLowerOrUpper::
XsdLowerOrUpper (value v)
: ::xml_schema::string (_xsd_XsdLowerOrUpper_literals_[v])
{
}

inline
XsdLowerOrUpper::
XsdLowerOrUpper (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdLowerOrUpper::
XsdLowerOrUpper (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdLowerOrUpper::
XsdLowerOrUpper (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdLowerOrUpper::
XsdLowerOrUpper (const XsdLowerOrUpper& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdLowerOrUpper& XsdLowerOrUpper::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdLowerOrUpper_literals_[v]);

  return *this;
}


// XsdDirectOrInverse
// 

inline
XsdDirectOrInverse::
XsdDirectOrInverse ()
: ::xml_schema::string ()
{
}

inline
XsdDirectOrInverse::
XsdDirectOrInverse (value v)
: ::xml_schema::string (_xsd_XsdDirectOrInverse_literals_[v])
{
}

inline
XsdDirectOrInverse::
XsdDirectOrInverse (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDirectOrInverse::
XsdDirectOrInverse (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDirectOrInverse::
XsdDirectOrInverse (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDirectOrInverse::
XsdDirectOrInverse (const XsdDirectOrInverse& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDirectOrInverse& XsdDirectOrInverse::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDirectOrInverse_literals_[v]);

  return *this;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_ENUMS_IXX
