// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "precompiled.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "output.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

// XsdOutputDocument
//

XsdOutputDocument::
XsdOutputDocument ()
: ::xml_schema::type (),
  error_ (::xml_schema::flags (), this),
  result_ (::xml_schema::flags (), this),
  name_ (::xml_schema::flags (), this),
  client_ (::xml_schema::flags (), this),
  timeStamp_ (::xml_schema::flags (), this),
  documentID_ (::xml_schema::flags (), this)
{
}

XsdOutputDocument::
XsdOutputDocument (const documentID_type& documentID)
: ::xml_schema::type (),
  error_ (::xml_schema::flags (), this),
  result_ (::xml_schema::flags (), this),
  name_ (::xml_schema::flags (), this),
  client_ (::xml_schema::flags (), this),
  timeStamp_ (::xml_schema::flags (), this),
  documentID_ (documentID, ::xml_schema::flags (), this)
{
}

XsdOutputDocument::
XsdOutputDocument (const XsdOutputDocument& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  error_ (x.error_, f, this),
  result_ (x.result_, f, this),
  name_ (x.name_, f, this),
  client_ (x.client_, f, this),
  timeStamp_ (x.timeStamp_, f, this),
  documentID_ (x.documentID_, f, this)
{
}

XsdOutputDocument::
XsdOutputDocument (const xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  error_ (f, this),
  result_ (f, this),
  name_ (f, this),
  client_ (f, this),
  timeStamp_ (f, this),
  documentID_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdOutputDocument::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // error
    //
    if (n.name () == "error" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_type > r (
        error_traits::create (i, f, this));

      if (!this->error_)
      {
        this->error_.set (r);
        continue;
      }
    }

    // result
    //
    {
      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "result",
          "",
          &::xsd::cxx::tree::factory_impl< result_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< result_type > r (
          dynamic_cast< result_type* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->result_.push_back (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "client" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< client_type > r (
        client_traits::create (i, f, this));

      this->client_.set (r);
      continue;
    }

    if (n.name () == "timeStamp" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< timeStamp_type > r (
        timeStamp_traits::create (i, f, this));

      this->timeStamp_.set (r);
      continue;
    }

    if (n.name () == "documentID" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< documentID_type > r (
        documentID_traits::create (i, f, this));

      this->documentID_.set (r);
      continue;
    }
  }

  if (!documentID_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "documentID",
      "");
  }
}

XsdOutputDocument* XsdOutputDocument::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdOutputDocument (*this, f, c);
}

XsdOutputDocument::
~XsdOutputDocument ()
{
}

bool
operator== (const XsdOutputDocument& x, const XsdOutputDocument& y)
{
  if (!(x.error () == y.error ()))
    return false;

  {
    ::xsd::cxx::tree::comparison_map< char >& cm (
      ::xsd::cxx::tree::comparison_map_instance< 0, char > ());

    XsdOutputDocument::result_sequence a (x.result ()), b (y.result ());

    if (a.size () != b.size ())
      return false;

    for (XsdOutputDocument::result_const_iterator
         ai (a.begin ()), bi (b.begin ()), ae (a.end ()), be (b.end ());
         ai != ae; ++ai, ++bi)
    {
      if (!cm.compare (*ai, *bi))
        return false;
    }
  }

  if (!(x.name () == y.name ()))
    return false;

  if (!(x.client () == y.client ()))
    return false;

  if (!(x.timeStamp () == y.timeStamp ()))
    return false;

  if (!(x.documentID () == y.documentID ()))
    return false;

  return true;
}

bool
operator!= (const XsdOutputDocument& x, const XsdOutputDocument& y)
{
  return !(x == y);
}

// XsdOutputError
//

XsdOutputError::
XsdOutputError ()
: ::xml_schema::type (),
  parse_ (::xml_schema::flags (), this),
  validation_ (::xml_schema::flags (), this)
{
}

XsdOutputError::
XsdOutputError (const XsdOutputError& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  parse_ (x.parse_, f, this),
  validation_ (x.validation_, f, this)
{
}

XsdOutputError::
XsdOutputError (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parse_ (f, this),
  validation_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void XsdOutputError::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parse
    //
    if (n.name () == "parse" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parse_type > r (
        parse_traits::create (i, f, this));

      if (!this->parse_)
      {
        this->parse_.set (r);
        continue;
      }
    }

    // validation
    //
    if (n.name () == "validation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< validation_type > r (
        validation_traits::create (i, f, this));

      if (!this->validation_)
      {
        this->validation_.set (r);
        continue;
      }
    }

    break;
  }
}

XsdOutputError* XsdOutputError::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdOutputError (*this, f, c);
}

XsdOutputError::
~XsdOutputError ()
{
}

bool
operator== (const XsdOutputError& x, const XsdOutputError& y)
{
  if (!(x.parse () == y.parse ()))
    return false;

  if (!(x.validation () == y.validation ()))
    return false;

  return true;
}

bool
operator!= (const XsdOutputError& x, const XsdOutputError& y)
{
  return !(x == y);
}

// XsdNodeError
//

XsdNodeError::
XsdNodeError ()
: ::xml_schema::type (),
  message_ (::xml_schema::flags (), this),
  name_ (::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this)
{
}

XsdNodeError::
XsdNodeError (const name_type& name)
: ::xml_schema::type (),
  message_ (::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this),
  type_ (::xml_schema::flags (), this)
{
}

XsdNodeError::
XsdNodeError (const XsdNodeError& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  message_ (x.message_, f, this),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this)
{
}

XsdNodeError::
XsdNodeError (const xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  message_ (f, this),
  name_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdNodeError::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // message
    //
    if (n.name () == "message" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< message_type > r (
        message_traits::create (i, f, this));

      this->message_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      this->type_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

XsdNodeError* XsdNodeError::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdNodeError (*this, f, c);
}

XsdNodeError::
~XsdNodeError ()
{
}

bool
operator== (const XsdNodeError& x, const XsdNodeError& y)
{
  if (!(x.message () == y.message ()))
    return false;

  if (!(x.name () == y.name ()))
    return false;

  if (!(x.type () == y.type ()))
    return false;

  return true;
}

bool
operator!= (const XsdNodeError& x, const XsdNodeError& y)
{
  return !(x == y);
}

// XsdSchemaError
//

XsdSchemaError::
XsdSchemaError ()
: ::XsdNodeError (),
  uniqueID_ (::xml_schema::flags (), this),
  index_ (::xml_schema::flags (), this)
{
}

XsdSchemaError::
XsdSchemaError (const ::XsdNodeError& _xsd_XsdNodeError_base,
                const index_type& index)
: ::XsdNodeError (_xsd_XsdNodeError_base),
  uniqueID_ (::xml_schema::flags (), this),
  index_ (index, ::xml_schema::flags (), this)
{
}

XsdSchemaError::
XsdSchemaError (const name_type& name,
                const index_type& index)
: ::XsdNodeError (name),
  uniqueID_ (::xml_schema::flags (), this),
  index_ (index, ::xml_schema::flags (), this)
{
}

XsdSchemaError::
XsdSchemaError (const XsdSchemaError& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdNodeError (x, f, c),
  uniqueID_ (x.uniqueID_, f, this),
  index_ (x.index_, f, this)
{
}

XsdSchemaError::
XsdSchemaError (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdNodeError (e, f | ::xml_schema::flags::base, c),
  uniqueID_ (f, this),
  index_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdSchemaError::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::XsdNodeError::parse (p, f);

  p.reset_attributes ();

  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "uniqueID" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< uniqueID_type > r (
        uniqueID_traits::create (i, f, this));

      this->uniqueID_.set (r);
      continue;
    }

    if (n.name () == "index" && n.namespace_ ().empty ())
    {
      this->index_.set (index_traits::create (i, f, this));
      continue;
    }
  }

  if (!index_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "index",
      "");
  }
}

XsdSchemaError* XsdSchemaError::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdSchemaError (*this, f, c);
}

XsdSchemaError::
~XsdSchemaError ()
{
}

bool
operator== (const XsdSchemaError& x, const XsdSchemaError& y)
{
  if (!(static_cast< const ::XsdNodeError& > (x) ==
        static_cast< const ::XsdNodeError& > (y)))
    return false;

  if (!(x.uniqueID () == y.uniqueID ()))
    return false;

  if (!(x.index () == y.index ()))
    return false;

  return true;
}

bool
operator!= (const XsdSchemaError& x, const XsdSchemaError& y)
{
  return !(x == y);
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdOutputDocument& i)
{
  if (i.error ())
  {
    o << ::std::endl << "error: " << *i.error ();
  }

  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    for (XsdOutputDocument::result_const_iterator
         b (i.result ().begin ()), e (i.result ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "result: ";
      om.insert (o, *b);
    }
  }

  if (i.name ())
  {
    o << ::std::endl << "name: " << *i.name ();
  }

  if (i.client ())
  {
    o << ::std::endl << "client: " << *i.client ();
  }

  if (i.timeStamp ())
  {
    o << ::std::endl << "timeStamp: " << *i.timeStamp ();
  }

  o << ::std::endl << "documentID: " << i.documentID ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdOutputError& i)
{
  if (i.parse ())
  {
    o << ::std::endl << "parse: " << *i.parse ();
  }

  if (i.validation ())
  {
    o << ::std::endl << "validation: " << *i.validation ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdNodeError& i)
{
  for (XsdNodeError::message_const_iterator
       b (i.message ().begin ()), e (i.message ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "message: " << *b;
  }

  o << ::std::endl << "name: " << i.name ();
  if (i.type ())
  {
    o << ::std::endl << "type: " << *i.type ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdSchemaError& i)
{
  o << static_cast< const ::XsdNodeError& > (i);

  if (i.uniqueID ())
  {
    o << ::std::endl << "uniqueID: " << *i.uniqueID ();
  }

  o << ::std::endl << "index: " << i.index ();
  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (const ::std::string& u,
                   xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::xsdOutputDocument (isrc, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::xsdOutputDocument (isrc, h, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::xsdOutputDocument (isrc, h, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::xsdOutputDocument (isrc, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::xsdOutputDocument (isrc, h, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::std::istream& is,
                   const ::std::string& sid,
                   xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::xsdOutputDocument (isrc, h, f, p);
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (xercesc::InputSource& i,
                   xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::XsdOutputDocument > r (
    ::xsdOutputDocument (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (const xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > c (
      static_cast< xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::XsdOutputDocument > r (
      ::xsdOutputDocument (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "xsdOutputDocument" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::XsdOutputDocument > r (
      ::xsd::cxx::tree::traits< ::XsdOutputDocument, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "xsdOutputDocument",
    "");
}

::std::auto_ptr< ::XsdOutputDocument >
xsdOutputDocument (::xml_schema::dom::auto_ptr< xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "xsdOutputDocument" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::XsdOutputDocument > r (
      ::xsd::cxx::tree::traits< ::XsdOutputDocument, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "xsdOutputDocument",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (xercesc::DOMElement& e, const XsdOutputDocument& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // error
  //
  if (i.error ())
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "error",
        e));

    s << *i.error ();
  }

  // result
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (XsdOutputDocument::result_const_iterator
         b (i.result ().begin ()), n (i.result ().end ());
         b != n; ++b)
    {
      if (typeid (XsdOutputDocument::result_type) == typeid (*b))
      {
        xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "result",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "result",
          "",
          false, true, e, *b);
    }
  }

  // name
  //
  if (i.name ())
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << *i.name ();
  }

  // client
  //
  if (i.client ())
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "client",
        e));

    a << *i.client ();
  }

  // timeStamp
  //
  if (i.timeStamp ())
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "timeStamp",
        e));

    a << *i.timeStamp ();
  }

  // documentID
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "documentID",
        e));

    a << i.documentID ();
  }
}

void
xsdOutputDocument (::std::ostream& o,
                   const ::XsdOutputDocument& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
xsdOutputDocument (::std::ostream& o,
                   const ::XsdOutputDocument& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
xsdOutputDocument (::std::ostream& o,
                   const ::XsdOutputDocument& s,
                   xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
xsdOutputDocument (xercesc::XMLFormatTarget& t,
                   const ::XsdOutputDocument& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
xsdOutputDocument (xercesc::XMLFormatTarget& t,
                   const ::XsdOutputDocument& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
xsdOutputDocument (xercesc::XMLFormatTarget& t,
                   const ::XsdOutputDocument& s,
                   xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsdOutputDocument (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
xsdOutputDocument (xercesc::DOMDocument& d,
                   const ::XsdOutputDocument& s,
                   ::xml_schema::flags)
{
  xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "xsdOutputDocument" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "xsdOutputDocument",
      "");
  }
}

::xml_schema::dom::auto_ptr< xercesc::DOMDocument >
xsdOutputDocument (const ::XsdOutputDocument& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "xsdOutputDocument",
      "",
      m, f));

  ::xsdOutputDocument (*d, s, f);
  return d;
}

void
operator<< (xercesc::DOMElement& e, const XsdOutputError& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parse
  //
  if (i.parse ())
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parse",
        e));

    s << *i.parse ();
  }

  // validation
  //
  if (i.validation ())
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "validation",
        e));

    s << *i.validation ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdNodeError& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // message
  //
  for (XsdNodeError::message_const_iterator
       b (i.message ().begin ()), n (i.message ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "message",
        e));

    s << *b;
  }

  // name
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // type
  //
  if (i.type ())
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << *i.type ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdSchemaError& i)
{
  e << static_cast< const ::XsdNodeError& > (i);

  // uniqueID
  //
  if (i.uniqueID ())
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "uniqueID",
        e));

    a << *i.uniqueID ();
  }

  // index
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "index",
        e));

    a << i.index ();
  }
}

#include <xsd/cxx/tree/stream-extraction-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::stream_extraction_plate< 0, boost::archive::binary_iarchive, char >
  stream_extraction_plate_init_0;
}

XsdOutputDocument::
XsdOutputDocument (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  error_ (f, this),
  result_ (f, this),
  name_ (f, this),
  client_ (f, this),
  timeStamp_ (f, this),
  documentID_ (f, this)
{
  this->parse (s, f);
}

void XsdOutputDocument::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< error_type > r (new error_type (s, f, this));
      this->error_.set (r);
    }
  }

  {
    ::std::size_t n;
    ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
    s >> as;
    if (n > 0)
    {
      result_sequence& c (this->result_);
      c.reserve (n);
      while (n--)
      {
        bool d;
        ::std::auto_ptr< result_type > r;
        s >> d;

        if (!d)
          r.reset (new result_type (s, f, this));
        else
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::stream_extraction_map_instance< 0, boost::archive::binary_iarchive, char > ().extract (
              s, f, this));
          r.reset (dynamic_cast< result_type* > (tmp.get ()));
          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();
        }

        c.push_back (r);
      }
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< name_type > r (new name_type (s, f, this));
      this->name_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< client_type > r (new client_type (s, f, this));
      this->client_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< timeStamp_type > r (new timeStamp_type (s, f, this));
      this->timeStamp_.set (r);
    }
  }

  {
    ::std::auto_ptr< documentID_type > r (new documentID_type (s, f, this));
    this->documentID_.set (r);
  }
}

XsdOutputError::
XsdOutputError (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  parse_ (f, this),
  validation_ (f, this)
{
  this->parse (s, f);
}

void XsdOutputError::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< parse_type > r (new parse_type (s, f, this));
      this->parse_.set (r);
    }
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< validation_type > r (new validation_type (s, f, this));
      this->validation_.set (r);
    }
  }
}

XsdNodeError::
XsdNodeError (::xml_schema::istream< boost::archive::binary_iarchive >& s,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (s, f, c),
  message_ (f, this),
  name_ (f, this),
  type_ (f, this)
{
  this->parse (s, f);
}

void XsdNodeError::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::size_t n;
    ::xsd::cxx::tree::istream_common::as_size< ::std::size_t > as (n);
    s >> as;
    if (n > 0)
    {
      message_sequence& c (this->message_);
      c.reserve (n);
      while (n--)
      {
        ::std::auto_ptr< message_type > r (new message_type (s, f, this));
        c.push_back (r);
      }
    }
  }

  {
    ::std::auto_ptr< name_type > r (new name_type (s, f, this));
    this->name_.set (r);
  }

  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< type_type > r (new type_type (s, f, this));
      this->type_.set (r);
    }
  }
}

XsdSchemaError::
XsdSchemaError (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdNodeError (s, f, c),
  uniqueID_ (f, this),
  index_ (f, this)
{
  this->parse (s, f);
}

void XsdSchemaError::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    bool p;
    s >> p;
    if (p)
    {
      ::std::auto_ptr< uniqueID_type > r (new uniqueID_type (s, f, this));
      this->uniqueID_.set (r);
    }
  }

  {
    index_type r;
    s >> r;
    this->index_.set (r);
  }
}

#include <xsd/cxx/tree/stream-insertion-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::stream_insertion_plate< 0, boost::archive::binary_oarchive, char >
  stream_insertion_plate_init_0;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdOutputDocument& x)
{
  {
    bool p (x.error ());
    s << p;
    if (p)
      s << *x.error ();
  }

  {
    const XsdOutputDocument::result_sequence& c (x.result ());
    s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
    for (XsdOutputDocument::result_const_iterator
         i (c.begin ()), e (c.end ());
         i != e; ++i)
    {
      bool d (typeid (XsdOutputDocument::result_type) != typeid (*i));
      s << d;
      if (!d)
        s << *i;
      else
        ::xsd::cxx::tree::stream_insertion_map_instance< 0, boost::archive::binary_oarchive, char > ().insert (s, *i);
    }
  }

  {
    bool p (x.name ());
    s << p;
    if (p)
      s << *x.name ();
  }

  {
    bool p (x.client ());
    s << p;
    if (p)
      s << *x.client ();
  }

  {
    bool p (x.timeStamp ());
    s << p;
    if (p)
      s << *x.timeStamp ();
  }

  s << x.documentID ();
  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdOutputError& x)
{
  {
    bool p (x.parse ());
    s << p;
    if (p)
      s << *x.parse ();
  }

  {
    bool p (x.validation ());
    s << p;
    if (p)
      s << *x.validation ();
  }

  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdNodeError& x)
{
  {
    const XsdNodeError::message_sequence& c (x.message ());
    s << ::xsd::cxx::tree::ostream_common::as_size< ::std::size_t > (c.size ());
    for (XsdNodeError::message_const_iterator
         i (c.begin ()), e (c.end ());
         i != e; ++i)
    {
      s << *i;
    }
  }

  s << x.name ();
  {
    bool p (x.type ());
    s << p;
    if (p)
      s << *x.type ();
  }

  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdSchemaError& x)
{
  s << static_cast< const ::XsdNodeError& > (x);
  {
    bool p (x.uniqueID ());
    s << p;
    if (p)
      s << *x.uniqueID ();
  }

  s << x.index ();
  return s;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

