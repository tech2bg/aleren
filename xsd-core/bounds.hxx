// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_BOUNDS_HXX
#define CXX___SCHEMA_XSD_CORE_BOUNDS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include "../xsd-base/xml-schema.hxx"

// Forward declarations.
//
class XsdDoubleBounds;
class XsdDateBounds;
class XsdTimeBounds;
class XsdTenorBounds;
class XsdIntegerBounds;
class XsdSizeBounds;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/istream-fwd.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "types.hxx"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "types.hxx"

#endif // XSD_DONT_INCLUDE_INLINE

class XsdDoubleBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::double_ lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char, ::xsd::cxx::tree::schema_type::double_ > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  // upper
  // 
  typedef ::xml_schema::double_ upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char, ::xsd::cxx::tree::schema_type::double_ > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  // Constructors.
  //
  XsdDoubleBounds ();

  XsdDoubleBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  XsdDoubleBounds (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  XsdDoubleBounds (const XsdDoubleBounds& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual XsdDoubleBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdDoubleBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdDoubleBounds&, const XsdDoubleBounds&);

bool
operator!= (const XsdDoubleBounds&, const XsdDoubleBounds&);


class XsdDateBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::date lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  void
  lower (::std::auto_ptr< lower_type > p);

  // upper
  // 
  typedef ::xml_schema::date upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  void
  upper (::std::auto_ptr< upper_type > p);

  // Constructors.
  //
  XsdDateBounds ();

  XsdDateBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdDateBounds (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdDateBounds (const XsdDateBounds& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual XsdDateBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdDateBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdDateBounds&, const XsdDateBounds&);

bool
operator!= (const XsdDateBounds&, const XsdDateBounds&);


class XsdTimeBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::date_time lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  void
  lower (::std::auto_ptr< lower_type > p);

  // upper
  // 
  typedef ::xml_schema::date_time upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  void
  upper (::std::auto_ptr< upper_type > p);

  // Constructors.
  //
  XsdTimeBounds ();

  XsdTimeBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdTimeBounds (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdTimeBounds (const XsdTimeBounds& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual XsdTimeBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdTimeBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdTimeBounds&, const XsdTimeBounds&);

bool
operator!= (const XsdTimeBounds&, const XsdTimeBounds&);


class XsdTenorBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::duration lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  void
  lower (::std::auto_ptr< lower_type > p);

  // upper
  // 
  typedef ::xml_schema::duration upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  void
  upper (::std::auto_ptr< upper_type > p);

  // Constructors.
  //
  XsdTenorBounds ();

  XsdTenorBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  XsdTenorBounds (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  XsdTenorBounds (const XsdTenorBounds& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual XsdTenorBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdTenorBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdTenorBounds&, const XsdTenorBounds&);

bool
operator!= (const XsdTenorBounds&, const XsdTenorBounds&);


class XsdIntegerBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::int_ lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  // upper
  // 
  typedef ::xml_schema::int_ upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  // Constructors.
  //
  XsdIntegerBounds ();

  XsdIntegerBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  XsdIntegerBounds (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  XsdIntegerBounds (const XsdIntegerBounds& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual XsdIntegerBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdIntegerBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdIntegerBounds&, const XsdIntegerBounds&);

bool
operator!= (const XsdIntegerBounds&, const XsdIntegerBounds&);


class XsdSizeBounds: public ::xml_schema::type
{
  public:
  // lower
  // 
  typedef ::xml_schema::unsigned_int lower_type;
  typedef ::xsd::cxx::tree::optional< lower_type > lower_optional;
  typedef ::xsd::cxx::tree::traits< lower_type, char > lower_traits;

  const lower_optional&
  lower () const;

  lower_optional&
  lower ();

  void
  lower (const lower_type& x);

  void
  lower (const lower_optional& x);

  // upper
  // 
  typedef ::xml_schema::unsigned_int upper_type;
  typedef ::xsd::cxx::tree::optional< upper_type > upper_optional;
  typedef ::xsd::cxx::tree::traits< upper_type, char > upper_traits;

  const upper_optional&
  upper () const;

  upper_optional&
  upper ();

  void
  upper (const upper_type& x);

  void
  upper (const upper_optional& x);

  // Constructors.
  //
  XsdSizeBounds ();

  XsdSizeBounds (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdSizeBounds (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  XsdSizeBounds (const XsdSizeBounds& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual XsdSizeBounds*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~XsdSizeBounds ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  void
  parse (::xml_schema::istream< boost::archive::binary_iarchive >&,
         ::xml_schema::flags);

  lower_optional lower_;
  upper_optional upper_;
};

bool
operator== (const XsdSizeBounds&, const XsdSizeBounds&);

bool
operator!= (const XsdSizeBounds&, const XsdSizeBounds&);


#ifndef XSD_DONT_INCLUDE_INLINE

#include "types.ixx"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const XsdDoubleBounds&);

::std::ostream&
operator<< (::std::ostream&, const XsdDateBounds&);

::std::ostream&
operator<< (::std::ostream&, const XsdTimeBounds&);

::std::ostream&
operator<< (::std::ostream&, const XsdTenorBounds&);

::std::ostream&
operator<< (::std::ostream&, const XsdIntegerBounds&);

::std::ostream&
operator<< (::std::ostream&, const XsdSizeBounds&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (xercesc::DOMElement&, const XsdDoubleBounds&);

void
operator<< (xercesc::DOMElement&, const XsdDateBounds&);

void
operator<< (xercesc::DOMElement&, const XsdTimeBounds&);

void
operator<< (xercesc::DOMElement&, const XsdTenorBounds&);

void
operator<< (xercesc::DOMElement&, const XsdIntegerBounds&);

void
operator<< (xercesc::DOMElement&, const XsdSizeBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdDoubleBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdDateBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdTimeBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdTenorBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdIntegerBounds&);

::xml_schema::ostream< boost::archive::binary_oarchive >&
operator<< (::xml_schema::ostream< boost::archive::binary_oarchive >&,
            const XsdSizeBounds&);

#ifndef XSD_DONT_INCLUDE_INLINE
#include "bounds.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_BOUNDS_HXX
