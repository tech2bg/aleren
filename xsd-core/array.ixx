// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_ARRAY_IXX
#define CXX___SCHEMA_XSD_CORE_ARRAY_IXX

// Begin prologue.
//
//
// End prologue.

#include "vector.ixx"

#include "result.ixx"

#include "enums.ixx"

// XsdDoubleArray
// 

inline
const XsdDoubleArray::size_type& XsdDoubleArray::
size () const
{
  return this->size_.get ();
}

inline
XsdDoubleArray::size_type& XsdDoubleArray::
size ()
{
  return this->size_.get ();
}

inline
void XsdDoubleArray::
size (const size_type& x)
{
  this->size_.set (x);
}

inline
void XsdDoubleArray::
size (::std::auto_ptr< size_type > x)
{
  this->size_.set (x);
}

inline
const XsdDoubleArray::order_type& XsdDoubleArray::
order () const
{
  return this->order_.get ();
}

inline
XsdDoubleArray::order_type& XsdDoubleArray::
order ()
{
  return this->order_.get ();
}

inline
void XsdDoubleArray::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
void XsdDoubleArray::
order (::std::auto_ptr< order_type > x)
{
  this->order_.set (x);
}

inline
const XsdDoubleArray::order_type& XsdDoubleArray::
order_default_value ()
{
  return order_default_value_;
}


// XsdIntegerArray
// 

inline
const XsdIntegerArray::size_type& XsdIntegerArray::
size () const
{
  return this->size_.get ();
}

inline
XsdIntegerArray::size_type& XsdIntegerArray::
size ()
{
  return this->size_.get ();
}

inline
void XsdIntegerArray::
size (const size_type& x)
{
  this->size_.set (x);
}

inline
void XsdIntegerArray::
size (::std::auto_ptr< size_type > x)
{
  this->size_.set (x);
}

inline
const XsdIntegerArray::order_type& XsdIntegerArray::
order () const
{
  return this->order_.get ();
}

inline
XsdIntegerArray::order_type& XsdIntegerArray::
order ()
{
  return this->order_.get ();
}

inline
void XsdIntegerArray::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
void XsdIntegerArray::
order (::std::auto_ptr< order_type > x)
{
  this->order_.set (x);
}

inline
const XsdIntegerArray::order_type& XsdIntegerArray::
order_default_value ()
{
  return order_default_value_;
}


// XsdSizeArray
// 

inline
const XsdSizeArray::size_type& XsdSizeArray::
size () const
{
  return this->size_.get ();
}

inline
XsdSizeArray::size_type& XsdSizeArray::
size ()
{
  return this->size_.get ();
}

inline
void XsdSizeArray::
size (const size_type& x)
{
  this->size_.set (x);
}

inline
void XsdSizeArray::
size (::std::auto_ptr< size_type > x)
{
  this->size_.set (x);
}

inline
const XsdSizeArray::order_type& XsdSizeArray::
order () const
{
  return this->order_.get ();
}

inline
XsdSizeArray::order_type& XsdSizeArray::
order ()
{
  return this->order_.get ();
}

inline
void XsdSizeArray::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
void XsdSizeArray::
order (::std::auto_ptr< order_type > x)
{
  this->order_.set (x);
}

inline
const XsdSizeArray::order_type& XsdSizeArray::
order_default_value ()
{
  return order_default_value_;
}


// XsdDoubleArrayResult
// 

inline
const XsdDoubleArrayResult::value_type& XsdDoubleArrayResult::
value () const
{
  return this->value_.get ();
}

inline
XsdDoubleArrayResult::value_type& XsdDoubleArrayResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdDoubleArrayResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdDoubleArrayResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdIntegerArrayResult
// 

inline
const XsdIntegerArrayResult::value_type& XsdIntegerArrayResult::
value () const
{
  return this->value_.get ();
}

inline
XsdIntegerArrayResult::value_type& XsdIntegerArrayResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdIntegerArrayResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdIntegerArrayResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdSizeArrayResult
// 

inline
const XsdSizeArrayResult::value_type& XsdSizeArrayResult::
value () const
{
  return this->value_.get ();
}

inline
XsdSizeArrayResult::value_type& XsdSizeArrayResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdSizeArrayResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdSizeArrayResult::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_ARRAY_IXX
