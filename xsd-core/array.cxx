// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include "precompiled.h"
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "array.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

// XsdDoubleArray
//

const XsdDoubleArray::order_type XsdDoubleArray::order_default_value_ (
  "ROW");

XsdDoubleArray::
XsdDoubleArray ()
: ::XsdDoubleVector (),
  size_ (::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdDoubleArray::
XsdDoubleArray (const size_type& size)
: ::XsdDoubleVector (),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdDoubleArray::
XsdDoubleArray (const ::XsdDoubleVector& _xsd_XsdDoubleVector_base,
                const size_type& size)
: ::XsdDoubleVector (_xsd_XsdDoubleVector_base),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdDoubleArray::
XsdDoubleArray (const XsdDoubleArray& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdDoubleVector (x, f, c),
  size_ (x.size_, f, this),
  order_ (x.order_, f, this)
{
}

XsdDoubleArray::
XsdDoubleArray (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdDoubleVector (e, f | ::xml_schema::flags::base, c),
  size_ (f, this),
  order_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void XsdDoubleArray::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< size_type > r (
        size_traits::create (i, f, this));

      this->size_.set (r);
      continue;
    }

    if (n.name () == "order" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< order_type > r (
        order_traits::create (i, f, this));

      this->order_.set (r);
      continue;
    }
  }

  if (!size_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "size",
      "");
  }

  if (!order_.present ())
  {
    this->order_.set (order_default_value ());
  }
}

XsdDoubleArray* XsdDoubleArray::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdDoubleArray (*this, f, c);
}

XsdDoubleArray::
~XsdDoubleArray ()
{
}

bool
operator== (const XsdDoubleArray& x, const XsdDoubleArray& y)
{
  if (!(static_cast< const ::XsdDoubleVector& > (x) ==
        static_cast< const ::XsdDoubleVector& > (y)))
    return false;

  if (!(x.size () == y.size ()))
    return false;

  if (!(x.order () == y.order ()))
    return false;

  return true;
}

bool
operator!= (const XsdDoubleArray& x, const XsdDoubleArray& y)
{
  return !(x == y);
}

// XsdIntegerArray
//

const XsdIntegerArray::order_type XsdIntegerArray::order_default_value_ (
  "ROW");

XsdIntegerArray::
XsdIntegerArray ()
: ::XsdIntegerVector (),
  size_ (::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdIntegerArray::
XsdIntegerArray (const size_type& size)
: ::XsdIntegerVector (),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdIntegerArray::
XsdIntegerArray (const ::XsdIntegerVector& _xsd_XsdIntegerVector_base,
                 const size_type& size)
: ::XsdIntegerVector (_xsd_XsdIntegerVector_base),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdIntegerArray::
XsdIntegerArray (const XsdIntegerArray& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::XsdIntegerVector (x, f, c),
  size_ (x.size_, f, this),
  order_ (x.order_, f, this)
{
}

XsdIntegerArray::
XsdIntegerArray (const xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::XsdIntegerVector (e, f | ::xml_schema::flags::base, c),
  size_ (f, this),
  order_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void XsdIntegerArray::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< size_type > r (
        size_traits::create (i, f, this));

      this->size_.set (r);
      continue;
    }

    if (n.name () == "order" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< order_type > r (
        order_traits::create (i, f, this));

      this->order_.set (r);
      continue;
    }
  }

  if (!size_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "size",
      "");
  }

  if (!order_.present ())
  {
    this->order_.set (order_default_value ());
  }
}

XsdIntegerArray* XsdIntegerArray::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdIntegerArray (*this, f, c);
}

XsdIntegerArray::
~XsdIntegerArray ()
{
}

bool
operator== (const XsdIntegerArray& x, const XsdIntegerArray& y)
{
  if (!(static_cast< const ::XsdIntegerVector& > (x) ==
        static_cast< const ::XsdIntegerVector& > (y)))
    return false;

  if (!(x.size () == y.size ()))
    return false;

  if (!(x.order () == y.order ()))
    return false;

  return true;
}

bool
operator!= (const XsdIntegerArray& x, const XsdIntegerArray& y)
{
  return !(x == y);
}

// XsdSizeArray
//

const XsdSizeArray::order_type XsdSizeArray::order_default_value_ (
  "ROW");

XsdSizeArray::
XsdSizeArray ()
: ::XsdSizeVector (),
  size_ (::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdSizeArray::
XsdSizeArray (const size_type& size)
: ::XsdSizeVector (),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdSizeArray::
XsdSizeArray (const ::XsdSizeVector& _xsd_XsdSizeVector_base,
              const size_type& size)
: ::XsdSizeVector (_xsd_XsdSizeVector_base),
  size_ (size, ::xml_schema::flags (), this),
  order_ (order_default_value (), ::xml_schema::flags (), this)
{
}

XsdSizeArray::
XsdSizeArray (const XsdSizeArray& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::XsdSizeVector (x, f, c),
  size_ (x.size_, f, this),
  order_ (x.order_, f, this)
{
}

XsdSizeArray::
XsdSizeArray (const xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::XsdSizeVector (e, f | ::xml_schema::flags::base, c),
  size_ (f, this),
  order_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void XsdSizeArray::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< size_type > r (
        size_traits::create (i, f, this));

      this->size_.set (r);
      continue;
    }

    if (n.name () == "order" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< order_type > r (
        order_traits::create (i, f, this));

      this->order_.set (r);
      continue;
    }
  }

  if (!size_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "size",
      "");
  }

  if (!order_.present ())
  {
    this->order_.set (order_default_value ());
  }
}

XsdSizeArray* XsdSizeArray::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdSizeArray (*this, f, c);
}

XsdSizeArray::
~XsdSizeArray ()
{
}

bool
operator== (const XsdSizeArray& x, const XsdSizeArray& y)
{
  if (!(static_cast< const ::XsdSizeVector& > (x) ==
        static_cast< const ::XsdSizeVector& > (y)))
    return false;

  if (!(x.size () == y.size ()))
    return false;

  if (!(x.order () == y.order ()))
    return false;

  return true;
}

bool
operator!= (const XsdSizeArray& x, const XsdSizeArray& y)
{
  return !(x == y);
}

// XsdDoubleArrayResult
//

XsdDoubleArrayResult::
XsdDoubleArrayResult ()
: ::XsdResult (),
  value_ (::xml_schema::flags (), this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                      const value_type& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                      ::std::auto_ptr< value_type >& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const calculationID_type& calculationID,
                      const value_type& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const calculationID_type& calculationID,
                      ::std::auto_ptr< value_type >& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const XsdDoubleArrayResult& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::XsdResult (x, f, c),
  value_ (x.value_, f, this)
{
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (const xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::XsdResult (e, f | ::xml_schema::flags::base, c),
  value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdDoubleArrayResult::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::XsdResult::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (r);
        continue;
      }
    }

    break;
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

XsdDoubleArrayResult* XsdDoubleArrayResult::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdDoubleArrayResult (*this, f, c);
}

XsdDoubleArrayResult::
~XsdDoubleArrayResult ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_type_factory_init (
  "XsdDoubleArrayResult",
  "");

static
const ::xsd::cxx::tree::comparison_initializer< 0, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_comparison_init;

bool
operator== (const XsdDoubleArrayResult& x, const XsdDoubleArrayResult& y)
{
  if (!(static_cast< const ::XsdResult& > (x) ==
        static_cast< const ::XsdResult& > (y)))
    return false;

  if (!(x.value () == y.value ()))
    return false;

  return true;
}

bool
operator!= (const XsdDoubleArrayResult& x, const XsdDoubleArrayResult& y)
{
  return !(x == y);
}

// XsdIntegerArrayResult
//

XsdIntegerArrayResult::
XsdIntegerArrayResult ()
: ::XsdResult (),
  value_ (::xml_schema::flags (), this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                       const value_type& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                       ::std::auto_ptr< value_type >& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const calculationID_type& calculationID,
                       const value_type& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const calculationID_type& calculationID,
                       ::std::auto_ptr< value_type >& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const XsdIntegerArrayResult& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::XsdResult (x, f, c),
  value_ (x.value_, f, this)
{
}

XsdIntegerArrayResult::
XsdIntegerArrayResult (const xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::XsdResult (e, f | ::xml_schema::flags::base, c),
  value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdIntegerArrayResult::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::XsdResult::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (r);
        continue;
      }
    }

    break;
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

XsdIntegerArrayResult* XsdIntegerArrayResult::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdIntegerArrayResult (*this, f, c);
}

XsdIntegerArrayResult::
~XsdIntegerArrayResult ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_type_factory_init (
  "XsdIntegerArrayResult",
  "");

static
const ::xsd::cxx::tree::comparison_initializer< 0, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_comparison_init;

bool
operator== (const XsdIntegerArrayResult& x, const XsdIntegerArrayResult& y)
{
  if (!(static_cast< const ::XsdResult& > (x) ==
        static_cast< const ::XsdResult& > (y)))
    return false;

  if (!(x.value () == y.value ()))
    return false;

  return true;
}

bool
operator!= (const XsdIntegerArrayResult& x, const XsdIntegerArrayResult& y)
{
  return !(x == y);
}

// XsdSizeArrayResult
//

XsdSizeArrayResult::
XsdSizeArrayResult ()
: ::XsdResult (),
  value_ (::xml_schema::flags (), this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                    const value_type& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const ::XsdResult& _xsd_XsdResult_base,
                    ::std::auto_ptr< value_type >& value)
: ::XsdResult (_xsd_XsdResult_base),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const calculationID_type& calculationID,
                    const value_type& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const calculationID_type& calculationID,
                    ::std::auto_ptr< value_type >& value)
: ::XsdResult (calculationID),
  value_ (value, ::xml_schema::flags (), this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const XsdSizeArrayResult& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::XsdResult (x, f, c),
  value_ (x.value_, f, this)
{
}

XsdSizeArrayResult::
XsdSizeArrayResult (const xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::XsdResult (e, f | ::xml_schema::flags::base, c),
  value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdSizeArrayResult::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::XsdResult::parse (p, f);

  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // value
    //
    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< value_type > r (
        value_traits::create (i, f, this));

      if (!value_.present ())
      {
        this->value_.set (r);
        continue;
      }
    }

    break;
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "value",
      "");
  }
}

XsdSizeArrayResult* XsdSizeArrayResult::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdSizeArrayResult (*this, f, c);
}

XsdSizeArrayResult::
~XsdSizeArrayResult ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_type_factory_init (
  "XsdSizeArrayResult",
  "");

static
const ::xsd::cxx::tree::comparison_initializer< 0, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_comparison_init;

bool
operator== (const XsdSizeArrayResult& x, const XsdSizeArrayResult& y)
{
  if (!(static_cast< const ::XsdResult& > (x) ==
        static_cast< const ::XsdResult& > (y)))
    return false;

  if (!(x.value () == y.value ()))
    return false;

  return true;
}

bool
operator!= (const XsdSizeArrayResult& x, const XsdSizeArrayResult& y)
{
  return !(x == y);
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdDoubleArray& i)
{
  o << static_cast< const ::XsdDoubleVector& > (i);

  o << ::std::endl << "size: " << i.size ();
  o << ::std::endl << "order: " << i.order ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdIntegerArray& i)
{
  o << static_cast< const ::XsdIntegerVector& > (i);

  o << ::std::endl << "size: " << i.size ();
  o << ::std::endl << "order: " << i.order ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdSizeArray& i)
{
  o << static_cast< const ::XsdSizeVector& > (i);

  o << ::std::endl << "size: " << i.size ();
  o << ::std::endl << "order: " << i.order ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdDoubleArrayResult& i)
{
  o << static_cast< const ::XsdResult& > (i);

  o << ::std::endl << "value: " << i.value ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const XsdIntegerArrayResult& i)
{
  o << static_cast< const ::XsdResult& > (i);

  o << ::std::endl << "value: " << i.value ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_std_ostream_init;

::std::ostream&
operator<< (::std::ostream& o, const XsdSizeArrayResult& i)
{
  o << static_cast< const ::XsdResult& > (i);

  o << ::std::endl << "value: " << i.value ();
  return o;
}

static
const ::xsd::cxx::tree::std_ostream_initializer< 0, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_std_ostream_init;

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (xercesc::DOMElement& e, const XsdDoubleArray& i)
{
  e << static_cast< const ::XsdDoubleVector& > (i);

  // size
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "size",
        e));

    a << i.size ();
  }

  // order
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "order",
        e));

    a << i.order ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdIntegerArray& i)
{
  e << static_cast< const ::XsdIntegerVector& > (i);

  // size
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "size",
        e));

    a << i.size ();
  }

  // order
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "order",
        e));

    a << i.order ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdSizeArray& i)
{
  e << static_cast< const ::XsdSizeVector& > (i);

  // size
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "size",
        e));

    a << i.size ();
  }

  // order
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "order",
        e));

    a << i.order ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdDoubleArrayResult& i)
{
  e << static_cast< const ::XsdResult& > (i);

  // value
  //
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_type_serializer_init (
  "XsdDoubleArrayResult",
  "");


void
operator<< (xercesc::DOMElement& e, const XsdIntegerArrayResult& i)
{
  e << static_cast< const ::XsdResult& > (i);

  // value
  //
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_type_serializer_init (
  "XsdIntegerArrayResult",
  "");


void
operator<< (xercesc::DOMElement& e, const XsdSizeArrayResult& i)
{
  e << static_cast< const ::XsdResult& > (i);

  // value
  //
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "value",
        e));

    s << i.value ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_type_serializer_init (
  "XsdSizeArrayResult",
  "");


#include <xsd/cxx/tree/stream-extraction-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::stream_extraction_plate< 0, boost::archive::binary_iarchive, char >
  stream_extraction_plate_init_0;
}

XsdDoubleArray::
XsdDoubleArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::XsdDoubleVector (s, f, c),
  size_ (f, this),
  order_ (f, this)
{
  this->parse (s, f);
}

void XsdDoubleArray::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< size_type > r (new size_type (s, f, this));
    this->size_.set (r);
  }

  {
    ::std::auto_ptr< order_type > r (new order_type (s, f, this));
    this->order_.set (r);
  }
}

XsdIntegerArray::
XsdIntegerArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::XsdIntegerVector (s, f, c),
  size_ (f, this),
  order_ (f, this)
{
  this->parse (s, f);
}

void XsdIntegerArray::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< size_type > r (new size_type (s, f, this));
    this->size_.set (r);
  }

  {
    ::std::auto_ptr< order_type > r (new order_type (s, f, this));
    this->order_.set (r);
  }
}

XsdSizeArray::
XsdSizeArray (::xml_schema::istream< boost::archive::binary_iarchive >& s,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::XsdSizeVector (s, f, c),
  size_ (f, this),
  order_ (f, this)
{
  this->parse (s, f);
}

void XsdSizeArray::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< size_type > r (new size_type (s, f, this));
    this->size_.set (r);
  }

  {
    ::std::auto_ptr< order_type > r (new order_type (s, f, this));
    this->order_.set (r);
  }
}

XsdDoubleArrayResult::
XsdDoubleArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::XsdResult (s, f, c),
  value_ (f, this)
{
  this->parse (s, f);
}

void XsdDoubleArrayResult::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< value_type > r (new value_type (s, f, this));
    this->value_.set (r);
  }
}

static
const ::xsd::cxx::tree::stream_extraction_initializer< 0, boost::archive::binary_iarchive, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_stream_extraction_init_0 (
  "XsdDoubleArrayResult",
  "");

XsdIntegerArrayResult::
XsdIntegerArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::XsdResult (s, f, c),
  value_ (f, this)
{
  this->parse (s, f);
}

void XsdIntegerArrayResult::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< value_type > r (new value_type (s, f, this));
    this->value_.set (r);
  }
}

static
const ::xsd::cxx::tree::stream_extraction_initializer< 0, boost::archive::binary_iarchive, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_stream_extraction_init_0 (
  "XsdIntegerArrayResult",
  "");

XsdSizeArrayResult::
XsdSizeArrayResult (::xml_schema::istream< boost::archive::binary_iarchive >& s,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::XsdResult (s, f, c),
  value_ (f, this)
{
  this->parse (s, f);
}

void XsdSizeArrayResult::
parse (::xml_schema::istream< boost::archive::binary_iarchive >& s,
       ::xml_schema::flags f)
{
  {
    ::std::auto_ptr< value_type > r (new value_type (s, f, this));
    this->value_.set (r);
  }
}

static
const ::xsd::cxx::tree::stream_extraction_initializer< 0, boost::archive::binary_iarchive, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_stream_extraction_init_0 (
  "XsdSizeArrayResult",
  "");

#include <xsd/cxx/tree/stream-insertion-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::stream_insertion_plate< 0, boost::archive::binary_oarchive, char >
  stream_insertion_plate_init_0;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdDoubleArray& x)
{
  s << static_cast< const ::XsdDoubleVector& > (x);
  s << x.size ();
  s << x.order ();
  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdIntegerArray& x)
{
  s << static_cast< const ::XsdIntegerVector& > (x);
  s << x.size ();
  s << x.order ();
  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdSizeArray& x)
{
  s << static_cast< const ::XsdSizeVector& > (x);
  s << x.size ();
  s << x.order ();
  return s;
}

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdDoubleArrayResult& x)
{
  s << static_cast< const ::XsdResult& > (x);
  s << x.value ();
  return s;
}

static
const ::xsd::cxx::tree::stream_insertion_initializer< 0, boost::archive::binary_oarchive, char, XsdDoubleArrayResult >
_xsd_XsdDoubleArrayResult_stream_insertion_init_0 (
  "XsdDoubleArrayResult",
  "");

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdIntegerArrayResult& x)
{
  s << static_cast< const ::XsdResult& > (x);
  s << x.value ();
  return s;
}

static
const ::xsd::cxx::tree::stream_insertion_initializer< 0, boost::archive::binary_oarchive, char, XsdIntegerArrayResult >
_xsd_XsdIntegerArrayResult_stream_insertion_init_0 (
  "XsdIntegerArrayResult",
  "");

::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >&
operator<< (::xsd::cxx::tree::ostream< boost::archive::binary_oarchive >& s,
            const XsdSizeArrayResult& x)
{
  s << static_cast< const ::XsdResult& > (x);
  s << x.value ();
  return s;
}

static
const ::xsd::cxx::tree::stream_insertion_initializer< 0, boost::archive::binary_oarchive, char, XsdSizeArrayResult >
_xsd_XsdSizeArrayResult_stream_insertion_init_0 (
  "XsdSizeArrayResult",
  "");

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

