// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_OUTPUT_IXX
#define CXX___SCHEMA_XSD_CORE_OUTPUT_IXX

// Begin prologue.
//
//
// End prologue.

#include "result.ixx"

#include "input.ixx"

// XsdOutputDocument
// 

inline
const XsdOutputDocument::error_optional& XsdOutputDocument::
error () const
{
  return this->error_;
}

inline
XsdOutputDocument::error_optional& XsdOutputDocument::
error ()
{
  return this->error_;
}

inline
void XsdOutputDocument::
error (const error_type& x)
{
  this->error_.set (x);
}

inline
void XsdOutputDocument::
error (const error_optional& x)
{
  this->error_ = x;
}

inline
void XsdOutputDocument::
error (::std::auto_ptr< error_type > x)
{
  this->error_.set (x);
}

inline
const XsdOutputDocument::result_sequence& XsdOutputDocument::
result () const
{
  return this->result_;
}

inline
XsdOutputDocument::result_sequence& XsdOutputDocument::
result ()
{
  return this->result_;
}

inline
void XsdOutputDocument::
result (const result_sequence& s)
{
  this->result_ = s;
}

inline
const XsdOutputDocument::name_optional& XsdOutputDocument::
name () const
{
  return this->name_;
}

inline
XsdOutputDocument::name_optional& XsdOutputDocument::
name ()
{
  return this->name_;
}

inline
void XsdOutputDocument::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdOutputDocument::
name (const name_optional& x)
{
  this->name_ = x;
}

inline
void XsdOutputDocument::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

inline
const XsdOutputDocument::client_optional& XsdOutputDocument::
client () const
{
  return this->client_;
}

inline
XsdOutputDocument::client_optional& XsdOutputDocument::
client ()
{
  return this->client_;
}

inline
void XsdOutputDocument::
client (const client_type& x)
{
  this->client_.set (x);
}

inline
void XsdOutputDocument::
client (const client_optional& x)
{
  this->client_ = x;
}

inline
void XsdOutputDocument::
client (::std::auto_ptr< client_type > x)
{
  this->client_.set (x);
}

inline
const XsdOutputDocument::timeStamp_optional& XsdOutputDocument::
timeStamp () const
{
  return this->timeStamp_;
}

inline
XsdOutputDocument::timeStamp_optional& XsdOutputDocument::
timeStamp ()
{
  return this->timeStamp_;
}

inline
void XsdOutputDocument::
timeStamp (const timeStamp_type& x)
{
  this->timeStamp_.set (x);
}

inline
void XsdOutputDocument::
timeStamp (const timeStamp_optional& x)
{
  this->timeStamp_ = x;
}

inline
void XsdOutputDocument::
timeStamp (::std::auto_ptr< timeStamp_type > x)
{
  this->timeStamp_.set (x);
}

inline
const XsdOutputDocument::documentID_type& XsdOutputDocument::
documentID () const
{
  return this->documentID_.get ();
}

inline
XsdOutputDocument::documentID_type& XsdOutputDocument::
documentID ()
{
  return this->documentID_.get ();
}

inline
void XsdOutputDocument::
documentID (const documentID_type& x)
{
  this->documentID_.set (x);
}

inline
void XsdOutputDocument::
documentID (::std::auto_ptr< documentID_type > x)
{
  this->documentID_.set (x);
}


// XsdOutputError
// 

inline
const XsdOutputError::parse_optional& XsdOutputError::
parse () const
{
  return this->parse_;
}

inline
XsdOutputError::parse_optional& XsdOutputError::
parse ()
{
  return this->parse_;
}

inline
void XsdOutputError::
parse (const parse_type& x)
{
  this->parse_.set (x);
}

inline
void XsdOutputError::
parse (const parse_optional& x)
{
  this->parse_ = x;
}

inline
void XsdOutputError::
parse (::std::auto_ptr< parse_type > x)
{
  this->parse_.set (x);
}

inline
const XsdOutputError::validation_optional& XsdOutputError::
validation () const
{
  return this->validation_;
}

inline
XsdOutputError::validation_optional& XsdOutputError::
validation ()
{
  return this->validation_;
}

inline
void XsdOutputError::
validation (const validation_type& x)
{
  this->validation_.set (x);
}

inline
void XsdOutputError::
validation (const validation_optional& x)
{
  this->validation_ = x;
}

inline
void XsdOutputError::
validation (::std::auto_ptr< validation_type > x)
{
  this->validation_.set (x);
}


// XsdNodeError
// 

inline
const XsdNodeError::message_sequence& XsdNodeError::
message () const
{
  return this->message_;
}

inline
XsdNodeError::message_sequence& XsdNodeError::
message ()
{
  return this->message_;
}

inline
void XsdNodeError::
message (const message_sequence& s)
{
  this->message_ = s;
}

inline
const XsdNodeError::name_type& XsdNodeError::
name () const
{
  return this->name_.get ();
}

inline
XsdNodeError::name_type& XsdNodeError::
name ()
{
  return this->name_.get ();
}

inline
void XsdNodeError::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdNodeError::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

inline
const XsdNodeError::type_optional& XsdNodeError::
type () const
{
  return this->type_;
}

inline
XsdNodeError::type_optional& XsdNodeError::
type ()
{
  return this->type_;
}

inline
void XsdNodeError::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdNodeError::
type (const type_optional& x)
{
  this->type_ = x;
}

inline
void XsdNodeError::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}


// XsdSchemaError
// 

inline
const XsdSchemaError::uniqueID_optional& XsdSchemaError::
uniqueID () const
{
  return this->uniqueID_;
}

inline
XsdSchemaError::uniqueID_optional& XsdSchemaError::
uniqueID ()
{
  return this->uniqueID_;
}

inline
void XsdSchemaError::
uniqueID (const uniqueID_type& x)
{
  this->uniqueID_.set (x);
}

inline
void XsdSchemaError::
uniqueID (const uniqueID_optional& x)
{
  this->uniqueID_ = x;
}

inline
void XsdSchemaError::
uniqueID (::std::auto_ptr< uniqueID_type > x)
{
  this->uniqueID_.set (x);
}

inline
const XsdSchemaError::index_type& XsdSchemaError::
index () const
{
  return this->index_.get ();
}

inline
XsdSchemaError::index_type& XsdSchemaError::
index ()
{
  return this->index_.get ();
}

inline
void XsdSchemaError::
index (const index_type& x)
{
  this->index_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_OUTPUT_IXX
