// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_INPUT_IXX
#define CXX___SCHEMA_XSD_CORE_INPUT_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdInputDocument
// 

inline
const XsdInputDocument::schema_sequence& XsdInputDocument::
schema () const
{
  return this->schema_;
}

inline
XsdInputDocument::schema_sequence& XsdInputDocument::
schema ()
{
  return this->schema_;
}

inline
void XsdInputDocument::
schema (const schema_sequence& s)
{
  this->schema_ = s;
}

inline
const XsdInputDocument::rules_optional& XsdInputDocument::
rules () const
{
  return this->rules_;
}

inline
XsdInputDocument::rules_optional& XsdInputDocument::
rules ()
{
  return this->rules_;
}

inline
void XsdInputDocument::
rules (const rules_type& x)
{
  this->rules_.set (x);
}

inline
void XsdInputDocument::
rules (const rules_optional& x)
{
  this->rules_ = x;
}

inline
void XsdInputDocument::
rules (::std::auto_ptr< rules_type > x)
{
  this->rules_.set (x);
}

inline
const XsdInputDocument::name_optional& XsdInputDocument::
name () const
{
  return this->name_;
}

inline
XsdInputDocument::name_optional& XsdInputDocument::
name ()
{
  return this->name_;
}

inline
void XsdInputDocument::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdInputDocument::
name (const name_optional& x)
{
  this->name_ = x;
}

inline
void XsdInputDocument::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

inline
const XsdInputDocument::client_optional& XsdInputDocument::
client () const
{
  return this->client_;
}

inline
XsdInputDocument::client_optional& XsdInputDocument::
client ()
{
  return this->client_;
}

inline
void XsdInputDocument::
client (const client_type& x)
{
  this->client_.set (x);
}

inline
void XsdInputDocument::
client (const client_optional& x)
{
  this->client_ = x;
}

inline
void XsdInputDocument::
client (::std::auto_ptr< client_type > x)
{
  this->client_.set (x);
}

inline
const XsdInputDocument::timeStamp_optional& XsdInputDocument::
timeStamp () const
{
  return this->timeStamp_;
}

inline
XsdInputDocument::timeStamp_optional& XsdInputDocument::
timeStamp ()
{
  return this->timeStamp_;
}

inline
void XsdInputDocument::
timeStamp (const timeStamp_type& x)
{
  this->timeStamp_.set (x);
}

inline
void XsdInputDocument::
timeStamp (const timeStamp_optional& x)
{
  this->timeStamp_ = x;
}

inline
void XsdInputDocument::
timeStamp (::std::auto_ptr< timeStamp_type > x)
{
  this->timeStamp_.set (x);
}

inline
const XsdInputDocument::documentID_type& XsdInputDocument::
documentID () const
{
  return this->documentID_.get ();
}

inline
XsdInputDocument::documentID_type& XsdInputDocument::
documentID ()
{
  return this->documentID_.get ();
}

inline
void XsdInputDocument::
documentID (const documentID_type& x)
{
  this->documentID_.set (x);
}

inline
void XsdInputDocument::
documentID (::std::auto_ptr< documentID_type > x)
{
  this->documentID_.set (x);
}


// XsdInputRules
// 

inline
const XsdInputRules::resolveDependenciesAtInsertion_optional& XsdInputRules::
resolveDependenciesAtInsertion () const
{
  return this->resolveDependenciesAtInsertion_;
}

inline
XsdInputRules::resolveDependenciesAtInsertion_optional& XsdInputRules::
resolveDependenciesAtInsertion ()
{
  return this->resolveDependenciesAtInsertion_;
}

inline
void XsdInputRules::
resolveDependenciesAtInsertion (const resolveDependenciesAtInsertion_type& x)
{
  this->resolveDependenciesAtInsertion_.set (x);
}

inline
void XsdInputRules::
resolveDependenciesAtInsertion (const resolveDependenciesAtInsertion_optional& x)
{
  this->resolveDependenciesAtInsertion_ = x;
}

inline
XsdInputRules::resolveDependenciesAtInsertion_type XsdInputRules::
resolveDependenciesAtInsertion_default_value ()
{
  return resolveDependenciesAtInsertion_type (true);
}

inline
const XsdInputRules::allowUniqueIDOverwrite_optional& XsdInputRules::
allowUniqueIDOverwrite () const
{
  return this->allowUniqueIDOverwrite_;
}

inline
XsdInputRules::allowUniqueIDOverwrite_optional& XsdInputRules::
allowUniqueIDOverwrite ()
{
  return this->allowUniqueIDOverwrite_;
}

inline
void XsdInputRules::
allowUniqueIDOverwrite (const allowUniqueIDOverwrite_type& x)
{
  this->allowUniqueIDOverwrite_.set (x);
}

inline
void XsdInputRules::
allowUniqueIDOverwrite (const allowUniqueIDOverwrite_optional& x)
{
  this->allowUniqueIDOverwrite_ = x;
}

inline
const XsdInputRules::clearCacheAfterProcessing_optional& XsdInputRules::
clearCacheAfterProcessing () const
{
  return this->clearCacheAfterProcessing_;
}

inline
XsdInputRules::clearCacheAfterProcessing_optional& XsdInputRules::
clearCacheAfterProcessing ()
{
  return this->clearCacheAfterProcessing_;
}

inline
void XsdInputRules::
clearCacheAfterProcessing (const clearCacheAfterProcessing_type& x)
{
  this->clearCacheAfterProcessing_.set (x);
}

inline
void XsdInputRules::
clearCacheAfterProcessing (const clearCacheAfterProcessing_optional& x)
{
  this->clearCacheAfterProcessing_ = x;
}

inline
XsdInputRules::clearCacheAfterProcessing_type XsdInputRules::
clearCacheAfterProcessing_default_value ()
{
  return clearCacheAfterProcessing_type (true);
}

inline
const XsdInputRules::includeCallStackInErrorMessages_optional& XsdInputRules::
includeCallStackInErrorMessages () const
{
  return this->includeCallStackInErrorMessages_;
}

inline
XsdInputRules::includeCallStackInErrorMessages_optional& XsdInputRules::
includeCallStackInErrorMessages ()
{
  return this->includeCallStackInErrorMessages_;
}

inline
void XsdInputRules::
includeCallStackInErrorMessages (const includeCallStackInErrorMessages_type& x)
{
  this->includeCallStackInErrorMessages_.set (x);
}

inline
void XsdInputRules::
includeCallStackInErrorMessages (const includeCallStackInErrorMessages_optional& x)
{
  this->includeCallStackInErrorMessages_ = x;
}

inline
XsdInputRules::includeCallStackInErrorMessages_type XsdInputRules::
includeCallStackInErrorMessages_default_value ()
{
  return includeCallStackInErrorMessages_type (false);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_INPUT_IXX
