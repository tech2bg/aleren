// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_CORE_BOUNDS_IXX
#define CXX___SCHEMA_XSD_CORE_BOUNDS_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdDoubleBounds
// 

inline
const XsdDoubleBounds::lower_optional& XsdDoubleBounds::
lower () const
{
  return this->lower_;
}

inline
XsdDoubleBounds::lower_optional& XsdDoubleBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdDoubleBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdDoubleBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
const XsdDoubleBounds::upper_optional& XsdDoubleBounds::
upper () const
{
  return this->upper_;
}

inline
XsdDoubleBounds::upper_optional& XsdDoubleBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdDoubleBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdDoubleBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}


// XsdDateBounds
// 

inline
const XsdDateBounds::lower_optional& XsdDateBounds::
lower () const
{
  return this->lower_;
}

inline
XsdDateBounds::lower_optional& XsdDateBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdDateBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdDateBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdDateBounds::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdDateBounds::upper_optional& XsdDateBounds::
upper () const
{
  return this->upper_;
}

inline
XsdDateBounds::upper_optional& XsdDateBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdDateBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdDateBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdDateBounds::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdTimeBounds
// 

inline
const XsdTimeBounds::lower_optional& XsdTimeBounds::
lower () const
{
  return this->lower_;
}

inline
XsdTimeBounds::lower_optional& XsdTimeBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdTimeBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdTimeBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdTimeBounds::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdTimeBounds::upper_optional& XsdTimeBounds::
upper () const
{
  return this->upper_;
}

inline
XsdTimeBounds::upper_optional& XsdTimeBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdTimeBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdTimeBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdTimeBounds::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdTenorBounds
// 

inline
const XsdTenorBounds::lower_optional& XsdTenorBounds::
lower () const
{
  return this->lower_;
}

inline
XsdTenorBounds::lower_optional& XsdTenorBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdTenorBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdTenorBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdTenorBounds::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdTenorBounds::upper_optional& XsdTenorBounds::
upper () const
{
  return this->upper_;
}

inline
XsdTenorBounds::upper_optional& XsdTenorBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdTenorBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdTenorBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdTenorBounds::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdIntegerBounds
// 

inline
const XsdIntegerBounds::lower_optional& XsdIntegerBounds::
lower () const
{
  return this->lower_;
}

inline
XsdIntegerBounds::lower_optional& XsdIntegerBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdIntegerBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdIntegerBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
const XsdIntegerBounds::upper_optional& XsdIntegerBounds::
upper () const
{
  return this->upper_;
}

inline
XsdIntegerBounds::upper_optional& XsdIntegerBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdIntegerBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdIntegerBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}


// XsdSizeBounds
// 

inline
const XsdSizeBounds::lower_optional& XsdSizeBounds::
lower () const
{
  return this->lower_;
}

inline
XsdSizeBounds::lower_optional& XsdSizeBounds::
lower ()
{
  return this->lower_;
}

inline
void XsdSizeBounds::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdSizeBounds::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
const XsdSizeBounds::upper_optional& XsdSizeBounds::
upper () const
{
  return this->upper_;
}

inline
XsdSizeBounds::upper_optional& XsdSizeBounds::
upper ()
{
  return this->upper_;
}

inline
void XsdSizeBounds::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdSizeBounds::
upper (const upper_optional& x)
{
  this->upper_ = x;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_CORE_BOUNDS_IXX
