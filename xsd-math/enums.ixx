// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_ENUMS_IXX
#define CXX___SCHEMA_XSD_MATH_ENUMS_IXX

// Begin prologue.
//
//
// End prologue.

#include "../xsd-core/enums.ixx"

// XsdAggregateType
// 

inline
XsdAggregateType::
XsdAggregateType ()
: ::xml_schema::string ()
{
}

inline
XsdAggregateType::
XsdAggregateType (value v)
: ::xml_schema::string (_xsd_XsdAggregateType_literals_[v])
{
}

inline
XsdAggregateType::
XsdAggregateType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdAggregateType::
XsdAggregateType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAggregateType::
XsdAggregateType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAggregateType::
XsdAggregateType (const XsdAggregateType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdAggregateType& XsdAggregateType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdAggregateType_literals_[v]);

  return *this;
}


// XsdAmericanAnalyticType
// 

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType ()
: ::xml_schema::string ()
{
}

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType (value v)
: ::xml_schema::string (_xsd_XsdAmericanAnalyticType_literals_[v])
{
}

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAmericanAnalyticType::
XsdAmericanAnalyticType (const XsdAmericanAnalyticType& v,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdAmericanAnalyticType& XsdAmericanAnalyticType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdAmericanAnalyticType_literals_[v]);

  return *this;
}


// XsdAverageType
// 

inline
XsdAverageType::
XsdAverageType ()
: ::xml_schema::string ()
{
}

inline
XsdAverageType::
XsdAverageType (value v)
: ::xml_schema::string (_xsd_XsdAverageType_literals_[v])
{
}

inline
XsdAverageType::
XsdAverageType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdAverageType::
XsdAverageType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAverageType::
XsdAverageType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdAverageType::
XsdAverageType (const XsdAverageType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdAverageType& XsdAverageType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdAverageType_literals_[v]);

  return *this;
}


// XsdBinomialType
// 

inline
XsdBinomialType::
XsdBinomialType ()
: ::xml_schema::string ()
{
}

inline
XsdBinomialType::
XsdBinomialType (value v)
: ::xml_schema::string (_xsd_XsdBinomialType_literals_[v])
{
}

inline
XsdBinomialType::
XsdBinomialType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdBinomialType::
XsdBinomialType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdBinomialType::
XsdBinomialType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdBinomialType::
XsdBinomialType (const XsdBinomialType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdBinomialType& XsdBinomialType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdBinomialType_literals_[v]);

  return *this;
}


// XsdConjugateGradientType
// 

inline
XsdConjugateGradientType::
XsdConjugateGradientType ()
: ::xml_schema::string ()
{
}

inline
XsdConjugateGradientType::
XsdConjugateGradientType (value v)
: ::xml_schema::string (_xsd_XsdConjugateGradientType_literals_[v])
{
}

inline
XsdConjugateGradientType::
XsdConjugateGradientType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdConjugateGradientType::
XsdConjugateGradientType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdConjugateGradientType::
XsdConjugateGradientType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdConjugateGradientType::
XsdConjugateGradientType (const XsdConjugateGradientType& v,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdConjugateGradientType& XsdConjugateGradientType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdConjugateGradientType_literals_[v]);

  return *this;
}


// XsdCopulaType
// 

inline
XsdCopulaType::
XsdCopulaType ()
: ::xml_schema::string ()
{
}

inline
XsdCopulaType::
XsdCopulaType (value v)
: ::xml_schema::string (_xsd_XsdCopulaType_literals_[v])
{
}

inline
XsdCopulaType::
XsdCopulaType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCopulaType::
XsdCopulaType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCopulaType::
XsdCopulaType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCopulaType::
XsdCopulaType (const XsdCopulaType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCopulaType& XsdCopulaType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCopulaType_literals_[v]);

  return *this;
}


// XsdCorrelationType
// 

inline
XsdCorrelationType::
XsdCorrelationType ()
: ::xml_schema::string ()
{
}

inline
XsdCorrelationType::
XsdCorrelationType (value v)
: ::xml_schema::string (_xsd_XsdCorrelationType_literals_[v])
{
}

inline
XsdCorrelationType::
XsdCorrelationType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCorrelationType::
XsdCorrelationType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCorrelationType::
XsdCorrelationType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCorrelationType::
XsdCorrelationType (const XsdCorrelationType& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCorrelationType& XsdCorrelationType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCorrelationType_literals_[v]);

  return *this;
}


// XsdCubicBoundaryType
// 

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType ()
: ::xml_schema::string ()
{
}

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType (value v)
: ::xml_schema::string (_xsd_XsdCubicBoundaryType_literals_[v])
{
}

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicBoundaryType::
XsdCubicBoundaryType (const XsdCubicBoundaryType& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCubicBoundaryType& XsdCubicBoundaryType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCubicBoundaryType_literals_[v]);

  return *this;
}


// XsdCubicDerivativeType
// 

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType ()
: ::xml_schema::string ()
{
}

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType (value v)
: ::xml_schema::string (_xsd_XsdCubicDerivativeType_literals_[v])
{
}

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCubicDerivativeType::
XsdCubicDerivativeType (const XsdCubicDerivativeType& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCubicDerivativeType& XsdCubicDerivativeType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCubicDerivativeType_literals_[v]);

  return *this;
}


// XsdDifferenceType
// 

inline
XsdDifferenceType::
XsdDifferenceType ()
: ::xml_schema::string ()
{
}

inline
XsdDifferenceType::
XsdDifferenceType (value v)
: ::xml_schema::string (_xsd_XsdDifferenceType_literals_[v])
{
}

inline
XsdDifferenceType::
XsdDifferenceType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDifferenceType::
XsdDifferenceType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDifferenceType::
XsdDifferenceType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDifferenceType::
XsdDifferenceType (const XsdDifferenceType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDifferenceType& XsdDifferenceType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDifferenceType_literals_[v]);

  return *this;
}


// XsdDistributionType
// 

inline
XsdDistributionType::
XsdDistributionType ()
: ::xml_schema::string ()
{
}

inline
XsdDistributionType::
XsdDistributionType (value v)
: ::xml_schema::string (_xsd_XsdDistributionType_literals_[v])
{
}

inline
XsdDistributionType::
XsdDistributionType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDistributionType::
XsdDistributionType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDistributionType::
XsdDistributionType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDistributionType::
XsdDistributionType (const XsdDistributionType& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDistributionType& XsdDistributionType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDistributionType_literals_[v]);

  return *this;
}


// XsdEndpointType
// 

inline
XsdEndpointType::
XsdEndpointType ()
: ::xml_schema::string ()
{
}

inline
XsdEndpointType::
XsdEndpointType (value v)
: ::xml_schema::string (_xsd_XsdEndpointType_literals_[v])
{
}

inline
XsdEndpointType::
XsdEndpointType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdEndpointType::
XsdEndpointType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdEndpointType::
XsdEndpointType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdEndpointType::
XsdEndpointType (const XsdEndpointType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdEndpointType& XsdEndpointType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdEndpointType_literals_[v]);

  return *this;
}


// XsdErrorType
// 

inline
XsdErrorType::
XsdErrorType ()
: ::xml_schema::string ()
{
}

inline
XsdErrorType::
XsdErrorType (value v)
: ::xml_schema::string (_xsd_XsdErrorType_literals_[v])
{
}

inline
XsdErrorType::
XsdErrorType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdErrorType::
XsdErrorType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdErrorType::
XsdErrorType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdErrorType::
XsdErrorType (const XsdErrorType& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdErrorType& XsdErrorType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdErrorType_literals_[v]);

  return *this;
}


// XsdEvolveType
// 

inline
XsdEvolveType::
XsdEvolveType ()
: ::xml_schema::string ()
{
}

inline
XsdEvolveType::
XsdEvolveType (value v)
: ::xml_schema::string (_xsd_XsdEvolveType_literals_[v])
{
}

inline
XsdEvolveType::
XsdEvolveType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdEvolveType::
XsdEvolveType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdEvolveType::
XsdEvolveType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdEvolveType::
XsdEvolveType (const XsdEvolveType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdEvolveType& XsdEvolveType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdEvolveType_literals_[v]);

  return *this;
}


// XsdExtrapolate
// 

inline
XsdExtrapolate::
XsdExtrapolate ()
: ::xml_schema::string ()
{
}

inline
XsdExtrapolate::
XsdExtrapolate (value v)
: ::xml_schema::string (_xsd_XsdExtrapolate_literals_[v])
{
}

inline
XsdExtrapolate::
XsdExtrapolate (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdExtrapolate::
XsdExtrapolate (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExtrapolate::
XsdExtrapolate (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExtrapolate::
XsdExtrapolate (const XsdExtrapolate& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdExtrapolate& XsdExtrapolate::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdExtrapolate_literals_[v]);

  return *this;
}


// XsdFdmScheme
// 

inline
XsdFdmScheme::
XsdFdmScheme ()
: ::xml_schema::string ()
{
}

inline
XsdFdmScheme::
XsdFdmScheme (value v)
: ::xml_schema::string (_xsd_XsdFdmScheme_literals_[v])
{
}

inline
XsdFdmScheme::
XsdFdmScheme (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdFdmScheme::
XsdFdmScheme (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdFdmScheme::
XsdFdmScheme (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdFdmScheme::
XsdFdmScheme (const XsdFdmScheme& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdFdmScheme& XsdFdmScheme::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdFdmScheme_literals_[v]);

  return *this;
}


// XsdGammaRngType
// 

inline
XsdGammaRngType::
XsdGammaRngType ()
: ::xml_schema::string ()
{
}

inline
XsdGammaRngType::
XsdGammaRngType (value v)
: ::xml_schema::string (_xsd_XsdGammaRngType_literals_[v])
{
}

inline
XsdGammaRngType::
XsdGammaRngType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdGammaRngType::
XsdGammaRngType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGammaRngType::
XsdGammaRngType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGammaRngType::
XsdGammaRngType (const XsdGammaRngType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdGammaRngType& XsdGammaRngType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdGammaRngType_literals_[v]);

  return *this;
}


// XsdGradientRoot1DType
// 

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType ()
: ::xml_schema::string ()
{
}

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType (value v)
: ::xml_schema::string (_xsd_XsdGradientRoot1DType_literals_[v])
{
}

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGradientRoot1DType::
XsdGradientRoot1DType (const XsdGradientRoot1DType& v,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdGradientRoot1DType& XsdGradientRoot1DType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdGradientRoot1DType_literals_[v]);

  return *this;
}


// XsdMomentType
// 

inline
XsdMomentType::
XsdMomentType ()
: ::xml_schema::string ()
{
}

inline
XsdMomentType::
XsdMomentType (value v)
: ::xml_schema::string (_xsd_XsdMomentType_literals_[v])
{
}

inline
XsdMomentType::
XsdMomentType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMomentType::
XsdMomentType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMomentType::
XsdMomentType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMomentType::
XsdMomentType (const XsdMomentType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMomentType& XsdMomentType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMomentType_literals_[v]);

  return *this;
}


// XsdPdeTimeScheme
// 

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme ()
: ::xml_schema::string ()
{
}

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme (value v)
: ::xml_schema::string (_xsd_XsdPdeTimeScheme_literals_[v])
{
}

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPdeTimeScheme::
XsdPdeTimeScheme (const XsdPdeTimeScheme& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdPdeTimeScheme& XsdPdeTimeScheme::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdPdeTimeScheme_literals_[v]);

  return *this;
}


// XsdGaussKronrodRule
// 

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule ()
: ::xml_schema::string ()
{
}

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule (value v)
: ::xml_schema::string (_xsd_XsdGaussKronrodRule_literals_[v])
{
}

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdGaussKronrodRule::
XsdGaussKronrodRule (const XsdGaussKronrodRule& v,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdGaussKronrodRule& XsdGaussKronrodRule::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdGaussKronrodRule_literals_[v]);

  return *this;
}


// XsdMinLinearBasis
// 

inline
XsdMinLinearBasis::
XsdMinLinearBasis ()
: ::xml_schema::string ()
{
}

inline
XsdMinLinearBasis::
XsdMinLinearBasis (value v)
: ::xml_schema::string (_xsd_XsdMinLinearBasis_literals_[v])
{
}

inline
XsdMinLinearBasis::
XsdMinLinearBasis (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearBasis::
XsdMinLinearBasis (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearBasis::
XsdMinLinearBasis (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearBasis::
XsdMinLinearBasis (const XsdMinLinearBasis& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMinLinearBasis& XsdMinLinearBasis::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMinLinearBasis_literals_[v]);

  return *this;
}


// XsdMinLinearMethod
// 

inline
XsdMinLinearMethod::
XsdMinLinearMethod ()
: ::xml_schema::string ()
{
}

inline
XsdMinLinearMethod::
XsdMinLinearMethod (value v)
: ::xml_schema::string (_xsd_XsdMinLinearMethod_literals_[v])
{
}

inline
XsdMinLinearMethod::
XsdMinLinearMethod (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearMethod::
XsdMinLinearMethod (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearMethod::
XsdMinLinearMethod (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearMethod::
XsdMinLinearMethod (const XsdMinLinearMethod& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMinLinearMethod& XsdMinLinearMethod::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMinLinearMethod_literals_[v]);

  return *this;
}


// XsdMinLinearScale
// 

inline
XsdMinLinearScale::
XsdMinLinearScale ()
: ::xml_schema::string ()
{
}

inline
XsdMinLinearScale::
XsdMinLinearScale (value v)
: ::xml_schema::string (_xsd_XsdMinLinearScale_literals_[v])
{
}

inline
XsdMinLinearScale::
XsdMinLinearScale (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearScale::
XsdMinLinearScale (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearScale::
XsdMinLinearScale (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMinLinearScale::
XsdMinLinearScale (const XsdMinLinearScale& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMinLinearScale& XsdMinLinearScale::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMinLinearScale_literals_[v]);

  return *this;
}


// XsdMonteCarloRule
// 

inline
XsdMonteCarloRule::
XsdMonteCarloRule ()
: ::xml_schema::string ()
{
}

inline
XsdMonteCarloRule::
XsdMonteCarloRule (value v)
: ::xml_schema::string (_xsd_XsdMonteCarloRule_literals_[v])
{
}

inline
XsdMonteCarloRule::
XsdMonteCarloRule (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMonteCarloRule::
XsdMonteCarloRule (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMonteCarloRule::
XsdMonteCarloRule (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMonteCarloRule::
XsdMonteCarloRule (const XsdMonteCarloRule& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMonteCarloRule& XsdMonteCarloRule::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMonteCarloRule_literals_[v]);

  return *this;
}


// XsdMultiRootType
// 

inline
XsdMultiRootType::
XsdMultiRootType ()
: ::xml_schema::string ()
{
}

inline
XsdMultiRootType::
XsdMultiRootType (value v)
: ::xml_schema::string (_xsd_XsdMultiRootType_literals_[v])
{
}

inline
XsdMultiRootType::
XsdMultiRootType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdMultiRootType::
XsdMultiRootType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMultiRootType::
XsdMultiRootType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdMultiRootType::
XsdMultiRootType (const XsdMultiRootType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdMultiRootType& XsdMultiRootType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdMultiRootType_literals_[v]);

  return *this;
}


// XsdNormalRngType
// 

inline
XsdNormalRngType::
XsdNormalRngType ()
: ::xml_schema::string ()
{
}

inline
XsdNormalRngType::
XsdNormalRngType (value v)
: ::xml_schema::string (_xsd_XsdNormalRngType_literals_[v])
{
}

inline
XsdNormalRngType::
XsdNormalRngType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdNormalRngType::
XsdNormalRngType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdNormalRngType::
XsdNormalRngType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdNormalRngType::
XsdNormalRngType (const XsdNormalRngType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdNormalRngType& XsdNormalRngType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdNormalRngType_literals_[v]);

  return *this;
}


// XsdOdeSolverType
// 

inline
XsdOdeSolverType::
XsdOdeSolverType ()
: ::xml_schema::string ()
{
}

inline
XsdOdeSolverType::
XsdOdeSolverType (value v)
: ::xml_schema::string (_xsd_XsdOdeSolverType_literals_[v])
{
}

inline
XsdOdeSolverType::
XsdOdeSolverType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdOdeSolverType::
XsdOdeSolverType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdOdeSolverType::
XsdOdeSolverType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdOdeSolverType::
XsdOdeSolverType (const XsdOdeSolverType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdOdeSolverType& XsdOdeSolverType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdOdeSolverType_literals_[v]);

  return *this;
}


// XsdPathScheme
// 

inline
XsdPathScheme::
XsdPathScheme ()
: ::xml_schema::string ()
{
}

inline
XsdPathScheme::
XsdPathScheme (value v)
: ::xml_schema::string (_xsd_XsdPathScheme_literals_[v])
{
}

inline
XsdPathScheme::
XsdPathScheme (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdPathScheme::
XsdPathScheme (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPathScheme::
XsdPathScheme (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdPathScheme::
XsdPathScheme (const XsdPathScheme& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdPathScheme& XsdPathScheme::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdPathScheme_literals_[v]);

  return *this;
}


// XsdRandomType
// 

inline
XsdRandomType::
XsdRandomType ()
: ::xml_schema::string ()
{
}

inline
XsdRandomType::
XsdRandomType (value v)
: ::xml_schema::string (_xsd_XsdRandomType_literals_[v])
{
}

inline
XsdRandomType::
XsdRandomType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRandomType::
XsdRandomType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRandomType::
XsdRandomType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRandomType::
XsdRandomType (const XsdRandomType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRandomType& XsdRandomType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRandomType_literals_[v]);

  return *this;
}


// XsdSalvageType
// 

inline
XsdSalvageType::
XsdSalvageType ()
: ::xml_schema::string ()
{
}

inline
XsdSalvageType::
XsdSalvageType (value v)
: ::xml_schema::string (_xsd_XsdSalvageType_literals_[v])
{
}

inline
XsdSalvageType::
XsdSalvageType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSalvageType::
XsdSalvageType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSalvageType::
XsdSalvageType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSalvageType::
XsdSalvageType (const XsdSalvageType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSalvageType& XsdSalvageType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSalvageType_literals_[v]);

  return *this;
}


// XsdRoundType
// 

inline
XsdRoundType::
XsdRoundType ()
: ::xml_schema::string ()
{
}

inline
XsdRoundType::
XsdRoundType (value v)
: ::xml_schema::string (_xsd_XsdRoundType_literals_[v])
{
}

inline
XsdRoundType::
XsdRoundType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRoundType::
XsdRoundType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRoundType::
XsdRoundType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRoundType::
XsdRoundType (const XsdRoundType& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRoundType& XsdRoundType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRoundType_literals_[v]);

  return *this;
}


// XsdSingularValueType
// 

inline
XsdSingularValueType::
XsdSingularValueType ()
: ::xml_schema::string ()
{
}

inline
XsdSingularValueType::
XsdSingularValueType (value v)
: ::xml_schema::string (_xsd_XsdSingularValueType_literals_[v])
{
}

inline
XsdSingularValueType::
XsdSingularValueType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSingularValueType::
XsdSingularValueType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSingularValueType::
XsdSingularValueType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSingularValueType::
XsdSingularValueType (const XsdSingularValueType& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSingularValueType& XsdSingularValueType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSingularValueType_literals_[v]);

  return *this;
}


// XsdSobolDirectionIntegers
// 

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers ()
: ::xml_schema::string ()
{
}

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers (value v)
: ::xml_schema::string (_xsd_XsdSobolDirectionIntegers_literals_[v])
{
}

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSobolDirectionIntegers::
XsdSobolDirectionIntegers (const XsdSobolDirectionIntegers& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSobolDirectionIntegers& XsdSobolDirectionIntegers::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSobolDirectionIntegers_literals_[v]);

  return *this;
}


// XsdSolverType
// 

inline
XsdSolverType::
XsdSolverType ()
: ::xml_schema::string ()
{
}

inline
XsdSolverType::
XsdSolverType (value v)
: ::xml_schema::string (_xsd_XsdSolverType_literals_[v])
{
}

inline
XsdSolverType::
XsdSolverType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdSolverType::
XsdSolverType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSolverType::
XsdSolverType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdSolverType::
XsdSolverType (const XsdSolverType& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdSolverType& XsdSolverType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdSolverType_literals_[v]);

  return *this;
}


// XsdValueRoot1DType
// 

inline
XsdValueRoot1DType::
XsdValueRoot1DType ()
: ::xml_schema::string ()
{
}

inline
XsdValueRoot1DType::
XsdValueRoot1DType (value v)
: ::xml_schema::string (_xsd_XsdValueRoot1DType_literals_[v])
{
}

inline
XsdValueRoot1DType::
XsdValueRoot1DType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdValueRoot1DType::
XsdValueRoot1DType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdValueRoot1DType::
XsdValueRoot1DType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdValueRoot1DType::
XsdValueRoot1DType (const XsdValueRoot1DType& v,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdValueRoot1DType& XsdValueRoot1DType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdValueRoot1DType_literals_[v]);

  return *this;
}


// XsdWaveletType
// 

inline
XsdWaveletType::
XsdWaveletType ()
: ::xml_schema::string ()
{
}

inline
XsdWaveletType::
XsdWaveletType (value v)
: ::xml_schema::string (_xsd_XsdWaveletType_literals_[v])
{
}

inline
XsdWaveletType::
XsdWaveletType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdWaveletType::
XsdWaveletType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdWaveletType::
XsdWaveletType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdWaveletType::
XsdWaveletType (const XsdWaveletType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdWaveletType& XsdWaveletType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdWaveletType_literals_[v]);

  return *this;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_ENUMS_IXX
