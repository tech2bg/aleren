// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_PARAMETERS_IXX
#define CXX___SCHEMA_XSD_MATH_PARAMETERS_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

#include "functional.ixx"

#include "random.ixx"

#include "root.ixx"

#include "minimize.ixx"

#include "quadrature.ixx"

#include "interpolation.ixx"

#include "transform.ixx"

// XsdParameters
// 

inline
const XsdParameters::derivative_optional& XsdParameters::
derivative () const
{
  return this->derivative_;
}

inline
XsdParameters::derivative_optional& XsdParameters::
derivative ()
{
  return this->derivative_;
}

inline
void XsdParameters::
derivative (const derivative_type& x)
{
  this->derivative_.set (x);
}

inline
void XsdParameters::
derivative (const derivative_optional& x)
{
  this->derivative_ = x;
}

inline
void XsdParameters::
derivative (::std::auto_ptr< derivative_type > x)
{
  this->derivative_.set (x);
}

inline
const XsdParameters::interpolate_optional& XsdParameters::
interpolate () const
{
  return this->interpolate_;
}

inline
XsdParameters::interpolate_optional& XsdParameters::
interpolate ()
{
  return this->interpolate_;
}

inline
void XsdParameters::
interpolate (const interpolate_type& x)
{
  this->interpolate_.set (x);
}

inline
void XsdParameters::
interpolate (const interpolate_optional& x)
{
  this->interpolate_ = x;
}

inline
void XsdParameters::
interpolate (::std::auto_ptr< interpolate_type > x)
{
  this->interpolate_.set (x);
}

inline
const XsdParameters::minimize_optional& XsdParameters::
minimize () const
{
  return this->minimize_;
}

inline
XsdParameters::minimize_optional& XsdParameters::
minimize ()
{
  return this->minimize_;
}

inline
void XsdParameters::
minimize (const minimize_type& x)
{
  this->minimize_.set (x);
}

inline
void XsdParameters::
minimize (const minimize_optional& x)
{
  this->minimize_ = x;
}

inline
void XsdParameters::
minimize (::std::auto_ptr< minimize_type > x)
{
  this->minimize_.set (x);
}

inline
const XsdParameters::path_optional& XsdParameters::
path () const
{
  return this->path_;
}

inline
XsdParameters::path_optional& XsdParameters::
path ()
{
  return this->path_;
}

inline
void XsdParameters::
path (const path_type& x)
{
  this->path_.set (x);
}

inline
void XsdParameters::
path (const path_optional& x)
{
  this->path_ = x;
}

inline
void XsdParameters::
path (::std::auto_ptr< path_type > x)
{
  this->path_.set (x);
}

inline
const XsdParameters::quadrature_optional& XsdParameters::
quadrature () const
{
  return this->quadrature_;
}

inline
XsdParameters::quadrature_optional& XsdParameters::
quadrature ()
{
  return this->quadrature_;
}

inline
void XsdParameters::
quadrature (const quadrature_type& x)
{
  this->quadrature_.set (x);
}

inline
void XsdParameters::
quadrature (const quadrature_optional& x)
{
  this->quadrature_ = x;
}

inline
void XsdParameters::
quadrature (::std::auto_ptr< quadrature_type > x)
{
  this->quadrature_.set (x);
}

inline
const XsdParameters::random_optional& XsdParameters::
random () const
{
  return this->random_;
}

inline
XsdParameters::random_optional& XsdParameters::
random ()
{
  return this->random_;
}

inline
void XsdParameters::
random (const random_type& x)
{
  this->random_.set (x);
}

inline
void XsdParameters::
random (const random_optional& x)
{
  this->random_ = x;
}

inline
void XsdParameters::
random (::std::auto_ptr< random_type > x)
{
  this->random_.set (x);
}

inline
const XsdParameters::root_optional& XsdParameters::
root () const
{
  return this->root_;
}

inline
XsdParameters::root_optional& XsdParameters::
root ()
{
  return this->root_;
}

inline
void XsdParameters::
root (const root_type& x)
{
  this->root_.set (x);
}

inline
void XsdParameters::
root (const root_optional& x)
{
  this->root_ = x;
}

inline
void XsdParameters::
root (::std::auto_ptr< root_type > x)
{
  this->root_.set (x);
}

inline
const XsdParameters::transform_optional& XsdParameters::
transform () const
{
  return this->transform_;
}

inline
XsdParameters::transform_optional& XsdParameters::
transform ()
{
  return this->transform_;
}

inline
void XsdParameters::
transform (const transform_type& x)
{
  this->transform_.set (x);
}

inline
void XsdParameters::
transform (const transform_optional& x)
{
  this->transform_ = x;
}

inline
void XsdParameters::
transform (::std::auto_ptr< transform_type > x)
{
  this->transform_.set (x);
}


// XsdPathParams
// 

inline
const XsdPathParams::discretization_optional& XsdPathParams::
discretization () const
{
  return this->discretization_;
}

inline
XsdPathParams::discretization_optional& XsdPathParams::
discretization ()
{
  return this->discretization_;
}

inline
void XsdPathParams::
discretization (const discretization_type& x)
{
  this->discretization_.set (x);
}

inline
void XsdPathParams::
discretization (const discretization_optional& x)
{
  this->discretization_ = x;
}

inline
void XsdPathParams::
discretization (::std::auto_ptr< discretization_type > x)
{
  this->discretization_.set (x);
}

inline
const XsdPathParams::discretization_type& XsdPathParams::
discretization_default_value ()
{
  return discretization_default_value_;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_PARAMETERS_IXX
