// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_DISTRIBUTION_1D_IXX
#define CXX___SCHEMA_XSD_MATH_DISTRIBUTION_1D_IXX

// Begin prologue.
//
//
// End prologue.

#include "distribution.ixx"

// XsdDistribution1D
// 


// XsdLocationScaleDistribution1D
// 

inline
const XsdLocationScaleDistribution1D::location_optional& XsdLocationScaleDistribution1D::
location () const
{
  return this->location_;
}

inline
XsdLocationScaleDistribution1D::location_optional& XsdLocationScaleDistribution1D::
location ()
{
  return this->location_;
}

inline
void XsdLocationScaleDistribution1D::
location (const location_type& x)
{
  this->location_.set (x);
}

inline
void XsdLocationScaleDistribution1D::
location (const location_optional& x)
{
  this->location_ = x;
}

inline
void XsdLocationScaleDistribution1D::
location (::std::auto_ptr< location_type > x)
{
  this->location_.set (x);
}

inline
const XsdLocationScaleDistribution1D::scale_optional& XsdLocationScaleDistribution1D::
scale () const
{
  return this->scale_;
}

inline
XsdLocationScaleDistribution1D::scale_optional& XsdLocationScaleDistribution1D::
scale ()
{
  return this->scale_;
}

inline
void XsdLocationScaleDistribution1D::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

inline
void XsdLocationScaleDistribution1D::
scale (const scale_optional& x)
{
  this->scale_ = x;
}

inline
void XsdLocationScaleDistribution1D::
scale (::std::auto_ptr< scale_type > x)
{
  this->scale_.set (x);
}


// XsdShapeScaleDistribution1D
// 

inline
const XsdShapeScaleDistribution1D::shape_optional& XsdShapeScaleDistribution1D::
shape () const
{
  return this->shape_;
}

inline
XsdShapeScaleDistribution1D::shape_optional& XsdShapeScaleDistribution1D::
shape ()
{
  return this->shape_;
}

inline
void XsdShapeScaleDistribution1D::
shape (const shape_type& x)
{
  this->shape_.set (x);
}

inline
void XsdShapeScaleDistribution1D::
shape (const shape_optional& x)
{
  this->shape_ = x;
}

inline
void XsdShapeScaleDistribution1D::
shape (::std::auto_ptr< shape_type > x)
{
  this->shape_.set (x);
}

inline
XsdShapeScaleDistribution1D::shape_type XsdShapeScaleDistribution1D::
shape_default_value ()
{
  return shape_type (1.0);
}

inline
const XsdShapeScaleDistribution1D::scale_optional& XsdShapeScaleDistribution1D::
scale () const
{
  return this->scale_;
}

inline
XsdShapeScaleDistribution1D::scale_optional& XsdShapeScaleDistribution1D::
scale ()
{
  return this->scale_;
}

inline
void XsdShapeScaleDistribution1D::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

inline
void XsdShapeScaleDistribution1D::
scale (const scale_optional& x)
{
  this->scale_ = x;
}

inline
XsdShapeScaleDistribution1D::scale_type XsdShapeScaleDistribution1D::
scale_default_value ()
{
  return scale_type (1.0);
}


// XsdBernoulliDistribution1D
// 

inline
const XsdBernoulliDistribution1D::probability_optional& XsdBernoulliDistribution1D::
probability () const
{
  return this->probability_;
}

inline
XsdBernoulliDistribution1D::probability_optional& XsdBernoulliDistribution1D::
probability ()
{
  return this->probability_;
}

inline
void XsdBernoulliDistribution1D::
probability (const probability_type& x)
{
  this->probability_.set (x);
}

inline
void XsdBernoulliDistribution1D::
probability (const probability_optional& x)
{
  this->probability_ = x;
}

inline
void XsdBernoulliDistribution1D::
probability (::std::auto_ptr< probability_type > x)
{
  this->probability_.set (x);
}


// XsdBetaDistribution1D
// 

inline
const XsdBetaDistribution1D::AB_optional& XsdBetaDistribution1D::
AB () const
{
  return this->AB_;
}

inline
XsdBetaDistribution1D::AB_optional& XsdBetaDistribution1D::
AB ()
{
  return this->AB_;
}

inline
void XsdBetaDistribution1D::
AB (const AB_type& x)
{
  this->AB_.set (x);
}

inline
void XsdBetaDistribution1D::
AB (const AB_optional& x)
{
  this->AB_ = x;
}

inline
void XsdBetaDistribution1D::
AB (::std::auto_ptr< AB_type > x)
{
  this->AB_.set (x);
}

inline
const XsdBetaDistribution1D::MV_optional& XsdBetaDistribution1D::
MV () const
{
  return this->MV_;
}

inline
XsdBetaDistribution1D::MV_optional& XsdBetaDistribution1D::
MV ()
{
  return this->MV_;
}

inline
void XsdBetaDistribution1D::
MV (const MV_type& x)
{
  this->MV_.set (x);
}

inline
void XsdBetaDistribution1D::
MV (const MV_optional& x)
{
  this->MV_ = x;
}

inline
void XsdBetaDistribution1D::
MV (::std::auto_ptr< MV_type > x)
{
  this->MV_.set (x);
}


// XsdBinomialDistribution1D
// 

inline
const XsdBinomialDistribution1D::probability_optional& XsdBinomialDistribution1D::
probability () const
{
  return this->probability_;
}

inline
XsdBinomialDistribution1D::probability_optional& XsdBinomialDistribution1D::
probability ()
{
  return this->probability_;
}

inline
void XsdBinomialDistribution1D::
probability (const probability_type& x)
{
  this->probability_.set (x);
}

inline
void XsdBinomialDistribution1D::
probability (const probability_optional& x)
{
  this->probability_ = x;
}

inline
void XsdBinomialDistribution1D::
probability (::std::auto_ptr< probability_type > x)
{
  this->probability_.set (x);
}

inline
const XsdBinomialDistribution1D::size_optional& XsdBinomialDistribution1D::
size () const
{
  return this->size_;
}

inline
XsdBinomialDistribution1D::size_optional& XsdBinomialDistribution1D::
size ()
{
  return this->size_;
}

inline
void XsdBinomialDistribution1D::
size (const size_type& x)
{
  this->size_.set (x);
}

inline
void XsdBinomialDistribution1D::
size (const size_optional& x)
{
  this->size_ = x;
}

inline
XsdBinomialDistribution1D::size_type XsdBinomialDistribution1D::
size_default_value ()
{
  return size_type (100);
}

inline
const XsdBinomialDistribution1D::ratio_optional& XsdBinomialDistribution1D::
ratio () const
{
  return this->ratio_;
}

inline
XsdBinomialDistribution1D::ratio_optional& XsdBinomialDistribution1D::
ratio ()
{
  return this->ratio_;
}

inline
void XsdBinomialDistribution1D::
ratio (const ratio_type& x)
{
  this->ratio_.set (x);
}

inline
void XsdBinomialDistribution1D::
ratio (const ratio_optional& x)
{
  this->ratio_ = x;
}

inline
void XsdBinomialDistribution1D::
ratio (::std::auto_ptr< ratio_type > x)
{
  this->ratio_.set (x);
}


// XsdCauchyDistribution1D
// 


// XsdChiSquareDistribution1D
// 

inline
const XsdChiSquareDistribution1D::degree_optional& XsdChiSquareDistribution1D::
degree () const
{
  return this->degree_;
}

inline
XsdChiSquareDistribution1D::degree_optional& XsdChiSquareDistribution1D::
degree ()
{
  return this->degree_;
}

inline
void XsdChiSquareDistribution1D::
degree (const degree_type& x)
{
  this->degree_.set (x);
}

inline
void XsdChiSquareDistribution1D::
degree (const degree_optional& x)
{
  this->degree_ = x;
}

inline
void XsdChiSquareDistribution1D::
degree (::std::auto_ptr< degree_type > x)
{
  this->degree_.set (x);
}

inline
const XsdChiSquareDistribution1D::nonCentral_optional& XsdChiSquareDistribution1D::
nonCentral () const
{
  return this->nonCentral_;
}

inline
XsdChiSquareDistribution1D::nonCentral_optional& XsdChiSquareDistribution1D::
nonCentral ()
{
  return this->nonCentral_;
}

inline
void XsdChiSquareDistribution1D::
nonCentral (const nonCentral_type& x)
{
  this->nonCentral_.set (x);
}

inline
void XsdChiSquareDistribution1D::
nonCentral (const nonCentral_optional& x)
{
  this->nonCentral_ = x;
}

inline
void XsdChiSquareDistribution1D::
nonCentral (::std::auto_ptr< nonCentral_type > x)
{
  this->nonCentral_.set (x);
}


// XsdEmpiricalDistribution1D
// 

inline
const XsdEmpiricalDistribution1D::data_type& XsdEmpiricalDistribution1D::
data () const
{
  return this->data_.get ();
}

inline
XsdEmpiricalDistribution1D::data_type& XsdEmpiricalDistribution1D::
data ()
{
  return this->data_.get ();
}

inline
void XsdEmpiricalDistribution1D::
data (const data_type& x)
{
  this->data_.set (x);
}

inline
void XsdEmpiricalDistribution1D::
data (::std::auto_ptr< data_type > x)
{
  this->data_.set (x);
}


// XsdExponentialDistribution1D
// 

inline
const XsdExponentialDistribution1D::constant_optional& XsdExponentialDistribution1D::
constant () const
{
  return this->constant_;
}

inline
XsdExponentialDistribution1D::constant_optional& XsdExponentialDistribution1D::
constant ()
{
  return this->constant_;
}

inline
void XsdExponentialDistribution1D::
constant (const constant_type& x)
{
  this->constant_.set (x);
}

inline
void XsdExponentialDistribution1D::
constant (const constant_optional& x)
{
  this->constant_ = x;
}

inline
void XsdExponentialDistribution1D::
constant (::std::auto_ptr< constant_type > x)
{
  this->constant_.set (x);
}

inline
const XsdExponentialDistribution1D::variable_optional& XsdExponentialDistribution1D::
variable () const
{
  return this->variable_;
}

inline
XsdExponentialDistribution1D::variable_optional& XsdExponentialDistribution1D::
variable ()
{
  return this->variable_;
}

inline
void XsdExponentialDistribution1D::
variable (const variable_type& x)
{
  this->variable_.set (x);
}

inline
void XsdExponentialDistribution1D::
variable (const variable_optional& x)
{
  this->variable_ = x;
}

inline
void XsdExponentialDistribution1D::
variable (::std::auto_ptr< variable_type > x)
{
  this->variable_.set (x);
}


// XsdExpPowerDistribution1D
// 


// XsdExtremeValueDistribution1D
// 


// XsdFisherFDistribution1D
// 

inline
const XsdFisherFDistribution1D::degree1_optional& XsdFisherFDistribution1D::
degree1 () const
{
  return this->degree1_;
}

inline
XsdFisherFDistribution1D::degree1_optional& XsdFisherFDistribution1D::
degree1 ()
{
  return this->degree1_;
}

inline
void XsdFisherFDistribution1D::
degree1 (const degree1_type& x)
{
  this->degree1_.set (x);
}

inline
void XsdFisherFDistribution1D::
degree1 (const degree1_optional& x)
{
  this->degree1_ = x;
}

inline
void XsdFisherFDistribution1D::
degree1 (::std::auto_ptr< degree1_type > x)
{
  this->degree1_.set (x);
}

inline
const XsdFisherFDistribution1D::degree2_optional& XsdFisherFDistribution1D::
degree2 () const
{
  return this->degree2_;
}

inline
XsdFisherFDistribution1D::degree2_optional& XsdFisherFDistribution1D::
degree2 ()
{
  return this->degree2_;
}

inline
void XsdFisherFDistribution1D::
degree2 (const degree2_type& x)
{
  this->degree2_.set (x);
}

inline
void XsdFisherFDistribution1D::
degree2 (const degree2_optional& x)
{
  this->degree2_ = x;
}

inline
void XsdFisherFDistribution1D::
degree2 (::std::auto_ptr< degree2_type > x)
{
  this->degree2_.set (x);
}

inline
const XsdFisherFDistribution1D::nonCentral_optional& XsdFisherFDistribution1D::
nonCentral () const
{
  return this->nonCentral_;
}

inline
XsdFisherFDistribution1D::nonCentral_optional& XsdFisherFDistribution1D::
nonCentral ()
{
  return this->nonCentral_;
}

inline
void XsdFisherFDistribution1D::
nonCentral (const nonCentral_type& x)
{
  this->nonCentral_.set (x);
}

inline
void XsdFisherFDistribution1D::
nonCentral (const nonCentral_optional& x)
{
  this->nonCentral_ = x;
}

inline
void XsdFisherFDistribution1D::
nonCentral (::std::auto_ptr< nonCentral_type > x)
{
  this->nonCentral_.set (x);
}


// XsdGIGaussianDistribution1D
// 

inline
const XsdGIGaussianDistribution1D::A_optional& XsdGIGaussianDistribution1D::
A () const
{
  return this->A_;
}

inline
XsdGIGaussianDistribution1D::A_optional& XsdGIGaussianDistribution1D::
A ()
{
  return this->A_;
}

inline
void XsdGIGaussianDistribution1D::
A (const A_type& x)
{
  this->A_.set (x);
}

inline
void XsdGIGaussianDistribution1D::
A (const A_optional& x)
{
  this->A_ = x;
}

inline
void XsdGIGaussianDistribution1D::
A (::std::auto_ptr< A_type > x)
{
  this->A_.set (x);
}

inline
const XsdGIGaussianDistribution1D::B_optional& XsdGIGaussianDistribution1D::
B () const
{
  return this->B_;
}

inline
XsdGIGaussianDistribution1D::B_optional& XsdGIGaussianDistribution1D::
B ()
{
  return this->B_;
}

inline
void XsdGIGaussianDistribution1D::
B (const B_type& x)
{
  this->B_.set (x);
}

inline
void XsdGIGaussianDistribution1D::
B (const B_optional& x)
{
  this->B_ = x;
}

inline
void XsdGIGaussianDistribution1D::
B (::std::auto_ptr< B_type > x)
{
  this->B_.set (x);
}

inline
const XsdGIGaussianDistribution1D::P_optional& XsdGIGaussianDistribution1D::
P () const
{
  return this->P_;
}

inline
XsdGIGaussianDistribution1D::P_optional& XsdGIGaussianDistribution1D::
P ()
{
  return this->P_;
}

inline
void XsdGIGaussianDistribution1D::
P (const P_type& x)
{
  this->P_.set (x);
}

inline
void XsdGIGaussianDistribution1D::
P (const P_optional& x)
{
  this->P_ = x;
}

inline
void XsdGIGaussianDistribution1D::
P (::std::auto_ptr< P_type > x)
{
  this->P_.set (x);
}


// XsdGammaDistribution1D
// 


// XsdGumbelDistribution1D
// 

inline
const XsdGumbelDistribution1D::type_optional& XsdGumbelDistribution1D::
type () const
{
  return this->type_;
}

inline
XsdGumbelDistribution1D::type_optional& XsdGumbelDistribution1D::
type ()
{
  return this->type_;
}

inline
void XsdGumbelDistribution1D::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdGumbelDistribution1D::
type (const type_optional& x)
{
  this->type_ = x;
}

inline
void XsdGumbelDistribution1D::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
XsdGumbelDistribution1D::type_type XsdGumbelDistribution1D::
type_default_value ()
{
  return type_type (1);
}

inline
const XsdGumbelDistribution1D::A_optional& XsdGumbelDistribution1D::
A () const
{
  return this->A_;
}

inline
XsdGumbelDistribution1D::A_optional& XsdGumbelDistribution1D::
A ()
{
  return this->A_;
}

inline
void XsdGumbelDistribution1D::
A (const A_type& x)
{
  this->A_.set (x);
}

inline
void XsdGumbelDistribution1D::
A (const A_optional& x)
{
  this->A_ = x;
}

inline
void XsdGumbelDistribution1D::
A (::std::auto_ptr< A_type > x)
{
  this->A_.set (x);
}

inline
const XsdGumbelDistribution1D::B_optional& XsdGumbelDistribution1D::
B () const
{
  return this->B_;
}

inline
XsdGumbelDistribution1D::B_optional& XsdGumbelDistribution1D::
B ()
{
  return this->B_;
}

inline
void XsdGumbelDistribution1D::
B (const B_type& x)
{
  this->B_.set (x);
}

inline
void XsdGumbelDistribution1D::
B (const B_optional& x)
{
  this->B_ = x;
}

inline
void XsdGumbelDistribution1D::
B (::std::auto_ptr< B_type > x)
{
  this->B_.set (x);
}


// XsdIChiSquareDistribution1D
// 


// XsdIGammaDistribution1D
// 


// XsdIGaussianDistribution1D
// 

inline
const XsdIGaussianDistribution1D::mu_optional& XsdIGaussianDistribution1D::
mu () const
{
  return this->mu_;
}

inline
XsdIGaussianDistribution1D::mu_optional& XsdIGaussianDistribution1D::
mu ()
{
  return this->mu_;
}

inline
void XsdIGaussianDistribution1D::
mu (const mu_type& x)
{
  this->mu_.set (x);
}

inline
void XsdIGaussianDistribution1D::
mu (const mu_optional& x)
{
  this->mu_ = x;
}

inline
void XsdIGaussianDistribution1D::
mu (::std::auto_ptr< mu_type > x)
{
  this->mu_.set (x);
}

inline
const XsdIGaussianDistribution1D::lambda_optional& XsdIGaussianDistribution1D::
lambda () const
{
  return this->lambda_;
}

inline
XsdIGaussianDistribution1D::lambda_optional& XsdIGaussianDistribution1D::
lambda ()
{
  return this->lambda_;
}

inline
void XsdIGaussianDistribution1D::
lambda (const lambda_type& x)
{
  this->lambda_.set (x);
}

inline
void XsdIGaussianDistribution1D::
lambda (const lambda_optional& x)
{
  this->lambda_ = x;
}

inline
void XsdIGaussianDistribution1D::
lambda (::std::auto_ptr< lambda_type > x)
{
  this->lambda_.set (x);
}


// XsdLaplaceDistribution1D
// 


// XsdLevyStableDistribution1D
// 

inline
const XsdLevyStableDistribution1D::alpha_optional& XsdLevyStableDistribution1D::
alpha () const
{
  return this->alpha_;
}

inline
XsdLevyStableDistribution1D::alpha_optional& XsdLevyStableDistribution1D::
alpha ()
{
  return this->alpha_;
}

inline
void XsdLevyStableDistribution1D::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

inline
void XsdLevyStableDistribution1D::
alpha (const alpha_optional& x)
{
  this->alpha_ = x;
}

inline
void XsdLevyStableDistribution1D::
alpha (::std::auto_ptr< alpha_type > x)
{
  this->alpha_.set (x);
}

inline
const XsdLevyStableDistribution1D::beta_optional& XsdLevyStableDistribution1D::
beta () const
{
  return this->beta_;
}

inline
XsdLevyStableDistribution1D::beta_optional& XsdLevyStableDistribution1D::
beta ()
{
  return this->beta_;
}

inline
void XsdLevyStableDistribution1D::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

inline
void XsdLevyStableDistribution1D::
beta (const beta_optional& x)
{
  this->beta_ = x;
}

inline
void XsdLevyStableDistribution1D::
beta (::std::auto_ptr< beta_type > x)
{
  this->beta_.set (x);
}

inline
const XsdLevyStableDistribution1D::scale_optional& XsdLevyStableDistribution1D::
scale () const
{
  return this->scale_;
}

inline
XsdLevyStableDistribution1D::scale_optional& XsdLevyStableDistribution1D::
scale ()
{
  return this->scale_;
}

inline
void XsdLevyStableDistribution1D::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

inline
void XsdLevyStableDistribution1D::
scale (const scale_optional& x)
{
  this->scale_ = x;
}

inline
void XsdLevyStableDistribution1D::
scale (::std::auto_ptr< scale_type > x)
{
  this->scale_.set (x);
}


// XsdLogarithmicDistribution1D
// 

inline
const XsdLogarithmicDistribution1D::alpha_optional& XsdLogarithmicDistribution1D::
alpha () const
{
  return this->alpha_;
}

inline
XsdLogarithmicDistribution1D::alpha_optional& XsdLogarithmicDistribution1D::
alpha ()
{
  return this->alpha_;
}

inline
void XsdLogarithmicDistribution1D::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

inline
void XsdLogarithmicDistribution1D::
alpha (const alpha_optional& x)
{
  this->alpha_ = x;
}

inline
void XsdLogarithmicDistribution1D::
alpha (::std::auto_ptr< alpha_type > x)
{
  this->alpha_.set (x);
}


// XsdLogisticDistribution1D
// 


// XsdNormalDistribution1D
// 

inline
const XsdNormalDistribution1D::mean_optional& XsdNormalDistribution1D::
mean () const
{
  return this->mean_;
}

inline
XsdNormalDistribution1D::mean_optional& XsdNormalDistribution1D::
mean ()
{
  return this->mean_;
}

inline
void XsdNormalDistribution1D::
mean (const mean_type& x)
{
  this->mean_.set (x);
}

inline
void XsdNormalDistribution1D::
mean (const mean_optional& x)
{
  this->mean_ = x;
}

inline
void XsdNormalDistribution1D::
mean (::std::auto_ptr< mean_type > x)
{
  this->mean_.set (x);
}

inline
const XsdNormalDistribution1D::sigma_optional& XsdNormalDistribution1D::
sigma () const
{
  return this->sigma_;
}

inline
XsdNormalDistribution1D::sigma_optional& XsdNormalDistribution1D::
sigma ()
{
  return this->sigma_;
}

inline
void XsdNormalDistribution1D::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

inline
void XsdNormalDistribution1D::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

inline
void XsdNormalDistribution1D::
sigma (::std::auto_ptr< sigma_type > x)
{
  this->sigma_.set (x);
}


// XsdLognormalDistribution1D
// 


// XsdLookupDistribution1D
// 

inline
const XsdLookupDistribution1D::distribution_type& XsdLookupDistribution1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdLookupDistribution1D::distribution_type& XsdLookupDistribution1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdLookupDistribution1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdLookupDistribution1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}

inline
const XsdLookupDistribution1D::points_optional& XsdLookupDistribution1D::
points () const
{
  return this->points_;
}

inline
XsdLookupDistribution1D::points_optional& XsdLookupDistribution1D::
points ()
{
  return this->points_;
}

inline
void XsdLookupDistribution1D::
points (const points_type& x)
{
  this->points_.set (x);
}

inline
void XsdLookupDistribution1D::
points (const points_optional& x)
{
  this->points_ = x;
}

inline
void XsdLookupDistribution1D::
points (::std::auto_ptr< points_type > x)
{
  this->points_.set (x);
}


// XsdMixtureDistribution1D
// 

inline
const XsdMixtureDistribution1D::row_sequence& XsdMixtureDistribution1D::
row () const
{
  return this->row_;
}

inline
XsdMixtureDistribution1D::row_sequence& XsdMixtureDistribution1D::
row ()
{
  return this->row_;
}

inline
void XsdMixtureDistribution1D::
row (const row_sequence& s)
{
  this->row_ = s;
}


// XsdNIGaussianDistribution1D
// 

inline
const XsdNIGaussianDistribution1D::alpha_optional& XsdNIGaussianDistribution1D::
alpha () const
{
  return this->alpha_;
}

inline
XsdNIGaussianDistribution1D::alpha_optional& XsdNIGaussianDistribution1D::
alpha ()
{
  return this->alpha_;
}

inline
void XsdNIGaussianDistribution1D::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

inline
void XsdNIGaussianDistribution1D::
alpha (const alpha_optional& x)
{
  this->alpha_ = x;
}

inline
void XsdNIGaussianDistribution1D::
alpha (::std::auto_ptr< alpha_type > x)
{
  this->alpha_.set (x);
}

inline
const XsdNIGaussianDistribution1D::beta_optional& XsdNIGaussianDistribution1D::
beta () const
{
  return this->beta_;
}

inline
XsdNIGaussianDistribution1D::beta_optional& XsdNIGaussianDistribution1D::
beta ()
{
  return this->beta_;
}

inline
void XsdNIGaussianDistribution1D::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

inline
void XsdNIGaussianDistribution1D::
beta (const beta_optional& x)
{
  this->beta_ = x;
}

inline
void XsdNIGaussianDistribution1D::
beta (::std::auto_ptr< beta_type > x)
{
  this->beta_.set (x);
}

inline
const XsdNIGaussianDistribution1D::mu_optional& XsdNIGaussianDistribution1D::
mu () const
{
  return this->mu_;
}

inline
XsdNIGaussianDistribution1D::mu_optional& XsdNIGaussianDistribution1D::
mu ()
{
  return this->mu_;
}

inline
void XsdNIGaussianDistribution1D::
mu (const mu_type& x)
{
  this->mu_.set (x);
}

inline
void XsdNIGaussianDistribution1D::
mu (const mu_optional& x)
{
  this->mu_ = x;
}

inline
void XsdNIGaussianDistribution1D::
mu (::std::auto_ptr< mu_type > x)
{
  this->mu_.set (x);
}

inline
const XsdNIGaussianDistribution1D::delta_optional& XsdNIGaussianDistribution1D::
delta () const
{
  return this->delta_;
}

inline
XsdNIGaussianDistribution1D::delta_optional& XsdNIGaussianDistribution1D::
delta ()
{
  return this->delta_;
}

inline
void XsdNIGaussianDistribution1D::
delta (const delta_type& x)
{
  this->delta_.set (x);
}

inline
void XsdNIGaussianDistribution1D::
delta (const delta_optional& x)
{
  this->delta_ = x;
}

inline
void XsdNIGaussianDistribution1D::
delta (::std::auto_ptr< delta_type > x)
{
  this->delta_.set (x);
}


// XsdNormalGammaDistribution1D
// 

inline
const XsdNormalGammaDistribution1D::sigma_optional& XsdNormalGammaDistribution1D::
sigma () const
{
  return this->sigma_;
}

inline
XsdNormalGammaDistribution1D::sigma_optional& XsdNormalGammaDistribution1D::
sigma ()
{
  return this->sigma_;
}

inline
void XsdNormalGammaDistribution1D::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

inline
void XsdNormalGammaDistribution1D::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

inline
void XsdNormalGammaDistribution1D::
sigma (::std::auto_ptr< sigma_type > x)
{
  this->sigma_.set (x);
}


// XsdParetoDistribution1D
// 


// XsdPoissonDistribution1D
// 

inline
const XsdPoissonDistribution1D::lambda_optional& XsdPoissonDistribution1D::
lambda () const
{
  return this->lambda_;
}

inline
XsdPoissonDistribution1D::lambda_optional& XsdPoissonDistribution1D::
lambda ()
{
  return this->lambda_;
}

inline
void XsdPoissonDistribution1D::
lambda (const lambda_type& x)
{
  this->lambda_.set (x);
}

inline
void XsdPoissonDistribution1D::
lambda (const lambda_optional& x)
{
  this->lambda_ = x;
}

inline
void XsdPoissonDistribution1D::
lambda (::std::auto_ptr< lambda_type > x)
{
  this->lambda_.set (x);
}

inline
const XsdPoissonDistribution1D::distribution_optional& XsdPoissonDistribution1D::
distribution () const
{
  return this->distribution_;
}

inline
XsdPoissonDistribution1D::distribution_optional& XsdPoissonDistribution1D::
distribution ()
{
  return this->distribution_;
}

inline
void XsdPoissonDistribution1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdPoissonDistribution1D::
distribution (const distribution_optional& x)
{
  this->distribution_ = x;
}

inline
void XsdPoissonDistribution1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdRayleighDistribution1D
// 

inline
const XsdRayleighDistribution1D::sigma_optional& XsdRayleighDistribution1D::
sigma () const
{
  return this->sigma_;
}

inline
XsdRayleighDistribution1D::sigma_optional& XsdRayleighDistribution1D::
sigma ()
{
  return this->sigma_;
}

inline
void XsdRayleighDistribution1D::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

inline
void XsdRayleighDistribution1D::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

inline
void XsdRayleighDistribution1D::
sigma (::std::auto_ptr< sigma_type > x)
{
  this->sigma_.set (x);
}


// XsdRescaledDistribution1D
// 

inline
const XsdRescaledDistribution1D::scale_type& XsdRescaledDistribution1D::
scale () const
{
  return this->scale_.get ();
}

inline
XsdRescaledDistribution1D::scale_type& XsdRescaledDistribution1D::
scale ()
{
  return this->scale_.get ();
}

inline
void XsdRescaledDistribution1D::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

inline
void XsdRescaledDistribution1D::
scale (::std::auto_ptr< scale_type > x)
{
  this->scale_.set (x);
}

inline
const XsdRescaledDistribution1D::distribution_type& XsdRescaledDistribution1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdRescaledDistribution1D::distribution_type& XsdRescaledDistribution1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdRescaledDistribution1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdRescaledDistribution1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdSimpleDistribution1D
// 

inline
const XsdSimpleDistribution1D::series_type& XsdSimpleDistribution1D::
series () const
{
  return this->series_.get ();
}

inline
XsdSimpleDistribution1D::series_type& XsdSimpleDistribution1D::
series ()
{
  return this->series_.get ();
}

inline
void XsdSimpleDistribution1D::
series (const series_type& x)
{
  this->series_.set (x);
}

inline
void XsdSimpleDistribution1D::
series (::std::auto_ptr< series_type > x)
{
  this->series_.set (x);
}


// XsdSpecialDistribution1D
// 

inline
const XsdSpecialDistribution1D::zero_optional& XsdSpecialDistribution1D::
zero () const
{
  return this->zero_;
}

inline
XsdSpecialDistribution1D::zero_optional& XsdSpecialDistribution1D::
zero ()
{
  return this->zero_;
}

inline
void XsdSpecialDistribution1D::
zero (const zero_type& x)
{
  this->zero_.set (x);
}

inline
void XsdSpecialDistribution1D::
zero (const zero_optional& x)
{
  this->zero_ = x;
}

inline
void XsdSpecialDistribution1D::
zero (::std::auto_ptr< zero_type > x)
{
  this->zero_.set (x);
}

inline
const XsdSpecialDistribution1D::distribution_type& XsdSpecialDistribution1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdSpecialDistribution1D::distribution_type& XsdSpecialDistribution1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdSpecialDistribution1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdSpecialDistribution1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdStudentTDistribution1D
// 

inline
const XsdStudentTDistribution1D::degree_optional& XsdStudentTDistribution1D::
degree () const
{
  return this->degree_;
}

inline
XsdStudentTDistribution1D::degree_optional& XsdStudentTDistribution1D::
degree ()
{
  return this->degree_;
}

inline
void XsdStudentTDistribution1D::
degree (const degree_type& x)
{
  this->degree_.set (x);
}

inline
void XsdStudentTDistribution1D::
degree (const degree_optional& x)
{
  this->degree_ = x;
}

inline
void XsdStudentTDistribution1D::
degree (::std::auto_ptr< degree_type > x)
{
  this->degree_.set (x);
}

inline
const XsdStudentTDistribution1D::nonCentral_optional& XsdStudentTDistribution1D::
nonCentral () const
{
  return this->nonCentral_;
}

inline
XsdStudentTDistribution1D::nonCentral_optional& XsdStudentTDistribution1D::
nonCentral ()
{
  return this->nonCentral_;
}

inline
void XsdStudentTDistribution1D::
nonCentral (const nonCentral_type& x)
{
  this->nonCentral_.set (x);
}

inline
void XsdStudentTDistribution1D::
nonCentral (const nonCentral_optional& x)
{
  this->nonCentral_ = x;
}

inline
void XsdStudentTDistribution1D::
nonCentral (::std::auto_ptr< nonCentral_type > x)
{
  this->nonCentral_.set (x);
}


// XsdTriangularDistribution1D
// 

inline
const XsdTriangularDistribution1D::lower_optional& XsdTriangularDistribution1D::
lower () const
{
  return this->lower_;
}

inline
XsdTriangularDistribution1D::lower_optional& XsdTriangularDistribution1D::
lower ()
{
  return this->lower_;
}

inline
void XsdTriangularDistribution1D::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdTriangularDistribution1D::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdTriangularDistribution1D::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdTriangularDistribution1D::modal_optional& XsdTriangularDistribution1D::
modal () const
{
  return this->modal_;
}

inline
XsdTriangularDistribution1D::modal_optional& XsdTriangularDistribution1D::
modal ()
{
  return this->modal_;
}

inline
void XsdTriangularDistribution1D::
modal (const modal_type& x)
{
  this->modal_.set (x);
}

inline
void XsdTriangularDistribution1D::
modal (const modal_optional& x)
{
  this->modal_ = x;
}

inline
void XsdTriangularDistribution1D::
modal (::std::auto_ptr< modal_type > x)
{
  this->modal_.set (x);
}

inline
const XsdTriangularDistribution1D::upper_optional& XsdTriangularDistribution1D::
upper () const
{
  return this->upper_;
}

inline
XsdTriangularDistribution1D::upper_optional& XsdTriangularDistribution1D::
upper ()
{
  return this->upper_;
}

inline
void XsdTriangularDistribution1D::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdTriangularDistribution1D::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdTriangularDistribution1D::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdTruncatedDistribution1D
// 

inline
const XsdTruncatedDistribution1D::bounds_type& XsdTruncatedDistribution1D::
bounds () const
{
  return this->bounds_.get ();
}

inline
XsdTruncatedDistribution1D::bounds_type& XsdTruncatedDistribution1D::
bounds ()
{
  return this->bounds_.get ();
}

inline
void XsdTruncatedDistribution1D::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdTruncatedDistribution1D::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdTruncatedDistribution1D::distribution_type& XsdTruncatedDistribution1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdTruncatedDistribution1D::distribution_type& XsdTruncatedDistribution1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdTruncatedDistribution1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdTruncatedDistribution1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdUniformDistribution1D
// 

inline
const XsdUniformDistribution1D::lower_optional& XsdUniformDistribution1D::
lower () const
{
  return this->lower_;
}

inline
XsdUniformDistribution1D::lower_optional& XsdUniformDistribution1D::
lower ()
{
  return this->lower_;
}

inline
void XsdUniformDistribution1D::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdUniformDistribution1D::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdUniformDistribution1D::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdUniformDistribution1D::upper_optional& XsdUniformDistribution1D::
upper () const
{
  return this->upper_;
}

inline
XsdUniformDistribution1D::upper_optional& XsdUniformDistribution1D::
upper ()
{
  return this->upper_;
}

inline
void XsdUniformDistribution1D::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdUniformDistribution1D::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdUniformDistribution1D::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdVGammaDistribution1D
// 

inline
const XsdVGammaDistribution1D::drift_optional& XsdVGammaDistribution1D::
drift () const
{
  return this->drift_;
}

inline
XsdVGammaDistribution1D::drift_optional& XsdVGammaDistribution1D::
drift ()
{
  return this->drift_;
}

inline
void XsdVGammaDistribution1D::
drift (const drift_type& x)
{
  this->drift_.set (x);
}

inline
void XsdVGammaDistribution1D::
drift (const drift_optional& x)
{
  this->drift_ = x;
}

inline
void XsdVGammaDistribution1D::
drift (::std::auto_ptr< drift_type > x)
{
  this->drift_.set (x);
}

inline
const XsdVGammaDistribution1D::sigma_optional& XsdVGammaDistribution1D::
sigma () const
{
  return this->sigma_;
}

inline
XsdVGammaDistribution1D::sigma_optional& XsdVGammaDistribution1D::
sigma ()
{
  return this->sigma_;
}

inline
void XsdVGammaDistribution1D::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

inline
void XsdVGammaDistribution1D::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

inline
void XsdVGammaDistribution1D::
sigma (::std::auto_ptr< sigma_type > x)
{
  this->sigma_.set (x);
}


// XsdWeibullDistribution1D
// 


// XsdWeightedSumDistribution1D
// 

inline
const XsdWeightedSumDistribution1D::distribution_sequence& XsdWeightedSumDistribution1D::
distribution () const
{
  return this->distribution_;
}

inline
XsdWeightedSumDistribution1D::distribution_sequence& XsdWeightedSumDistribution1D::
distribution ()
{
  return this->distribution_;
}

inline
void XsdWeightedSumDistribution1D::
distribution (const distribution_sequence& s)
{
  this->distribution_ = s;
}

inline
const XsdWeightedSumDistribution1D::weight_optional& XsdWeightedSumDistribution1D::
weight () const
{
  return this->weight_;
}

inline
XsdWeightedSumDistribution1D::weight_optional& XsdWeightedSumDistribution1D::
weight ()
{
  return this->weight_;
}

inline
void XsdWeightedSumDistribution1D::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
void XsdWeightedSumDistribution1D::
weight (const weight_optional& x)
{
  this->weight_ = x;
}

inline
void XsdWeightedSumDistribution1D::
weight (::std::auto_ptr< weight_type > x)
{
  this->weight_.set (x);
}


// XsdDistributionResult1D
// 

inline
const XsdDistributionResult1D::row_sequence& XsdDistributionResult1D::
row () const
{
  return this->row_;
}

inline
XsdDistributionResult1D::row_sequence& XsdDistributionResult1D::
row ()
{
  return this->row_;
}

inline
void XsdDistributionResult1D::
row (const row_sequence& s)
{
  this->row_ = s;
}


// XsdMomentsResult1D
// 

inline
const XsdMomentsResult1D::bounds_optional& XsdMomentsResult1D::
bounds () const
{
  return this->bounds_;
}

inline
XsdMomentsResult1D::bounds_optional& XsdMomentsResult1D::
bounds ()
{
  return this->bounds_;
}

inline
void XsdMomentsResult1D::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdMomentsResult1D::
bounds (const bounds_optional& x)
{
  this->bounds_ = x;
}

inline
void XsdMomentsResult1D::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdMomentsResult1D::mean_optional& XsdMomentsResult1D::
mean () const
{
  return this->mean_;
}

inline
XsdMomentsResult1D::mean_optional& XsdMomentsResult1D::
mean ()
{
  return this->mean_;
}

inline
void XsdMomentsResult1D::
mean (const mean_type& x)
{
  this->mean_.set (x);
}

inline
void XsdMomentsResult1D::
mean (const mean_optional& x)
{
  this->mean_ = x;
}

inline
void XsdMomentsResult1D::
mean (::std::auto_ptr< mean_type > x)
{
  this->mean_.set (x);
}

inline
const XsdMomentsResult1D::variance_optional& XsdMomentsResult1D::
variance () const
{
  return this->variance_;
}

inline
XsdMomentsResult1D::variance_optional& XsdMomentsResult1D::
variance ()
{
  return this->variance_;
}

inline
void XsdMomentsResult1D::
variance (const variance_type& x)
{
  this->variance_.set (x);
}

inline
void XsdMomentsResult1D::
variance (const variance_optional& x)
{
  this->variance_ = x;
}

inline
void XsdMomentsResult1D::
variance (::std::auto_ptr< variance_type > x)
{
  this->variance_.set (x);
}

inline
const XsdMomentsResult1D::skewness_optional& XsdMomentsResult1D::
skewness () const
{
  return this->skewness_;
}

inline
XsdMomentsResult1D::skewness_optional& XsdMomentsResult1D::
skewness ()
{
  return this->skewness_;
}

inline
void XsdMomentsResult1D::
skewness (const skewness_type& x)
{
  this->skewness_.set (x);
}

inline
void XsdMomentsResult1D::
skewness (const skewness_optional& x)
{
  this->skewness_ = x;
}

inline
void XsdMomentsResult1D::
skewness (::std::auto_ptr< skewness_type > x)
{
  this->skewness_.set (x);
}

inline
const XsdMomentsResult1D::kurtosis_optional& XsdMomentsResult1D::
kurtosis () const
{
  return this->kurtosis_;
}

inline
XsdMomentsResult1D::kurtosis_optional& XsdMomentsResult1D::
kurtosis ()
{
  return this->kurtosis_;
}

inline
void XsdMomentsResult1D::
kurtosis (const kurtosis_type& x)
{
  this->kurtosis_.set (x);
}

inline
void XsdMomentsResult1D::
kurtosis (const kurtosis_optional& x)
{
  this->kurtosis_ = x;
}

inline
void XsdMomentsResult1D::
kurtosis (::std::auto_ptr< kurtosis_type > x)
{
  this->kurtosis_.set (x);
}

inline
const XsdMomentsResult1D::mode_optional& XsdMomentsResult1D::
mode () const
{
  return this->mode_;
}

inline
XsdMomentsResult1D::mode_optional& XsdMomentsResult1D::
mode ()
{
  return this->mode_;
}

inline
void XsdMomentsResult1D::
mode (const mode_type& x)
{
  this->mode_.set (x);
}

inline
void XsdMomentsResult1D::
mode (const mode_optional& x)
{
  this->mode_ = x;
}

inline
void XsdMomentsResult1D::
mode (::std::auto_ptr< mode_type > x)
{
  this->mode_.set (x);
}


// XsdDistributionTest1D
// 

inline
const XsdDistributionTest1D::result_optional& XsdDistributionTest1D::
result () const
{
  return this->result_;
}

inline
XsdDistributionTest1D::result_optional& XsdDistributionTest1D::
result ()
{
  return this->result_;
}

inline
void XsdDistributionTest1D::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdDistributionTest1D::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdDistributionTest1D::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdDistributionTest1D::points_type& XsdDistributionTest1D::
points () const
{
  return this->points_.get ();
}

inline
XsdDistributionTest1D::points_type& XsdDistributionTest1D::
points ()
{
  return this->points_.get ();
}

inline
void XsdDistributionTest1D::
points (const points_type& x)
{
  this->points_.set (x);
}

inline
void XsdDistributionTest1D::
points (::std::auto_ptr< points_type > x)
{
  this->points_.set (x);
}

inline
const XsdDistributionTest1D::distribution_type& XsdDistributionTest1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdDistributionTest1D::distribution_type& XsdDistributionTest1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdDistributionTest1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdDistributionTest1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdDistributionMoments1D
// 

inline
const XsdDistributionMoments1D::result_optional& XsdDistributionMoments1D::
result () const
{
  return this->result_;
}

inline
XsdDistributionMoments1D::result_optional& XsdDistributionMoments1D::
result ()
{
  return this->result_;
}

inline
void XsdDistributionMoments1D::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdDistributionMoments1D::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdDistributionMoments1D::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdDistributionMoments1D::distribution_type& XsdDistributionMoments1D::
distribution () const
{
  return this->distribution_.get ();
}

inline
XsdDistributionMoments1D::distribution_type& XsdDistributionMoments1D::
distribution ()
{
  return this->distribution_.get ();
}

inline
void XsdDistributionMoments1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdDistributionMoments1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}

inline
const XsdDistributionMoments1D::numPoints_optional& XsdDistributionMoments1D::
numPoints () const
{
  return this->numPoints_;
}

inline
XsdDistributionMoments1D::numPoints_optional& XsdDistributionMoments1D::
numPoints ()
{
  return this->numPoints_;
}

inline
void XsdDistributionMoments1D::
numPoints (const numPoints_type& x)
{
  this->numPoints_.set (x);
}

inline
void XsdDistributionMoments1D::
numPoints (const numPoints_optional& x)
{
  this->numPoints_ = x;
}

inline
XsdDistributionMoments1D::numPoints_type XsdDistributionMoments1D::
numPoints_default_value ()
{
  return numPoints_type (100000ULL);
}

inline
const XsdDistributionMoments1D::inverse_optional& XsdDistributionMoments1D::
inverse () const
{
  return this->inverse_;
}

inline
XsdDistributionMoments1D::inverse_optional& XsdDistributionMoments1D::
inverse ()
{
  return this->inverse_;
}

inline
void XsdDistributionMoments1D::
inverse (const inverse_type& x)
{
  this->inverse_.set (x);
}

inline
void XsdDistributionMoments1D::
inverse (const inverse_optional& x)
{
  this->inverse_ = x;
}

inline
XsdDistributionMoments1D::inverse_type XsdDistributionMoments1D::
inverse_default_value ()
{
  return inverse_type (false);
}

inline
const XsdDistributionMoments1D::random_type& XsdDistributionMoments1D::
random () const
{
  return this->random_.get ();
}

inline
XsdDistributionMoments1D::random_type& XsdDistributionMoments1D::
random ()
{
  return this->random_.get ();
}

inline
void XsdDistributionMoments1D::
random (const random_type& x)
{
  this->random_.set (x);
}

inline
void XsdDistributionMoments1D::
random (::std::auto_ptr< random_type > x)
{
  this->random_.set (x);
}


// XsdBetaDetailsAB
// 

inline
const XsdBetaDetailsAB::alpha_type& XsdBetaDetailsAB::
alpha () const
{
  return this->alpha_.get ();
}

inline
XsdBetaDetailsAB::alpha_type& XsdBetaDetailsAB::
alpha ()
{
  return this->alpha_.get ();
}

inline
void XsdBetaDetailsAB::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

inline
void XsdBetaDetailsAB::
alpha (::std::auto_ptr< alpha_type > x)
{
  this->alpha_.set (x);
}

inline
XsdBetaDetailsAB::alpha_type XsdBetaDetailsAB::
alpha_default_value ()
{
  return alpha_type (1.0);
}

inline
const XsdBetaDetailsAB::beta_type& XsdBetaDetailsAB::
beta () const
{
  return this->beta_.get ();
}

inline
XsdBetaDetailsAB::beta_type& XsdBetaDetailsAB::
beta ()
{
  return this->beta_.get ();
}

inline
void XsdBetaDetailsAB::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

inline
void XsdBetaDetailsAB::
beta (::std::auto_ptr< beta_type > x)
{
  this->beta_.set (x);
}

inline
XsdBetaDetailsAB::beta_type XsdBetaDetailsAB::
beta_default_value ()
{
  return beta_type (1.0);
}

inline
const XsdBetaDetailsAB::nonCentral_type& XsdBetaDetailsAB::
nonCentral () const
{
  return this->nonCentral_.get ();
}

inline
XsdBetaDetailsAB::nonCentral_type& XsdBetaDetailsAB::
nonCentral ()
{
  return this->nonCentral_.get ();
}

inline
void XsdBetaDetailsAB::
nonCentral (const nonCentral_type& x)
{
  this->nonCentral_.set (x);
}

inline
void XsdBetaDetailsAB::
nonCentral (::std::auto_ptr< nonCentral_type > x)
{
  this->nonCentral_.set (x);
}

inline
XsdBetaDetailsAB::nonCentral_type XsdBetaDetailsAB::
nonCentral_default_value ()
{
  return nonCentral_type (.0);
}


// XsdBetaDetailsMV
// 

inline
const XsdBetaDetailsMV::mean_type& XsdBetaDetailsMV::
mean () const
{
  return this->mean_.get ();
}

inline
XsdBetaDetailsMV::mean_type& XsdBetaDetailsMV::
mean ()
{
  return this->mean_.get ();
}

inline
void XsdBetaDetailsMV::
mean (const mean_type& x)
{
  this->mean_.set (x);
}

inline
void XsdBetaDetailsMV::
mean (::std::auto_ptr< mean_type > x)
{
  this->mean_.set (x);
}

inline
XsdBetaDetailsMV::mean_type XsdBetaDetailsMV::
mean_default_value ()
{
  return mean_type (.0);
}

inline
const XsdBetaDetailsMV::variance_type& XsdBetaDetailsMV::
variance () const
{
  return this->variance_.get ();
}

inline
XsdBetaDetailsMV::variance_type& XsdBetaDetailsMV::
variance ()
{
  return this->variance_.get ();
}

inline
void XsdBetaDetailsMV::
variance (const variance_type& x)
{
  this->variance_.set (x);
}

inline
void XsdBetaDetailsMV::
variance (::std::auto_ptr< variance_type > x)
{
  this->variance_.set (x);
}

inline
XsdBetaDetailsMV::variance_type XsdBetaDetailsMV::
variance_default_value ()
{
  return variance_type (1.0);
}

inline
const XsdBetaDetailsMV::nonCentral_type& XsdBetaDetailsMV::
nonCentral () const
{
  return this->nonCentral_.get ();
}

inline
XsdBetaDetailsMV::nonCentral_type& XsdBetaDetailsMV::
nonCentral ()
{
  return this->nonCentral_.get ();
}

inline
void XsdBetaDetailsMV::
nonCentral (const nonCentral_type& x)
{
  this->nonCentral_.set (x);
}

inline
void XsdBetaDetailsMV::
nonCentral (::std::auto_ptr< nonCentral_type > x)
{
  this->nonCentral_.set (x);
}

inline
XsdBetaDetailsMV::nonCentral_type XsdBetaDetailsMV::
nonCentral_default_value ()
{
  return nonCentral_type (.0);
}


// XsdDistributionRow1D
// 

inline
const XsdDistributionRow1D::cdf_type& XsdDistributionRow1D::
cdf () const
{
  return this->cdf_.get ();
}

inline
XsdDistributionRow1D::cdf_type& XsdDistributionRow1D::
cdf ()
{
  return this->cdf_.get ();
}

inline
void XsdDistributionRow1D::
cdf (const cdf_type& x)
{
  this->cdf_.set (x);
}

inline
const XsdDistributionRow1D::pdf_optional& XsdDistributionRow1D::
pdf () const
{
  return this->pdf_;
}

inline
XsdDistributionRow1D::pdf_optional& XsdDistributionRow1D::
pdf ()
{
  return this->pdf_;
}

inline
void XsdDistributionRow1D::
pdf (const pdf_type& x)
{
  this->pdf_.set (x);
}

inline
void XsdDistributionRow1D::
pdf (const pdf_optional& x)
{
  this->pdf_ = x;
}

inline
const XsdDistributionRow1D::idf_type& XsdDistributionRow1D::
idf () const
{
  return this->idf_.get ();
}

inline
XsdDistributionRow1D::idf_type& XsdDistributionRow1D::
idf ()
{
  return this->idf_.get ();
}

inline
void XsdDistributionRow1D::
idf (const idf_type& x)
{
  this->idf_.set (x);
}

inline
const XsdDistributionRow1D::error_optional& XsdDistributionRow1D::
error () const
{
  return this->error_;
}

inline
XsdDistributionRow1D::error_optional& XsdDistributionRow1D::
error ()
{
  return this->error_;
}

inline
void XsdDistributionRow1D::
error (const error_type& x)
{
  this->error_.set (x);
}

inline
void XsdDistributionRow1D::
error (const error_optional& x)
{
  this->error_ = x;
}

inline
const XsdDistributionRow1D::point_type& XsdDistributionRow1D::
point () const
{
  return this->point_.get ();
}

inline
XsdDistributionRow1D::point_type& XsdDistributionRow1D::
point ()
{
  return this->point_.get ();
}

inline
void XsdDistributionRow1D::
point (const point_type& x)
{
  this->point_.set (x);
}


// probability
// 


// type
// 


// row
// 

inline
const row::distribution_type& row::
distribution () const
{
  return this->distribution_.get ();
}

inline
row::distribution_type& row::
distribution ()
{
  return this->distribution_.get ();
}

inline
void row::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void row::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}

inline
const row::weight_type& row::
weight () const
{
  return this->weight_.get ();
}

inline
row::weight_type& row::
weight ()
{
  return this->weight_.get ();
}

inline
void row::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
void row::
weight (::std::auto_ptr< weight_type > x)
{
  this->weight_.set (x);
}

inline
row::weight_type row::
weight_default_value ()
{
  return weight_type (1.0);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_DISTRIBUTION_1D_IXX
