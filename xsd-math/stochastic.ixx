// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_STOCHASTIC_IXX
#define CXX___SCHEMA_XSD_MATH_STOCHASTIC_IXX

// Begin prologue.
//
//
// End prologue.

#include "distribution.ixx"

// XsdStochastic
// 


// XsdStochastic1D
// 


// XsdBrownianMotion1D
// 

inline
const XsdBrownianMotion1D::initial_optional& XsdBrownianMotion1D::
initial () const
{
  return this->initial_;
}

inline
XsdBrownianMotion1D::initial_optional& XsdBrownianMotion1D::
initial ()
{
  return this->initial_;
}

inline
void XsdBrownianMotion1D::
initial (const initial_type& x)
{
  this->initial_.set (x);
}

inline
void XsdBrownianMotion1D::
initial (const initial_optional& x)
{
  this->initial_ = x;
}

inline
XsdBrownianMotion1D::initial_type XsdBrownianMotion1D::
initial_default_value ()
{
  return initial_type (.0);
}

inline
const XsdBrownianMotion1D::drift_optional& XsdBrownianMotion1D::
drift () const
{
  return this->drift_;
}

inline
XsdBrownianMotion1D::drift_optional& XsdBrownianMotion1D::
drift ()
{
  return this->drift_;
}

inline
void XsdBrownianMotion1D::
drift (const drift_type& x)
{
  this->drift_.set (x);
}

inline
void XsdBrownianMotion1D::
drift (const drift_optional& x)
{
  this->drift_ = x;
}

inline
XsdBrownianMotion1D::drift_type XsdBrownianMotion1D::
drift_default_value ()
{
  return drift_type (.0);
}

inline
const XsdBrownianMotion1D::volatility_optional& XsdBrownianMotion1D::
volatility () const
{
  return this->volatility_;
}

inline
XsdBrownianMotion1D::volatility_optional& XsdBrownianMotion1D::
volatility ()
{
  return this->volatility_;
}

inline
void XsdBrownianMotion1D::
volatility (const volatility_type& x)
{
  this->volatility_.set (x);
}

inline
void XsdBrownianMotion1D::
volatility (const volatility_optional& x)
{
  this->volatility_ = x;
}

inline
void XsdBrownianMotion1D::
volatility (::std::auto_ptr< volatility_type > x)
{
  this->volatility_.set (x);
}

inline
XsdBrownianMotion1D::volatility_type XsdBrownianMotion1D::
volatility_default_value ()
{
  return volatility_type (1.0);
}


// XsdBrownianBridge1D
// 

inline
const XsdBrownianBridge1D::horizon_optional& XsdBrownianBridge1D::
horizon () const
{
  return this->horizon_;
}

inline
XsdBrownianBridge1D::horizon_optional& XsdBrownianBridge1D::
horizon ()
{
  return this->horizon_;
}

inline
void XsdBrownianBridge1D::
horizon (const horizon_type& x)
{
  this->horizon_.set (x);
}

inline
void XsdBrownianBridge1D::
horizon (const horizon_optional& x)
{
  this->horizon_ = x;
}

inline
void XsdBrownianBridge1D::
horizon (::std::auto_ptr< horizon_type > x)
{
  this->horizon_.set (x);
}

inline
XsdBrownianBridge1D::horizon_type XsdBrownianBridge1D::
horizon_default_value ()
{
  return horizon_type (1.0);
}

inline
const XsdBrownianBridge1D::terminal_optional& XsdBrownianBridge1D::
terminal () const
{
  return this->terminal_;
}

inline
XsdBrownianBridge1D::terminal_optional& XsdBrownianBridge1D::
terminal ()
{
  return this->terminal_;
}

inline
void XsdBrownianBridge1D::
terminal (const terminal_type& x)
{
  this->terminal_.set (x);
}

inline
void XsdBrownianBridge1D::
terminal (const terminal_optional& x)
{
  this->terminal_ = x;
}

inline
XsdBrownianBridge1D::terminal_type XsdBrownianBridge1D::
terminal_default_value ()
{
  return terminal_type (.0);
}


// XsdGammaProcess1D
// 

inline
const XsdGammaProcess1D::mean_type& XsdGammaProcess1D::
mean () const
{
  return this->mean_.get ();
}

inline
XsdGammaProcess1D::mean_type& XsdGammaProcess1D::
mean ()
{
  return this->mean_.get ();
}

inline
void XsdGammaProcess1D::
mean (const mean_type& x)
{
  this->mean_.set (x);
}

inline
XsdGammaProcess1D::mean_type XsdGammaProcess1D::
mean_default_value ()
{
  return mean_type (1.0);
}

inline
const XsdGammaProcess1D::variance_type& XsdGammaProcess1D::
variance () const
{
  return this->variance_.get ();
}

inline
XsdGammaProcess1D::variance_type& XsdGammaProcess1D::
variance ()
{
  return this->variance_.get ();
}

inline
void XsdGammaProcess1D::
variance (const variance_type& x)
{
  this->variance_.set (x);
}

inline
void XsdGammaProcess1D::
variance (::std::auto_ptr< variance_type > x)
{
  this->variance_.set (x);
}

inline
XsdGammaProcess1D::variance_type XsdGammaProcess1D::
variance_default_value ()
{
  return variance_type (1.0);
}


// XsdGeometricBrownianMotion1D
// 


// XsdPoissonProcess1D
// 

inline
const XsdPoissonProcess1D::intensity_optional& XsdPoissonProcess1D::
intensity () const
{
  return this->intensity_;
}

inline
XsdPoissonProcess1D::intensity_optional& XsdPoissonProcess1D::
intensity ()
{
  return this->intensity_;
}

inline
void XsdPoissonProcess1D::
intensity (const intensity_type& x)
{
  this->intensity_.set (x);
}

inline
void XsdPoissonProcess1D::
intensity (const intensity_optional& x)
{
  this->intensity_ = x;
}

inline
void XsdPoissonProcess1D::
intensity (::std::auto_ptr< intensity_type > x)
{
  this->intensity_.set (x);
}

inline
const XsdPoissonProcess1D::distribution_optional& XsdPoissonProcess1D::
distribution () const
{
  return this->distribution_;
}

inline
XsdPoissonProcess1D::distribution_optional& XsdPoissonProcess1D::
distribution ()
{
  return this->distribution_;
}

inline
void XsdPoissonProcess1D::
distribution (const distribution_type& x)
{
  this->distribution_.set (x);
}

inline
void XsdPoissonProcess1D::
distribution (const distribution_optional& x)
{
  this->distribution_ = x;
}

inline
void XsdPoissonProcess1D::
distribution (::std::auto_ptr< distribution_type > x)
{
  this->distribution_.set (x);
}


// XsdSquareRootProcess1D
// 

inline
const XsdSquareRootProcess1D::speed_type& XsdSquareRootProcess1D::
speed () const
{
  return this->speed_.get ();
}

inline
XsdSquareRootProcess1D::speed_type& XsdSquareRootProcess1D::
speed ()
{
  return this->speed_.get ();
}

inline
void XsdSquareRootProcess1D::
speed (const speed_type& x)
{
  this->speed_.set (x);
}

inline
void XsdSquareRootProcess1D::
speed (::std::auto_ptr< speed_type > x)
{
  this->speed_.set (x);
}

inline
const XsdSquareRootProcess1D::level_optional& XsdSquareRootProcess1D::
level () const
{
  return this->level_;
}

inline
XsdSquareRootProcess1D::level_optional& XsdSquareRootProcess1D::
level ()
{
  return this->level_;
}

inline
void XsdSquareRootProcess1D::
level (const level_type& x)
{
  this->level_.set (x);
}

inline
void XsdSquareRootProcess1D::
level (const level_optional& x)
{
  this->level_ = x;
}

inline
XsdSquareRootProcess1D::level_type XsdSquareRootProcess1D::
level_default_value ()
{
  return level_type (.0);
}

inline
const XsdSquareRootProcess1D::volatility_type& XsdSquareRootProcess1D::
volatility () const
{
  return this->volatility_.get ();
}

inline
XsdSquareRootProcess1D::volatility_type& XsdSquareRootProcess1D::
volatility ()
{
  return this->volatility_.get ();
}

inline
void XsdSquareRootProcess1D::
volatility (const volatility_type& x)
{
  this->volatility_.set (x);
}

inline
void XsdSquareRootProcess1D::
volatility (::std::auto_ptr< volatility_type > x)
{
  this->volatility_.set (x);
}

inline
const XsdSquareRootProcess1D::initial_optional& XsdSquareRootProcess1D::
initial () const
{
  return this->initial_;
}

inline
XsdSquareRootProcess1D::initial_optional& XsdSquareRootProcess1D::
initial ()
{
  return this->initial_;
}

inline
void XsdSquareRootProcess1D::
initial (const initial_type& x)
{
  this->initial_.set (x);
}

inline
void XsdSquareRootProcess1D::
initial (const initial_optional& x)
{
  this->initial_ = x;
}

inline
XsdSquareRootProcess1D::initial_type XsdSquareRootProcess1D::
initial_default_value ()
{
  return initial_type (.0);
}


// XsdVarianceGammaProcess1D
// 

inline
const XsdVarianceGammaProcess1D::sigma_optional& XsdVarianceGammaProcess1D::
sigma () const
{
  return this->sigma_;
}

inline
XsdVarianceGammaProcess1D::sigma_optional& XsdVarianceGammaProcess1D::
sigma ()
{
  return this->sigma_;
}

inline
void XsdVarianceGammaProcess1D::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

inline
void XsdVarianceGammaProcess1D::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}

inline
void XsdVarianceGammaProcess1D::
sigma (::std::auto_ptr< sigma_type > x)
{
  this->sigma_.set (x);
}

inline
XsdVarianceGammaProcess1D::sigma_type XsdVarianceGammaProcess1D::
sigma_default_value ()
{
  return sigma_type (1.0);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_STOCHASTIC_IXX
