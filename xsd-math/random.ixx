// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_RANDOM_IXX
#define CXX___SCHEMA_XSD_MATH_RANDOM_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdRandom
// 

inline
const XsdRandom::seed_optional& XsdRandom::
seed () const
{
  return this->seed_;
}

inline
XsdRandom::seed_optional& XsdRandom::
seed ()
{
  return this->seed_;
}

inline
void XsdRandom::
seed (const seed_type& x)
{
  this->seed_.set (x);
}

inline
void XsdRandom::
seed (const seed_optional& x)
{
  this->seed_ = x;
}

inline
XsdRandom::seed_type XsdRandom::
seed_default_value ()
{
  return seed_type (0ULL);
}

inline
const XsdRandom::skip_optional& XsdRandom::
skip () const
{
  return this->skip_;
}

inline
XsdRandom::skip_optional& XsdRandom::
skip ()
{
  return this->skip_;
}

inline
void XsdRandom::
skip (const skip_type& x)
{
  this->skip_.set (x);
}

inline
void XsdRandom::
skip (const skip_optional& x)
{
  this->skip_ = x;
}

inline
XsdRandom::skip_type XsdRandom::
skip_default_value ()
{
  return skip_type (0);
}

inline
const XsdRandom::split_optional& XsdRandom::
split () const
{
  return this->split_;
}

inline
XsdRandom::split_optional& XsdRandom::
split ()
{
  return this->split_;
}

inline
void XsdRandom::
split (const split_type& x)
{
  this->split_.set (x);
}

inline
void XsdRandom::
split (const split_optional& x)
{
  this->split_ = x;
}

inline
void XsdRandom::
split (::std::auto_ptr< split_type > x)
{
  this->split_.set (x);
}


// XsdPseudoRandom
// 

inline
const XsdPseudoRandom::fibonacci_optional& XsdPseudoRandom::
fibonacci () const
{
  return this->fibonacci_;
}

inline
XsdPseudoRandom::fibonacci_optional& XsdPseudoRandom::
fibonacci ()
{
  return this->fibonacci_;
}

inline
void XsdPseudoRandom::
fibonacci (const fibonacci_type& x)
{
  this->fibonacci_.set (x);
}

inline
void XsdPseudoRandom::
fibonacci (const fibonacci_optional& x)
{
  this->fibonacci_ = x;
}

inline
void XsdPseudoRandom::
fibonacci (::std::auto_ptr< fibonacci_type > x)
{
  this->fibonacci_.set (x);
}

inline
const XsdPseudoRandom::knuth_optional& XsdPseudoRandom::
knuth () const
{
  return this->knuth_;
}

inline
XsdPseudoRandom::knuth_optional& XsdPseudoRandom::
knuth ()
{
  return this->knuth_;
}

inline
void XsdPseudoRandom::
knuth (const knuth_type& x)
{
  this->knuth_.set (x);
}

inline
void XsdPseudoRandom::
knuth (const knuth_optional& x)
{
  this->knuth_ = x;
}

inline
void XsdPseudoRandom::
knuth (::std::auto_ptr< knuth_type > x)
{
  this->knuth_.set (x);
}

inline
const XsdPseudoRandom::ecuyer_optional& XsdPseudoRandom::
ecuyer () const
{
  return this->ecuyer_;
}

inline
XsdPseudoRandom::ecuyer_optional& XsdPseudoRandom::
ecuyer ()
{
  return this->ecuyer_;
}

inline
void XsdPseudoRandom::
ecuyer (const ecuyer_type& x)
{
  this->ecuyer_.set (x);
}

inline
void XsdPseudoRandom::
ecuyer (const ecuyer_optional& x)
{
  this->ecuyer_ = x;
}

inline
void XsdPseudoRandom::
ecuyer (::std::auto_ptr< ecuyer_type > x)
{
  this->ecuyer_.set (x);
}

inline
const XsdPseudoRandom::germain_optional& XsdPseudoRandom::
germain () const
{
  return this->germain_;
}

inline
XsdPseudoRandom::germain_optional& XsdPseudoRandom::
germain ()
{
  return this->germain_;
}

inline
void XsdPseudoRandom::
germain (const germain_type& x)
{
  this->germain_.set (x);
}

inline
void XsdPseudoRandom::
germain (const germain_optional& x)
{
  this->germain_ = x;
}

inline
void XsdPseudoRandom::
germain (::std::auto_ptr< germain_type > x)
{
  this->germain_.set (x);
}

inline
const XsdPseudoRandom::mersenne_optional& XsdPseudoRandom::
mersenne () const
{
  return this->mersenne_;
}

inline
XsdPseudoRandom::mersenne_optional& XsdPseudoRandom::
mersenne ()
{
  return this->mersenne_;
}

inline
void XsdPseudoRandom::
mersenne (const mersenne_type& x)
{
  this->mersenne_.set (x);
}

inline
void XsdPseudoRandom::
mersenne (const mersenne_optional& x)
{
  this->mersenne_ = x;
}

inline
void XsdPseudoRandom::
mersenne (::std::auto_ptr< mersenne_type > x)
{
  this->mersenne_.set (x);
}

inline
const XsdPseudoRandom::minstd_optional& XsdPseudoRandom::
minstd () const
{
  return this->minstd_;
}

inline
XsdPseudoRandom::minstd_optional& XsdPseudoRandom::
minstd ()
{
  return this->minstd_;
}

inline
void XsdPseudoRandom::
minstd (const minstd_type& x)
{
  this->minstd_.set (x);
}

inline
void XsdPseudoRandom::
minstd (const minstd_optional& x)
{
  this->minstd_ = x;
}

inline
void XsdPseudoRandom::
minstd (::std::auto_ptr< minstd_type > x)
{
  this->minstd_.set (x);
}

inline
const XsdPseudoRandom::tausworthe_optional& XsdPseudoRandom::
tausworthe () const
{
  return this->tausworthe_;
}

inline
XsdPseudoRandom::tausworthe_optional& XsdPseudoRandom::
tausworthe ()
{
  return this->tausworthe_;
}

inline
void XsdPseudoRandom::
tausworthe (const tausworthe_type& x)
{
  this->tausworthe_.set (x);
}

inline
void XsdPseudoRandom::
tausworthe (const tausworthe_optional& x)
{
  this->tausworthe_ = x;
}

inline
void XsdPseudoRandom::
tausworthe (::std::auto_ptr< tausworthe_type > x)
{
  this->tausworthe_.set (x);
}


// XsdQuasiRandom
// 

inline
const XsdQuasiRandom::faure_optional& XsdQuasiRandom::
faure () const
{
  return this->faure_;
}

inline
XsdQuasiRandom::faure_optional& XsdQuasiRandom::
faure ()
{
  return this->faure_;
}

inline
void XsdQuasiRandom::
faure (const faure_type& x)
{
  this->faure_.set (x);
}

inline
void XsdQuasiRandom::
faure (const faure_optional& x)
{
  this->faure_ = x;
}

inline
void XsdQuasiRandom::
faure (::std::auto_ptr< faure_type > x)
{
  this->faure_.set (x);
}

inline
const XsdQuasiRandom::halton_optional& XsdQuasiRandom::
halton () const
{
  return this->halton_;
}

inline
XsdQuasiRandom::halton_optional& XsdQuasiRandom::
halton ()
{
  return this->halton_;
}

inline
void XsdQuasiRandom::
halton (const halton_type& x)
{
  this->halton_.set (x);
}

inline
void XsdQuasiRandom::
halton (const halton_optional& x)
{
  this->halton_ = x;
}

inline
void XsdQuasiRandom::
halton (::std::auto_ptr< halton_type > x)
{
  this->halton_.set (x);
}

inline
const XsdQuasiRandom::niederreiter_optional& XsdQuasiRandom::
niederreiter () const
{
  return this->niederreiter_;
}

inline
XsdQuasiRandom::niederreiter_optional& XsdQuasiRandom::
niederreiter ()
{
  return this->niederreiter_;
}

inline
void XsdQuasiRandom::
niederreiter (const niederreiter_type& x)
{
  this->niederreiter_.set (x);
}

inline
void XsdQuasiRandom::
niederreiter (const niederreiter_optional& x)
{
  this->niederreiter_ = x;
}

inline
void XsdQuasiRandom::
niederreiter (::std::auto_ptr< niederreiter_type > x)
{
  this->niederreiter_.set (x);
}

inline
const XsdQuasiRandom::sobol_optional& XsdQuasiRandom::
sobol () const
{
  return this->sobol_;
}

inline
XsdQuasiRandom::sobol_optional& XsdQuasiRandom::
sobol ()
{
  return this->sobol_;
}

inline
void XsdQuasiRandom::
sobol (const sobol_type& x)
{
  this->sobol_.set (x);
}

inline
void XsdQuasiRandom::
sobol (const sobol_optional& x)
{
  this->sobol_ = x;
}

inline
void XsdQuasiRandom::
sobol (::std::auto_ptr< sobol_type > x)
{
  this->sobol_.set (x);
}

inline
const XsdQuasiRandom::dimension_optional& XsdQuasiRandom::
dimension () const
{
  return this->dimension_;
}

inline
XsdQuasiRandom::dimension_optional& XsdQuasiRandom::
dimension ()
{
  return this->dimension_;
}

inline
void XsdQuasiRandom::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

inline
void XsdQuasiRandom::
dimension (const dimension_optional& x)
{
  this->dimension_ = x;
}

inline
XsdQuasiRandom::dimension_type XsdQuasiRandom::
dimension_default_value ()
{
  return dimension_type (1ULL);
}


// XsdYarnPseudoRandom
// 

inline
const XsdYarnPseudoRandom::depth_optional& XsdYarnPseudoRandom::
depth () const
{
  return this->depth_;
}

inline
XsdYarnPseudoRandom::depth_optional& XsdYarnPseudoRandom::
depth ()
{
  return this->depth_;
}

inline
void XsdYarnPseudoRandom::
depth (const depth_type& x)
{
  this->depth_.set (x);
}

inline
void XsdYarnPseudoRandom::
depth (const depth_optional& x)
{
  this->depth_ = x;
}

inline
void XsdYarnPseudoRandom::
depth (::std::auto_ptr< depth_type > x)
{
  this->depth_.set (x);
}

inline
XsdYarnPseudoRandom::depth_type XsdYarnPseudoRandom::
depth_default_value ()
{
  return depth_type (2);
}


// XsdHaltonDetails
// 

inline
const XsdHaltonDetails::reverse_type& XsdHaltonDetails::
reverse () const
{
  return this->reverse_.get ();
}

inline
XsdHaltonDetails::reverse_type& XsdHaltonDetails::
reverse ()
{
  return this->reverse_.get ();
}

inline
void XsdHaltonDetails::
reverse (const reverse_type& x)
{
  this->reverse_.set (x);
}

inline
XsdHaltonDetails::reverse_type XsdHaltonDetails::
reverse_default_value ()
{
  return reverse_type (false);
}

inline
const XsdHaltonDetails::randomStart_type& XsdHaltonDetails::
randomStart () const
{
  return this->randomStart_.get ();
}

inline
XsdHaltonDetails::randomStart_type& XsdHaltonDetails::
randomStart ()
{
  return this->randomStart_.get ();
}

inline
void XsdHaltonDetails::
randomStart (const randomStart_type& x)
{
  this->randomStart_.set (x);
}

inline
XsdHaltonDetails::randomStart_type XsdHaltonDetails::
randomStart_default_value ()
{
  return randomStart_type (true);
}

inline
const XsdHaltonDetails::randomShift_type& XsdHaltonDetails::
randomShift () const
{
  return this->randomShift_.get ();
}

inline
XsdHaltonDetails::randomShift_type& XsdHaltonDetails::
randomShift ()
{
  return this->randomShift_.get ();
}

inline
void XsdHaltonDetails::
randomShift (const randomShift_type& x)
{
  this->randomShift_.set (x);
}

inline
XsdHaltonDetails::randomShift_type XsdHaltonDetails::
randomShift_default_value ()
{
  return randomShift_type (false);
}


// XsdSobolDetails
// 

inline
const XsdSobolDetails::directionIntegers_type& XsdSobolDetails::
directionIntegers () const
{
  return this->directionIntegers_.get ();
}

inline
XsdSobolDetails::directionIntegers_type& XsdSobolDetails::
directionIntegers ()
{
  return this->directionIntegers_.get ();
}

inline
void XsdSobolDetails::
directionIntegers (const directionIntegers_type& x)
{
  this->directionIntegers_.set (x);
}

inline
void XsdSobolDetails::
directionIntegers (::std::auto_ptr< directionIntegers_type > x)
{
  this->directionIntegers_.set (x);
}

inline
const XsdSobolDetails::directionIntegers_type& XsdSobolDetails::
directionIntegers_default_value ()
{
  return directionIntegers_default_value_;
}


// XsdRandomSplit
// 

inline
const XsdRandomSplit::index_type& XsdRandomSplit::
index () const
{
  return this->index_.get ();
}

inline
XsdRandomSplit::index_type& XsdRandomSplit::
index ()
{
  return this->index_.get ();
}

inline
void XsdRandomSplit::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
const XsdRandomSplit::cycle_type& XsdRandomSplit::
cycle () const
{
  return this->cycle_.get ();
}

inline
XsdRandomSplit::cycle_type& XsdRandomSplit::
cycle ()
{
  return this->cycle_.get ();
}

inline
void XsdRandomSplit::
cycle (const cycle_type& x)
{
  this->cycle_.set (x);
}


// XsdRandomTest
// 

inline
const XsdRandomTest::result_optional& XsdRandomTest::
result () const
{
  return this->result_;
}

inline
XsdRandomTest::result_optional& XsdRandomTest::
result ()
{
  return this->result_;
}

inline
void XsdRandomTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdRandomTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdRandomTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdRandomTest::rows_optional& XsdRandomTest::
rows () const
{
  return this->rows_;
}

inline
XsdRandomTest::rows_optional& XsdRandomTest::
rows ()
{
  return this->rows_;
}

inline
void XsdRandomTest::
rows (const rows_type& x)
{
  this->rows_.set (x);
}

inline
void XsdRandomTest::
rows (const rows_optional& x)
{
  this->rows_ = x;
}

inline
XsdRandomTest::rows_type XsdRandomTest::
rows_default_value ()
{
  return rows_type (1000ULL);
}

inline
const XsdRandomTest::random_type& XsdRandomTest::
random () const
{
  return this->random_.get ();
}

inline
XsdRandomTest::random_type& XsdRandomTest::
random ()
{
  return this->random_.get ();
}

inline
void XsdRandomTest::
random (const random_type& x)
{
  this->random_.set (x);
}

inline
void XsdRandomTest::
random (::std::auto_ptr< random_type > x)
{
  this->random_.set (x);
}


// depth
// 


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_RANDOM_IXX
