// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_QUADRATURE_IXX
#define CXX___SCHEMA_XSD_MATH_QUADRATURE_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

#include "random.ixx"

#include "functional.ixx"

// XsdQuadrature
// 

inline
const XsdQuadrature::error_optional& XsdQuadrature::
error () const
{
  return this->error_;
}

inline
XsdQuadrature::error_optional& XsdQuadrature::
error ()
{
  return this->error_;
}

inline
void XsdQuadrature::
error (const error_type& x)
{
  this->error_.set (x);
}

inline
void XsdQuadrature::
error (const error_optional& x)
{
  this->error_ = x;
}

inline
void XsdQuadrature::
error (::std::auto_ptr< error_type > x)
{
  this->error_.set (x);
}

inline
const XsdQuadrature::evals_optional& XsdQuadrature::
evals () const
{
  return this->evals_;
}

inline
XsdQuadrature::evals_optional& XsdQuadrature::
evals ()
{
  return this->evals_;
}

inline
void XsdQuadrature::
evals (const evals_type& x)
{
  this->evals_.set (x);
}

inline
void XsdQuadrature::
evals (const evals_optional& x)
{
  this->evals_ = x;
}

inline
void XsdQuadrature::
evals (::std::auto_ptr< evals_type > x)
{
  this->evals_.set (x);
}


// XsdQuadrature1D
// 

inline
const XsdQuadrature1D::limit_optional& XsdQuadrature1D::
limit () const
{
  return this->limit_;
}

inline
XsdQuadrature1D::limit_optional& XsdQuadrature1D::
limit ()
{
  return this->limit_;
}

inline
void XsdQuadrature1D::
limit (const limit_type& x)
{
  this->limit_.set (x);
}

inline
void XsdQuadrature1D::
limit (const limit_optional& x)
{
  this->limit_ = x;
}

inline
void XsdQuadrature1D::
limit (::std::auto_ptr< limit_type > x)
{
  this->limit_.set (x);
}

inline
XsdQuadrature1D::limit_type XsdQuadrature1D::
limit_default_value ()
{
  return limit_type (100);
}


// XsdAdaptiveQuadrature
// 


// XsdMonteCarloQuadrature
// 

inline
const XsdMonteCarloQuadrature::method_optional& XsdMonteCarloQuadrature::
method () const
{
  return this->method_;
}

inline
XsdMonteCarloQuadrature::method_optional& XsdMonteCarloQuadrature::
method ()
{
  return this->method_;
}

inline
void XsdMonteCarloQuadrature::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void XsdMonteCarloQuadrature::
method (const method_optional& x)
{
  this->method_ = x;
}

inline
void XsdMonteCarloQuadrature::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const XsdMonteCarloQuadrature::method_type& XsdMonteCarloQuadrature::
method_default_value ()
{
  return method_default_value_;
}

inline
const XsdMonteCarloQuadrature::calls_optional& XsdMonteCarloQuadrature::
calls () const
{
  return this->calls_;
}

inline
XsdMonteCarloQuadrature::calls_optional& XsdMonteCarloQuadrature::
calls ()
{
  return this->calls_;
}

inline
void XsdMonteCarloQuadrature::
calls (const calls_type& x)
{
  this->calls_.set (x);
}

inline
void XsdMonteCarloQuadrature::
calls (const calls_optional& x)
{
  this->calls_ = x;
}

inline
void XsdMonteCarloQuadrature::
calls (::std::auto_ptr< calls_type > x)
{
  this->calls_.set (x);
}

inline
XsdMonteCarloQuadrature::calls_type XsdMonteCarloQuadrature::
calls_default_value ()
{
  return calls_type (1000);
}

inline
const XsdMonteCarloQuadrature::random_optional& XsdMonteCarloQuadrature::
random () const
{
  return this->random_;
}

inline
XsdMonteCarloQuadrature::random_optional& XsdMonteCarloQuadrature::
random ()
{
  return this->random_;
}

inline
void XsdMonteCarloQuadrature::
random (const random_type& x)
{
  this->random_.set (x);
}

inline
void XsdMonteCarloQuadrature::
random (const random_optional& x)
{
  this->random_ = x;
}

inline
void XsdMonteCarloQuadrature::
random (::std::auto_ptr< random_type > x)
{
  this->random_.set (x);
}


// XsdRecursiveQuadrature
// 

inline
const XsdRecursiveQuadrature::rule1D_optional& XsdRecursiveQuadrature::
rule1D () const
{
  return this->rule1D_;
}

inline
XsdRecursiveQuadrature::rule1D_optional& XsdRecursiveQuadrature::
rule1D ()
{
  return this->rule1D_;
}

inline
void XsdRecursiveQuadrature::
rule1D (const rule1D_type& x)
{
  this->rule1D_.set (x);
}

inline
void XsdRecursiveQuadrature::
rule1D (const rule1D_optional& x)
{
  this->rule1D_ = x;
}

inline
void XsdRecursiveQuadrature::
rule1D (::std::auto_ptr< rule1D_type > x)
{
  this->rule1D_.set (x);
}


// XsdAdaptiveQuadrature1D
// 

inline
const XsdAdaptiveQuadrature1D::gaussKronrod_optional& XsdAdaptiveQuadrature1D::
gaussKronrod () const
{
  return this->gaussKronrod_;
}

inline
XsdAdaptiveQuadrature1D::gaussKronrod_optional& XsdAdaptiveQuadrature1D::
gaussKronrod ()
{
  return this->gaussKronrod_;
}

inline
void XsdAdaptiveQuadrature1D::
gaussKronrod (const gaussKronrod_type& x)
{
  this->gaussKronrod_.set (x);
}

inline
void XsdAdaptiveQuadrature1D::
gaussKronrod (const gaussKronrod_optional& x)
{
  this->gaussKronrod_ = x;
}

inline
void XsdAdaptiveQuadrature1D::
gaussKronrod (::std::auto_ptr< gaussKronrod_type > x)
{
  this->gaussKronrod_.set (x);
}

inline
const XsdAdaptiveQuadrature1D::clenshawCurtis_optional& XsdAdaptiveQuadrature1D::
clenshawCurtis () const
{
  return this->clenshawCurtis_;
}

inline
XsdAdaptiveQuadrature1D::clenshawCurtis_optional& XsdAdaptiveQuadrature1D::
clenshawCurtis ()
{
  return this->clenshawCurtis_;
}

inline
void XsdAdaptiveQuadrature1D::
clenshawCurtis (const clenshawCurtis_type& x)
{
  this->clenshawCurtis_.set (x);
}

inline
void XsdAdaptiveQuadrature1D::
clenshawCurtis (const clenshawCurtis_optional& x)
{
  this->clenshawCurtis_ = x;
}

inline
void XsdAdaptiveQuadrature1D::
clenshawCurtis (::std::auto_ptr< clenshawCurtis_type > x)
{
  this->clenshawCurtis_.set (x);
}


// XsdGaussianQuadrature1D
// 


// XsdGaussKronrodDetails
// 

inline
const XsdGaussKronrodDetails::singularities_optional& XsdGaussKronrodDetails::
singularities () const
{
  return this->singularities_;
}

inline
XsdGaussKronrodDetails::singularities_optional& XsdGaussKronrodDetails::
singularities ()
{
  return this->singularities_;
}

inline
void XsdGaussKronrodDetails::
singularities (const singularities_type& x)
{
  this->singularities_.set (x);
}

inline
void XsdGaussKronrodDetails::
singularities (const singularities_optional& x)
{
  this->singularities_ = x;
}

inline
void XsdGaussKronrodDetails::
singularities (::std::auto_ptr< singularities_type > x)
{
  this->singularities_.set (x);
}

inline
const XsdGaussKronrodDetails::order_type& XsdGaussKronrodDetails::
order () const
{
  return this->order_.get ();
}

inline
XsdGaussKronrodDetails::order_type& XsdGaussKronrodDetails::
order ()
{
  return this->order_.get ();
}

inline
void XsdGaussKronrodDetails::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
void XsdGaussKronrodDetails::
order (::std::auto_ptr< order_type > x)
{
  this->order_.set (x);
}

inline
const XsdGaussKronrodDetails::order_type& XsdGaussKronrodDetails::
order_default_value ()
{
  return order_default_value_;
}

inline
const XsdGaussKronrodDetails::singular_type& XsdGaussKronrodDetails::
singular () const
{
  return this->singular_.get ();
}

inline
XsdGaussKronrodDetails::singular_type& XsdGaussKronrodDetails::
singular ()
{
  return this->singular_.get ();
}

inline
void XsdGaussKronrodDetails::
singular (const singular_type& x)
{
  this->singular_.set (x);
}

inline
XsdGaussKronrodDetails::singular_type XsdGaussKronrodDetails::
singular_default_value ()
{
  return singular_type (false);
}


// XsdQuadratureEvals
// 

inline
const XsdQuadratureEvals::lower_optional& XsdQuadratureEvals::
lower () const
{
  return this->lower_;
}

inline
XsdQuadratureEvals::lower_optional& XsdQuadratureEvals::
lower ()
{
  return this->lower_;
}

inline
void XsdQuadratureEvals::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdQuadratureEvals::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
XsdQuadratureEvals::lower_type XsdQuadratureEvals::
lower_default_value ()
{
  return lower_type (10ULL);
}

inline
const XsdQuadratureEvals::upper_optional& XsdQuadratureEvals::
upper () const
{
  return this->upper_;
}

inline
XsdQuadratureEvals::upper_optional& XsdQuadratureEvals::
upper ()
{
  return this->upper_;
}

inline
void XsdQuadratureEvals::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdQuadratureEvals::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
XsdQuadratureEvals::upper_type XsdQuadratureEvals::
upper_default_value ()
{
  return upper_type (100000ULL);
}


// XsdQuadratureResult
// 

inline
const XsdQuadratureResult::accuracy_optional& XsdQuadratureResult::
accuracy () const
{
  return this->accuracy_;
}

inline
XsdQuadratureResult::accuracy_optional& XsdQuadratureResult::
accuracy ()
{
  return this->accuracy_;
}

inline
void XsdQuadratureResult::
accuracy (const accuracy_type& x)
{
  this->accuracy_.set (x);
}

inline
void XsdQuadratureResult::
accuracy (const accuracy_optional& x)
{
  this->accuracy_ = x;
}


// XsdQuadratureTest
// 

inline
const XsdQuadratureTest::result_optional& XsdQuadratureTest::
result () const
{
  return this->result_;
}

inline
XsdQuadratureTest::result_optional& XsdQuadratureTest::
result ()
{
  return this->result_;
}

inline
void XsdQuadratureTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdQuadratureTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdQuadratureTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdQuadratureTest::function_type& XsdQuadratureTest::
function () const
{
  return this->function_.get ();
}

inline
XsdQuadratureTest::function_type& XsdQuadratureTest::
function ()
{
  return this->function_.get ();
}

inline
void XsdQuadratureTest::
function (const function_type& x)
{
  this->function_.set (x);
}

inline
void XsdQuadratureTest::
function (::std::auto_ptr< function_type > x)
{
  this->function_.set (x);
}

inline
const XsdQuadratureTest::bounds_sequence& XsdQuadratureTest::
bounds () const
{
  return this->bounds_;
}

inline
XsdQuadratureTest::bounds_sequence& XsdQuadratureTest::
bounds ()
{
  return this->bounds_;
}

inline
void XsdQuadratureTest::
bounds (const bounds_sequence& s)
{
  this->bounds_ = s;
}

inline
const XsdQuadratureTest::quadrature_type& XsdQuadratureTest::
quadrature () const
{
  return this->quadrature_.get ();
}

inline
XsdQuadratureTest::quadrature_type& XsdQuadratureTest::
quadrature ()
{
  return this->quadrature_.get ();
}

inline
void XsdQuadratureTest::
quadrature (const quadrature_type& x)
{
  this->quadrature_.set (x);
}

inline
void XsdQuadratureTest::
quadrature (::std::auto_ptr< quadrature_type > x)
{
  this->quadrature_.set (x);
}


// XsdQuadratureTest1D
// 

inline
const XsdQuadratureTest1D::result_optional& XsdQuadratureTest1D::
result () const
{
  return this->result_;
}

inline
XsdQuadratureTest1D::result_optional& XsdQuadratureTest1D::
result ()
{
  return this->result_;
}

inline
void XsdQuadratureTest1D::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdQuadratureTest1D::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdQuadratureTest1D::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdQuadratureTest1D::function_type& XsdQuadratureTest1D::
function () const
{
  return this->function_.get ();
}

inline
XsdQuadratureTest1D::function_type& XsdQuadratureTest1D::
function ()
{
  return this->function_.get ();
}

inline
void XsdQuadratureTest1D::
function (const function_type& x)
{
  this->function_.set (x);
}

inline
void XsdQuadratureTest1D::
function (::std::auto_ptr< function_type > x)
{
  this->function_.set (x);
}

inline
const XsdQuadratureTest1D::bounds_type& XsdQuadratureTest1D::
bounds () const
{
  return this->bounds_.get ();
}

inline
XsdQuadratureTest1D::bounds_type& XsdQuadratureTest1D::
bounds ()
{
  return this->bounds_.get ();
}

inline
void XsdQuadratureTest1D::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdQuadratureTest1D::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdQuadratureTest1D::quadrature_type& XsdQuadratureTest1D::
quadrature () const
{
  return this->quadrature_.get ();
}

inline
XsdQuadratureTest1D::quadrature_type& XsdQuadratureTest1D::
quadrature ()
{
  return this->quadrature_.get ();
}

inline
void XsdQuadratureTest1D::
quadrature (const quadrature_type& x)
{
  this->quadrature_.set (x);
}

inline
void XsdQuadratureTest1D::
quadrature (::std::auto_ptr< quadrature_type > x)
{
  this->quadrature_.set (x);
}


// limit
// 


// calls
// 


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_QUADRATURE_IXX
