// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_INTERPOLATION_IXX
#define CXX___SCHEMA_XSD_MATH_INTERPOLATION_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdInterpolate
// 

inline
const XsdInterpolate::ABCD_optional& XsdInterpolate::
ABCD () const
{
  return this->ABCD_;
}

inline
XsdInterpolate::ABCD_optional& XsdInterpolate::
ABCD ()
{
  return this->ABCD_;
}

inline
void XsdInterpolate::
ABCD (const ABCD_type& x)
{
  this->ABCD_.set (x);
}

inline
void XsdInterpolate::
ABCD (const ABCD_optional& x)
{
  this->ABCD_ = x;
}

inline
void XsdInterpolate::
ABCD (::std::auto_ptr< ABCD_type > x)
{
  this->ABCD_.set (x);
}

inline
const XsdInterpolate::backwardFlat_optional& XsdInterpolate::
backwardFlat () const
{
  return this->backwardFlat_;
}

inline
XsdInterpolate::backwardFlat_optional& XsdInterpolate::
backwardFlat ()
{
  return this->backwardFlat_;
}

inline
void XsdInterpolate::
backwardFlat (const backwardFlat_type& x)
{
  this->backwardFlat_.set (x);
}

inline
void XsdInterpolate::
backwardFlat (const backwardFlat_optional& x)
{
  this->backwardFlat_ = x;
}

inline
void XsdInterpolate::
backwardFlat (::std::auto_ptr< backwardFlat_type > x)
{
  this->backwardFlat_.set (x);
}

inline
const XsdInterpolate::bspline_optional& XsdInterpolate::
bspline () const
{
  return this->bspline_;
}

inline
XsdInterpolate::bspline_optional& XsdInterpolate::
bspline ()
{
  return this->bspline_;
}

inline
void XsdInterpolate::
bspline (const bspline_type& x)
{
  this->bspline_.set (x);
}

inline
void XsdInterpolate::
bspline (const bspline_optional& x)
{
  this->bspline_ = x;
}

inline
void XsdInterpolate::
bspline (::std::auto_ptr< bspline_type > x)
{
  this->bspline_.set (x);
}

inline
const XsdInterpolate::convex_optional& XsdInterpolate::
convex () const
{
  return this->convex_;
}

inline
XsdInterpolate::convex_optional& XsdInterpolate::
convex ()
{
  return this->convex_;
}

inline
void XsdInterpolate::
convex (const convex_type& x)
{
  this->convex_.set (x);
}

inline
void XsdInterpolate::
convex (const convex_optional& x)
{
  this->convex_ = x;
}

inline
void XsdInterpolate::
convex (::std::auto_ptr< convex_type > x)
{
  this->convex_.set (x);
}

inline
const XsdInterpolate::cubic_optional& XsdInterpolate::
cubic () const
{
  return this->cubic_;
}

inline
XsdInterpolate::cubic_optional& XsdInterpolate::
cubic ()
{
  return this->cubic_;
}

inline
void XsdInterpolate::
cubic (const cubic_type& x)
{
  this->cubic_.set (x);
}

inline
void XsdInterpolate::
cubic (const cubic_optional& x)
{
  this->cubic_ = x;
}

inline
void XsdInterpolate::
cubic (::std::auto_ptr< cubic_type > x)
{
  this->cubic_.set (x);
}

inline
const XsdInterpolate::forwardFlat_optional& XsdInterpolate::
forwardFlat () const
{
  return this->forwardFlat_;
}

inline
XsdInterpolate::forwardFlat_optional& XsdInterpolate::
forwardFlat ()
{
  return this->forwardFlat_;
}

inline
void XsdInterpolate::
forwardFlat (const forwardFlat_type& x)
{
  this->forwardFlat_.set (x);
}

inline
void XsdInterpolate::
forwardFlat (const forwardFlat_optional& x)
{
  this->forwardFlat_ = x;
}

inline
void XsdInterpolate::
forwardFlat (::std::auto_ptr< forwardFlat_type > x)
{
  this->forwardFlat_.set (x);
}

inline
const XsdInterpolate::linear_optional& XsdInterpolate::
linear () const
{
  return this->linear_;
}

inline
XsdInterpolate::linear_optional& XsdInterpolate::
linear ()
{
  return this->linear_;
}

inline
void XsdInterpolate::
linear (const linear_type& x)
{
  this->linear_.set (x);
}

inline
void XsdInterpolate::
linear (const linear_optional& x)
{
  this->linear_ = x;
}

inline
void XsdInterpolate::
linear (::std::auto_ptr< linear_type > x)
{
  this->linear_.set (x);
}

inline
const XsdInterpolate::logLinear_optional& XsdInterpolate::
logLinear () const
{
  return this->logLinear_;
}

inline
XsdInterpolate::logLinear_optional& XsdInterpolate::
logLinear ()
{
  return this->logLinear_;
}

inline
void XsdInterpolate::
logLinear (const logLinear_type& x)
{
  this->logLinear_.set (x);
}

inline
void XsdInterpolate::
logLinear (const logLinear_optional& x)
{
  this->logLinear_ = x;
}

inline
void XsdInterpolate::
logLinear (::std::auto_ptr< logLinear_type > x)
{
  this->logLinear_.set (x);
}

inline
const XsdInterpolate::SABR_optional& XsdInterpolate::
SABR () const
{
  return this->SABR_;
}

inline
XsdInterpolate::SABR_optional& XsdInterpolate::
SABR ()
{
  return this->SABR_;
}

inline
void XsdInterpolate::
SABR (const SABR_type& x)
{
  this->SABR_.set (x);
}

inline
void XsdInterpolate::
SABR (const SABR_optional& x)
{
  this->SABR_ = x;
}

inline
void XsdInterpolate::
SABR (::std::auto_ptr< SABR_type > x)
{
  this->SABR_.set (x);
}


// XsdAbcdInterpolation
// 

inline
const XsdAbcdInterpolation::A_type& XsdAbcdInterpolation::
A () const
{
  return this->A_.get ();
}

inline
XsdAbcdInterpolation::A_type& XsdAbcdInterpolation::
A ()
{
  return this->A_.get ();
}

inline
void XsdAbcdInterpolation::
A (const A_type& x)
{
  this->A_.set (x);
}

inline
void XsdAbcdInterpolation::
A (::std::auto_ptr< A_type > x)
{
  this->A_.set (x);
}

inline
const XsdAbcdInterpolation::B_type& XsdAbcdInterpolation::
B () const
{
  return this->B_.get ();
}

inline
XsdAbcdInterpolation::B_type& XsdAbcdInterpolation::
B ()
{
  return this->B_.get ();
}

inline
void XsdAbcdInterpolation::
B (const B_type& x)
{
  this->B_.set (x);
}

inline
void XsdAbcdInterpolation::
B (::std::auto_ptr< B_type > x)
{
  this->B_.set (x);
}

inline
const XsdAbcdInterpolation::C_type& XsdAbcdInterpolation::
C () const
{
  return this->C_.get ();
}

inline
XsdAbcdInterpolation::C_type& XsdAbcdInterpolation::
C ()
{
  return this->C_.get ();
}

inline
void XsdAbcdInterpolation::
C (const C_type& x)
{
  this->C_.set (x);
}

inline
void XsdAbcdInterpolation::
C (::std::auto_ptr< C_type > x)
{
  this->C_.set (x);
}

inline
const XsdAbcdInterpolation::D_type& XsdAbcdInterpolation::
D () const
{
  return this->D_.get ();
}

inline
XsdAbcdInterpolation::D_type& XsdAbcdInterpolation::
D ()
{
  return this->D_.get ();
}

inline
void XsdAbcdInterpolation::
D (const D_type& x)
{
  this->D_.set (x);
}

inline
void XsdAbcdInterpolation::
D (::std::auto_ptr< D_type > x)
{
  this->D_.set (x);
}

inline
const XsdAbcdInterpolation::vegaWeighted_optional& XsdAbcdInterpolation::
vegaWeighted () const
{
  return this->vegaWeighted_;
}

inline
XsdAbcdInterpolation::vegaWeighted_optional& XsdAbcdInterpolation::
vegaWeighted ()
{
  return this->vegaWeighted_;
}

inline
void XsdAbcdInterpolation::
vegaWeighted (const vegaWeighted_type& x)
{
  this->vegaWeighted_.set (x);
}

inline
void XsdAbcdInterpolation::
vegaWeighted (const vegaWeighted_optional& x)
{
  this->vegaWeighted_ = x;
}

inline
XsdAbcdInterpolation::vegaWeighted_type XsdAbcdInterpolation::
vegaWeighted_default_value ()
{
  return vegaWeighted_type (false);
}


// XsdBackwardFlatInterpolation
// 


// XsdBSplineInterpolation
// 

inline
const XsdBSplineInterpolation::order_type& XsdBSplineInterpolation::
order () const
{
  return this->order_.get ();
}

inline
XsdBSplineInterpolation::order_type& XsdBSplineInterpolation::
order ()
{
  return this->order_.get ();
}

inline
void XsdBSplineInterpolation::
order (const order_type& x)
{
  this->order_.set (x);
}

inline
XsdBSplineInterpolation::order_type XsdBSplineInterpolation::
order_default_value ()
{
  return order_type (4ULL);
}


// XsdConvexInterpolation
// 

inline
const XsdConvexInterpolation::quadraticity_type& XsdConvexInterpolation::
quadraticity () const
{
  return this->quadraticity_.get ();
}

inline
XsdConvexInterpolation::quadraticity_type& XsdConvexInterpolation::
quadraticity ()
{
  return this->quadraticity_.get ();
}

inline
void XsdConvexInterpolation::
quadraticity (const quadraticity_type& x)
{
  this->quadraticity_.set (x);
}

inline
XsdConvexInterpolation::quadraticity_type XsdConvexInterpolation::
quadraticity_default_value ()
{
  return quadraticity_type (.3);
}

inline
const XsdConvexInterpolation::monotonicity_type& XsdConvexInterpolation::
monotonicity () const
{
  return this->monotonicity_.get ();
}

inline
XsdConvexInterpolation::monotonicity_type& XsdConvexInterpolation::
monotonicity ()
{
  return this->monotonicity_.get ();
}

inline
void XsdConvexInterpolation::
monotonicity (const monotonicity_type& x)
{
  this->monotonicity_.set (x);
}

inline
XsdConvexInterpolation::monotonicity_type XsdConvexInterpolation::
monotonicity_default_value ()
{
  return monotonicity_type (.7);
}

inline
const XsdConvexInterpolation::positivity_type& XsdConvexInterpolation::
positivity () const
{
  return this->positivity_.get ();
}

inline
XsdConvexInterpolation::positivity_type& XsdConvexInterpolation::
positivity ()
{
  return this->positivity_.get ();
}

inline
void XsdConvexInterpolation::
positivity (const positivity_type& x)
{
  this->positivity_.set (x);
}

inline
XsdConvexInterpolation::positivity_type XsdConvexInterpolation::
positivity_default_value ()
{
  return positivity_type (false);
}


// XsdCubicInterpolation
// 

inline
const XsdCubicInterpolation::boundary_optional& XsdCubicInterpolation::
boundary () const
{
  return this->boundary_;
}

inline
XsdCubicInterpolation::boundary_optional& XsdCubicInterpolation::
boundary ()
{
  return this->boundary_;
}

inline
void XsdCubicInterpolation::
boundary (const boundary_type& x)
{
  this->boundary_.set (x);
}

inline
void XsdCubicInterpolation::
boundary (const boundary_optional& x)
{
  this->boundary_ = x;
}

inline
void XsdCubicInterpolation::
boundary (::std::auto_ptr< boundary_type > x)
{
  this->boundary_.set (x);
}

inline
const XsdCubicInterpolation::derivative_type& XsdCubicInterpolation::
derivative () const
{
  return this->derivative_.get ();
}

inline
XsdCubicInterpolation::derivative_type& XsdCubicInterpolation::
derivative ()
{
  return this->derivative_.get ();
}

inline
void XsdCubicInterpolation::
derivative (const derivative_type& x)
{
  this->derivative_.set (x);
}

inline
void XsdCubicInterpolation::
derivative (::std::auto_ptr< derivative_type > x)
{
  this->derivative_.set (x);
}

inline
const XsdCubicInterpolation::derivative_type& XsdCubicInterpolation::
derivative_default_value ()
{
  return derivative_default_value_;
}

inline
const XsdCubicInterpolation::monotone_type& XsdCubicInterpolation::
monotone () const
{
  return this->monotone_.get ();
}

inline
XsdCubicInterpolation::monotone_type& XsdCubicInterpolation::
monotone ()
{
  return this->monotone_.get ();
}

inline
void XsdCubicInterpolation::
monotone (const monotone_type& x)
{
  this->monotone_.set (x);
}

inline
XsdCubicInterpolation::monotone_type XsdCubicInterpolation::
monotone_default_value ()
{
  return monotone_type (false);
}


// XsdForwardFlatInterpolation
// 


// XsdLinearInterpolation
// 


// XsdLogLinearInterpolation
// 


// XsdSabrInterpolation
// 

inline
const XsdSabrInterpolation::time_type& XsdSabrInterpolation::
time () const
{
  return this->time_.get ();
}

inline
XsdSabrInterpolation::time_type& XsdSabrInterpolation::
time ()
{
  return this->time_.get ();
}

inline
void XsdSabrInterpolation::
time (const time_type& x)
{
  this->time_.set (x);
}

inline
const XsdSabrInterpolation::forward_type& XsdSabrInterpolation::
forward () const
{
  return this->forward_.get ();
}

inline
XsdSabrInterpolation::forward_type& XsdSabrInterpolation::
forward ()
{
  return this->forward_.get ();
}

inline
void XsdSabrInterpolation::
forward (const forward_type& x)
{
  this->forward_.set (x);
}

inline
const XsdSabrInterpolation::alpha_type& XsdSabrInterpolation::
alpha () const
{
  return this->alpha_.get ();
}

inline
XsdSabrInterpolation::alpha_type& XsdSabrInterpolation::
alpha ()
{
  return this->alpha_.get ();
}

inline
void XsdSabrInterpolation::
alpha (const alpha_type& x)
{
  this->alpha_.set (x);
}

inline
void XsdSabrInterpolation::
alpha (::std::auto_ptr< alpha_type > x)
{
  this->alpha_.set (x);
}

inline
const XsdSabrInterpolation::beta_type& XsdSabrInterpolation::
beta () const
{
  return this->beta_.get ();
}

inline
XsdSabrInterpolation::beta_type& XsdSabrInterpolation::
beta ()
{
  return this->beta_.get ();
}

inline
void XsdSabrInterpolation::
beta (const beta_type& x)
{
  this->beta_.set (x);
}

inline
void XsdSabrInterpolation::
beta (::std::auto_ptr< beta_type > x)
{
  this->beta_.set (x);
}

inline
const XsdSabrInterpolation::nu_type& XsdSabrInterpolation::
nu () const
{
  return this->nu_.get ();
}

inline
XsdSabrInterpolation::nu_type& XsdSabrInterpolation::
nu ()
{
  return this->nu_.get ();
}

inline
void XsdSabrInterpolation::
nu (const nu_type& x)
{
  this->nu_.set (x);
}

inline
void XsdSabrInterpolation::
nu (::std::auto_ptr< nu_type > x)
{
  this->nu_.set (x);
}

inline
const XsdSabrInterpolation::rho_type& XsdSabrInterpolation::
rho () const
{
  return this->rho_.get ();
}

inline
XsdSabrInterpolation::rho_type& XsdSabrInterpolation::
rho ()
{
  return this->rho_.get ();
}

inline
void XsdSabrInterpolation::
rho (const rho_type& x)
{
  this->rho_.set (x);
}

inline
void XsdSabrInterpolation::
rho (::std::auto_ptr< rho_type > x)
{
  this->rho_.set (x);
}

inline
const XsdSabrInterpolation::vegaWeighted_optional& XsdSabrInterpolation::
vegaWeighted () const
{
  return this->vegaWeighted_;
}

inline
XsdSabrInterpolation::vegaWeighted_optional& XsdSabrInterpolation::
vegaWeighted ()
{
  return this->vegaWeighted_;
}

inline
void XsdSabrInterpolation::
vegaWeighted (const vegaWeighted_type& x)
{
  this->vegaWeighted_.set (x);
}

inline
void XsdSabrInterpolation::
vegaWeighted (const vegaWeighted_optional& x)
{
  this->vegaWeighted_ = x;
}

inline
XsdSabrInterpolation::vegaWeighted_type XsdSabrInterpolation::
vegaWeighted_default_value ()
{
  return vegaWeighted_type (false);
}


// XsdCubicSplineBoundary
// 

inline
const XsdCubicSplineBoundary::type_type& XsdCubicSplineBoundary::
type () const
{
  return this->type_.get ();
}

inline
XsdCubicSplineBoundary::type_type& XsdCubicSplineBoundary::
type ()
{
  return this->type_.get ();
}

inline
void XsdCubicSplineBoundary::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdCubicSplineBoundary::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const XsdCubicSplineBoundary::type_type& XsdCubicSplineBoundary::
type_default_value ()
{
  return type_default_value_;
}

inline
const XsdCubicSplineBoundary::value_type& XsdCubicSplineBoundary::
value () const
{
  return this->value_.get ();
}

inline
XsdCubicSplineBoundary::value_type& XsdCubicSplineBoundary::
value ()
{
  return this->value_.get ();
}

inline
void XsdCubicSplineBoundary::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
XsdCubicSplineBoundary::value_type XsdCubicSplineBoundary::
value_default_value ()
{
  return value_type (.0);
}


// XsdCubicSplineBoundaryPair
// 

inline
const XsdCubicSplineBoundaryPair::lower_optional& XsdCubicSplineBoundaryPair::
lower () const
{
  return this->lower_;
}

inline
XsdCubicSplineBoundaryPair::lower_optional& XsdCubicSplineBoundaryPair::
lower ()
{
  return this->lower_;
}

inline
void XsdCubicSplineBoundaryPair::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdCubicSplineBoundaryPair::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdCubicSplineBoundaryPair::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdCubicSplineBoundaryPair::upper_optional& XsdCubicSplineBoundaryPair::
upper () const
{
  return this->upper_;
}

inline
XsdCubicSplineBoundaryPair::upper_optional& XsdCubicSplineBoundaryPair::
upper ()
{
  return this->upper_;
}

inline
void XsdCubicSplineBoundaryPair::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdCubicSplineBoundaryPair::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdCubicSplineBoundaryPair::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}


// XsdInterpolationParameter
// 

inline
const XsdInterpolationParameter::fixed_type& XsdInterpolationParameter::
fixed () const
{
  return this->fixed_.get ();
}

inline
XsdInterpolationParameter::fixed_type& XsdInterpolationParameter::
fixed ()
{
  return this->fixed_.get ();
}

inline
void XsdInterpolationParameter::
fixed (const fixed_type& x)
{
  this->fixed_.set (x);
}

inline
XsdInterpolationParameter::fixed_type XsdInterpolationParameter::
fixed_default_value ()
{
  return fixed_type (false);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_INTERPOLATION_IXX
