// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "constraint.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

#include <xsd/cxx/tree/comparison-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;

  static
  const ::xsd::cxx::tree::comparison_plate< 0, char >
  comparison_plate_init;
}

// XsdConstraints
//

XsdConstraints::
XsdConstraints ()
: ::xml_schema::type (),
  bound_ (::xml_schema::flags (), this),
  linear_ (::xml_schema::flags (), this),
  nonlinear_ (::xml_schema::flags (), this)
{
}

XsdConstraints::
XsdConstraints (const XsdConstraints& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  bound_ (x.bound_, f, this),
  linear_ (x.linear_, f, this),
  nonlinear_ (x.nonlinear_, f, this)
{
}

XsdConstraints::
XsdConstraints (const xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  bound_ (f, this),
  linear_ (f, this),
  nonlinear_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void XsdConstraints::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // bound
    //
    if (n.name () == "bound" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< bound_type > r (
        bound_traits::create (i, f, this));

      this->bound_.push_back (r);
      continue;
    }

    // linear
    //
    if (n.name () == "linear" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< linear_type > r (
        linear_traits::create (i, f, this));

      if (!this->linear_)
      {
        this->linear_.set (r);
        continue;
      }
    }

    // nonlinear
    //
    if (n.name () == "nonlinear" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nonlinear_type > r (
        nonlinear_traits::create (i, f, this));

      if (!this->nonlinear_)
      {
        this->nonlinear_.set (r);
        continue;
      }
    }

    break;
  }
}

XsdConstraints* XsdConstraints::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdConstraints (*this, f, c);
}

XsdConstraints::
~XsdConstraints ()
{
}

bool
operator== (const XsdConstraints& x, const XsdConstraints& y)
{
  if (!(x.bound () == y.bound ()))
    return false;

  if (!(x.linear () == y.linear ()))
    return false;

  if (!(x.nonlinear () == y.nonlinear ()))
    return false;

  return true;
}

bool
operator!= (const XsdConstraints& x, const XsdConstraints& y)
{
  return !(x == y);
}

// XsdLinearConstraint
//

XsdLinearConstraint::
XsdLinearConstraint ()
: ::XsdDoubleVector (),
  value_ (value_default_value (), ::xml_schema::flags (), this),
  tolerance_ (tolerance_default_value (), ::xml_schema::flags (), this)
{
}

XsdLinearConstraint::
XsdLinearConstraint (const ::XsdDoubleVector& _xsd_XsdDoubleVector_base)
: ::XsdDoubleVector (_xsd_XsdDoubleVector_base),
  value_ (value_default_value (), ::xml_schema::flags (), this),
  tolerance_ (tolerance_default_value (), ::xml_schema::flags (), this)
{
}

XsdLinearConstraint::
XsdLinearConstraint (const XsdLinearConstraint& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::XsdDoubleVector (x, f, c),
  value_ (x.value_, f, this),
  tolerance_ (x.tolerance_, f, this)
{
}

XsdLinearConstraint::
XsdLinearConstraint (const xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
: ::XsdDoubleVector (e, f | ::xml_schema::flags::base, c),
  value_ (f, this),
  tolerance_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void XsdLinearConstraint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (value_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "tolerance" && n.namespace_ ().empty ())
    {
      this->tolerance_.set (tolerance_traits::create (i, f, this));
      continue;
    }
  }

  if (!value_.present ())
  {
    this->value_.set (value_default_value ());
  }

  if (!tolerance_.present ())
  {
    this->tolerance_.set (tolerance_default_value ());
  }
}

XsdLinearConstraint* XsdLinearConstraint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdLinearConstraint (*this, f, c);
}

XsdLinearConstraint::
~XsdLinearConstraint ()
{
}

bool
operator== (const XsdLinearConstraint& x, const XsdLinearConstraint& y)
{
  if (!(static_cast< const ::XsdDoubleVector& > (x) ==
        static_cast< const ::XsdDoubleVector& > (y)))
    return false;

  if (!(x.value () == y.value ()))
    return false;

  if (!(x.tolerance () == y.tolerance ()))
    return false;

  return true;
}

bool
operator!= (const XsdLinearConstraint& x, const XsdLinearConstraint& y)
{
  return !(x == y);
}

// XsdLinearConstraintPair
//

XsdLinearConstraintPair::
XsdLinearConstraintPair ()
: ::xml_schema::type (),
  equality_ (::xml_schema::flags (), this),
  inequality_ (::xml_schema::flags (), this)
{
}

XsdLinearConstraintPair::
XsdLinearConstraintPair (const XsdLinearConstraintPair& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  equality_ (x.equality_, f, this),
  inequality_ (x.inequality_, f, this)
{
}

XsdLinearConstraintPair::
XsdLinearConstraintPair (const xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  equality_ (f, this),
  inequality_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void XsdLinearConstraintPair::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // equality
    //
    if (n.name () == "equality" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< equality_type > r (
        equality_traits::create (i, f, this));

      this->equality_.push_back (r);
      continue;
    }

    // inequality
    //
    if (n.name () == "inequality" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< inequality_type > r (
        inequality_traits::create (i, f, this));

      this->inequality_.push_back (r);
      continue;
    }

    break;
  }
}

XsdLinearConstraintPair* XsdLinearConstraintPair::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdLinearConstraintPair (*this, f, c);
}

XsdLinearConstraintPair::
~XsdLinearConstraintPair ()
{
}

bool
operator== (const XsdLinearConstraintPair& x, const XsdLinearConstraintPair& y)
{
  if (!(x.equality () == y.equality ()))
    return false;

  if (!(x.inequality () == y.inequality ()))
    return false;

  return true;
}

bool
operator!= (const XsdLinearConstraintPair& x, const XsdLinearConstraintPair& y)
{
  return !(x == y);
}

// XsdNonLinearConstraint
//

XsdNonLinearConstraint::
XsdNonLinearConstraint ()
: ::xml_schema::type (),
  function_ (::xml_schema::flags (), this),
  value_ (value_default_value (), ::xml_schema::flags (), this),
  tolerance_ (tolerance_default_value (), ::xml_schema::flags (), this),
  gradient_ (gradient_default_value (), ::xml_schema::flags (), this)
{
}

XsdNonLinearConstraint::
XsdNonLinearConstraint (const function_type& function)
: ::xml_schema::type (),
  function_ (function, ::xml_schema::flags (), this),
  value_ (value_default_value (), ::xml_schema::flags (), this),
  tolerance_ (tolerance_default_value (), ::xml_schema::flags (), this),
  gradient_ (gradient_default_value (), ::xml_schema::flags (), this)
{
}

XsdNonLinearConstraint::
XsdNonLinearConstraint (::std::auto_ptr< function_type >& function)
: ::xml_schema::type (),
  function_ (function, ::xml_schema::flags (), this),
  value_ (value_default_value (), ::xml_schema::flags (), this),
  tolerance_ (tolerance_default_value (), ::xml_schema::flags (), this),
  gradient_ (gradient_default_value (), ::xml_schema::flags (), this)
{
}

XsdNonLinearConstraint::
XsdNonLinearConstraint (const XsdNonLinearConstraint& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  function_ (x.function_, f, this),
  value_ (x.value_, f, this),
  tolerance_ (x.tolerance_, f, this),
  gradient_ (x.gradient_, f, this)
{
}

XsdNonLinearConstraint::
XsdNonLinearConstraint (const xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  function_ (f, this),
  value_ (f, this),
  tolerance_ (f, this),
  gradient_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void XsdNonLinearConstraint::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // function
    //
    {
      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "function",
          "",
          &::xsd::cxx::tree::factory_impl< function_type >,
          false, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        if (!function_.present ())
        {
          ::std::auto_ptr< function_type > r (
            dynamic_cast< function_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->function_.set (r);
          continue;
        }
      }
    }

    break;
  }

  if (!function_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "function",
      "");
  }

  while (p.more_attributes ())
  {
    const xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (value_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "tolerance" && n.namespace_ ().empty ())
    {
      this->tolerance_.set (tolerance_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "gradient" && n.namespace_ ().empty ())
    {
      this->gradient_.set (gradient_traits::create (i, f, this));
      continue;
    }
  }

  if (!value_.present ())
  {
    this->value_.set (value_default_value ());
  }

  if (!tolerance_.present ())
  {
    this->tolerance_.set (tolerance_default_value ());
  }

  if (!gradient_.present ())
  {
    this->gradient_.set (gradient_default_value ());
  }
}

XsdNonLinearConstraint* XsdNonLinearConstraint::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdNonLinearConstraint (*this, f, c);
}

XsdNonLinearConstraint::
~XsdNonLinearConstraint ()
{
}

bool
operator== (const XsdNonLinearConstraint& x, const XsdNonLinearConstraint& y)
{
  {
    ::xsd::cxx::tree::comparison_map< char >& cm (
      ::xsd::cxx::tree::comparison_map_instance< 0, char > ());

    if (!cm.compare (x.function (), y.function ()))
      return false;
  }

  if (!(x.value () == y.value ()))
    return false;

  if (!(x.tolerance () == y.tolerance ()))
    return false;

  if (!(x.gradient () == y.gradient ()))
    return false;

  return true;
}

bool
operator!= (const XsdNonLinearConstraint& x, const XsdNonLinearConstraint& y)
{
  return !(x == y);
}

// XsdNonLinearConstraintPair
//

XsdNonLinearConstraintPair::
XsdNonLinearConstraintPair ()
: ::xml_schema::type (),
  equality_ (::xml_schema::flags (), this),
  inequality_ (::xml_schema::flags (), this)
{
}

XsdNonLinearConstraintPair::
XsdNonLinearConstraintPair (const XsdNonLinearConstraintPair& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  equality_ (x.equality_, f, this),
  inequality_ (x.inequality_, f, this)
{
}

XsdNonLinearConstraintPair::
XsdNonLinearConstraintPair (const xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  equality_ (f, this),
  inequality_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void XsdNonLinearConstraintPair::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // equality
    //
    if (n.name () == "equality" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< equality_type > r (
        equality_traits::create (i, f, this));

      this->equality_.push_back (r);
      continue;
    }

    // inequality
    //
    if (n.name () == "inequality" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< inequality_type > r (
        inequality_traits::create (i, f, this));

      this->inequality_.push_back (r);
      continue;
    }

    break;
  }
}

XsdNonLinearConstraintPair* XsdNonLinearConstraintPair::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class XsdNonLinearConstraintPair (*this, f, c);
}

XsdNonLinearConstraintPair::
~XsdNonLinearConstraintPair ()
{
}

bool
operator== (const XsdNonLinearConstraintPair& x, const XsdNonLinearConstraintPair& y)
{
  if (!(x.equality () == y.equality ()))
    return false;

  if (!(x.inequality () == y.inequality ()))
    return false;

  return true;
}

bool
operator!= (const XsdNonLinearConstraintPair& x, const XsdNonLinearConstraintPair& y)
{
  return !(x == y);
}

#include <ostream>

#include <xsd/cxx/tree/std-ostream-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::std_ostream_plate< 0, char >
  std_ostream_plate_init;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdConstraints& i)
{
  for (XsdConstraints::bound_const_iterator
       b (i.bound ().begin ()), e (i.bound ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "bound: " << *b;
  }

  if (i.linear ())
  {
    o << ::std::endl << "linear: " << *i.linear ();
  }

  if (i.nonlinear ())
  {
    o << ::std::endl << "nonlinear: " << *i.nonlinear ();
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdLinearConstraint& i)
{
  o << static_cast< const ::XsdDoubleVector& > (i);

  o << ::std::endl << "value: " << i.value ();
  o << ::std::endl << "tolerance: " << i.tolerance ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdLinearConstraintPair& i)
{
  for (XsdLinearConstraintPair::equality_const_iterator
       b (i.equality ().begin ()), e (i.equality ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "equality: " << *b;
  }

  for (XsdLinearConstraintPair::inequality_const_iterator
       b (i.inequality ().begin ()), e (i.inequality ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "inequality: " << *b;
  }

  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdNonLinearConstraint& i)
{
  {
    ::xsd::cxx::tree::std_ostream_map< char >& om (
      ::xsd::cxx::tree::std_ostream_map_instance< 0, char > ());

    o << ::std::endl << "function: ";
    om.insert (o, i.function ());
  }

  o << ::std::endl << "value: " << i.value ();
  o << ::std::endl << "tolerance: " << i.tolerance ();
  o << ::std::endl << "gradient: " << i.gradient ();
  return o;
}

::std::ostream&
operator<< (::std::ostream& o, const XsdNonLinearConstraintPair& i)
{
  for (XsdNonLinearConstraintPair::equality_const_iterator
       b (i.equality ().begin ()), e (i.equality ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "equality: " << *b;
  }

  for (XsdNonLinearConstraintPair::inequality_const_iterator
       b (i.inequality ().begin ()), e (i.inequality ().end ());
       b != e; ++b)
  {
    o << ::std::endl << "inequality: " << *b;
  }

  return o;
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (xercesc::DOMElement& e, const XsdConstraints& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // bound
  //
  for (XsdConstraints::bound_const_iterator
       b (i.bound ().begin ()), n (i.bound ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bound",
        e));

    s << *b;
  }

  // linear
  //
  if (i.linear ())
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "linear",
        e));

    s << *i.linear ();
  }

  // nonlinear
  //
  if (i.nonlinear ())
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nonlinear",
        e));

    s << *i.nonlinear ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdLinearConstraint& i)
{
  e << static_cast< const ::XsdDoubleVector& > (i);

  // value
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << ::xml_schema::as_double(i.value ());
  }

  // tolerance
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "tolerance",
        e));

    a << ::xml_schema::as_double(i.tolerance ());
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdLinearConstraintPair& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // equality
  //
  for (XsdLinearConstraintPair::equality_const_iterator
       b (i.equality ().begin ()), n (i.equality ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "equality",
        e));

    s << *b;
  }

  // inequality
  //
  for (XsdLinearConstraintPair::inequality_const_iterator
       b (i.inequality ().begin ()), n (i.inequality ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "inequality",
        e));

    s << *b;
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdNonLinearConstraint& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // function
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    const XsdNonLinearConstraint::function_type& x (i.function ());
    if (typeid (XsdNonLinearConstraint::function_type) == typeid (x))
    {
      xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "function",
          e));

      s << x;
    }
    else
      tsm.serialize (
        "function",
        "",
        false, true, e, x);
  }

  // value
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << ::xml_schema::as_double(i.value ());
  }

  // tolerance
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "tolerance",
        e));

    a << ::xml_schema::as_double(i.tolerance ());
  }

  // gradient
  //
  {
    xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "gradient",
        e));

    a << i.gradient ();
  }
}

void
operator<< (xercesc::DOMElement& e, const XsdNonLinearConstraintPair& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // equality
  //
  for (XsdNonLinearConstraintPair::equality_const_iterator
       b (i.equality ().begin ()), n (i.equality ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "equality",
        e));

    s << *b;
  }

  // inequality
  //
  for (XsdNonLinearConstraintPair::inequality_const_iterator
       b (i.inequality ().begin ()), n (i.inequality ().end ());
       b != n; ++b)
  {
    xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "inequality",
        e));

    s << *b;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

