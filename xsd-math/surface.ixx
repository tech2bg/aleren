// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_SURFACE_IXX
#define CXX___SCHEMA_XSD_MATH_SURFACE_IXX

// Begin prologue.
//
//
// End prologue.

#include "curve.ixx"

// XsdSurface
// 


// XsdFlatSurface
// 

inline
const XsdFlatSurface::dimension_optional& XsdFlatSurface::
dimension () const
{
  return this->dimension_;
}

inline
XsdFlatSurface::dimension_optional& XsdFlatSurface::
dimension ()
{
  return this->dimension_;
}

inline
void XsdFlatSurface::
dimension (const dimension_type& x)
{
  this->dimension_.set (x);
}

inline
void XsdFlatSurface::
dimension (const dimension_optional& x)
{
  this->dimension_ = x;
}

inline
XsdFlatSurface::dimension_type XsdFlatSurface::
dimension_default_value ()
{
  return dimension_type (2);
}

inline
const XsdFlatSurface::value_optional& XsdFlatSurface::
value () const
{
  return this->value_;
}

inline
XsdFlatSurface::value_optional& XsdFlatSurface::
value ()
{
  return this->value_;
}

inline
void XsdFlatSurface::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdFlatSurface::
value (const value_optional& x)
{
  this->value_ = x;
}

inline
XsdFlatSurface::value_type XsdFlatSurface::
value_default_value ()
{
  return value_type (.0);
}


// XsdCurveSurface
// 

inline
const XsdCurveSurface::curve_sequence& XsdCurveSurface::
curve () const
{
  return this->curve_;
}

inline
XsdCurveSurface::curve_sequence& XsdCurveSurface::
curve ()
{
  return this->curve_;
}

inline
void XsdCurveSurface::
curve (const curve_sequence& s)
{
  this->curve_ = s;
}


// XsdInterpolatedSurface
// 

inline
const XsdInterpolatedSurface::interpolate_optional& XsdInterpolatedSurface::
interpolate () const
{
  return this->interpolate_;
}

inline
XsdInterpolatedSurface::interpolate_optional& XsdInterpolatedSurface::
interpolate ()
{
  return this->interpolate_;
}

inline
void XsdInterpolatedSurface::
interpolate (const interpolate_type& x)
{
  this->interpolate_.set (x);
}

inline
void XsdInterpolatedSurface::
interpolate (const interpolate_optional& x)
{
  this->interpolate_ = x;
}

inline
void XsdInterpolatedSurface::
interpolate (::std::auto_ptr< interpolate_type > x)
{
  this->interpolate_.set (x);
}

inline
const XsdInterpolatedSurface::extrapolate_optional& XsdInterpolatedSurface::
extrapolate () const
{
  return this->extrapolate_;
}

inline
XsdInterpolatedSurface::extrapolate_optional& XsdInterpolatedSurface::
extrapolate ()
{
  return this->extrapolate_;
}

inline
void XsdInterpolatedSurface::
extrapolate (const extrapolate_type& x)
{
  this->extrapolate_.set (x);
}

inline
void XsdInterpolatedSurface::
extrapolate (const extrapolate_optional& x)
{
  this->extrapolate_ = x;
}

inline
void XsdInterpolatedSurface::
extrapolate (::std::auto_ptr< extrapolate_type > x)
{
  this->extrapolate_.set (x);
}

inline
const XsdInterpolatedSurface::extrapolate_type& XsdInterpolatedSurface::
extrapolate_default_value ()
{
  return extrapolate_default_value_;
}

inline
const XsdInterpolatedSurface::grid_optional& XsdInterpolatedSurface::
grid () const
{
  return this->grid_;
}

inline
XsdInterpolatedSurface::grid_optional& XsdInterpolatedSurface::
grid ()
{
  return this->grid_;
}

inline
void XsdInterpolatedSurface::
grid (const grid_type& x)
{
  this->grid_.set (x);
}

inline
void XsdInterpolatedSurface::
grid (const grid_optional& x)
{
  this->grid_ = x;
}

inline
void XsdInterpolatedSurface::
grid (::std::auto_ptr< grid_type > x)
{
  this->grid_.set (x);
}

inline
const XsdInterpolatedSurface::data_optional& XsdInterpolatedSurface::
data () const
{
  return this->data_;
}

inline
XsdInterpolatedSurface::data_optional& XsdInterpolatedSurface::
data ()
{
  return this->data_;
}

inline
void XsdInterpolatedSurface::
data (const data_type& x)
{
  this->data_.set (x);
}

inline
void XsdInterpolatedSurface::
data (const data_optional& x)
{
  this->data_ = x;
}

inline
void XsdInterpolatedSurface::
data (::std::auto_ptr< data_type > x)
{
  this->data_.set (x);
}


// XsdLeastSquaresSurface
// 


// XsdCompositeSurface
// 

inline
const XsdCompositeSurface::negate_optional& XsdCompositeSurface::
negate () const
{
  return this->negate_;
}

inline
XsdCompositeSurface::negate_optional& XsdCompositeSurface::
negate ()
{
  return this->negate_;
}

inline
void XsdCompositeSurface::
negate (const negate_type& x)
{
  this->negate_.set (x);
}

inline
void XsdCompositeSurface::
negate (const negate_optional& x)
{
  this->negate_ = x;
}

inline
void XsdCompositeSurface::
negate (::std::auto_ptr< negate_type > x)
{
  this->negate_.set (x);
}

inline
const XsdCompositeSurface::add_optional& XsdCompositeSurface::
add () const
{
  return this->add_;
}

inline
XsdCompositeSurface::add_optional& XsdCompositeSurface::
add ()
{
  return this->add_;
}

inline
void XsdCompositeSurface::
add (const add_type& x)
{
  this->add_.set (x);
}

inline
void XsdCompositeSurface::
add (const add_optional& x)
{
  this->add_ = x;
}

inline
void XsdCompositeSurface::
add (::std::auto_ptr< add_type > x)
{
  this->add_.set (x);
}

inline
const XsdCompositeSurface::subtract_optional& XsdCompositeSurface::
subtract () const
{
  return this->subtract_;
}

inline
XsdCompositeSurface::subtract_optional& XsdCompositeSurface::
subtract ()
{
  return this->subtract_;
}

inline
void XsdCompositeSurface::
subtract (const subtract_type& x)
{
  this->subtract_.set (x);
}

inline
void XsdCompositeSurface::
subtract (const subtract_optional& x)
{
  this->subtract_ = x;
}

inline
void XsdCompositeSurface::
subtract (::std::auto_ptr< subtract_type > x)
{
  this->subtract_.set (x);
}

inline
const XsdCompositeSurface::multiply_optional& XsdCompositeSurface::
multiply () const
{
  return this->multiply_;
}

inline
XsdCompositeSurface::multiply_optional& XsdCompositeSurface::
multiply ()
{
  return this->multiply_;
}

inline
void XsdCompositeSurface::
multiply (const multiply_type& x)
{
  this->multiply_.set (x);
}

inline
void XsdCompositeSurface::
multiply (const multiply_optional& x)
{
  this->multiply_ = x;
}

inline
void XsdCompositeSurface::
multiply (::std::auto_ptr< multiply_type > x)
{
  this->multiply_.set (x);
}

inline
const XsdCompositeSurface::divide_optional& XsdCompositeSurface::
divide () const
{
  return this->divide_;
}

inline
XsdCompositeSurface::divide_optional& XsdCompositeSurface::
divide ()
{
  return this->divide_;
}

inline
void XsdCompositeSurface::
divide (const divide_type& x)
{
  this->divide_.set (x);
}

inline
void XsdCompositeSurface::
divide (const divide_optional& x)
{
  this->divide_ = x;
}

inline
void XsdCompositeSurface::
divide (::std::auto_ptr< divide_type > x)
{
  this->divide_.set (x);
}

inline
const XsdCompositeSurface::min_optional& XsdCompositeSurface::
min () const
{
  return this->min_;
}

inline
XsdCompositeSurface::min_optional& XsdCompositeSurface::
min ()
{
  return this->min_;
}

inline
void XsdCompositeSurface::
min (const min_type& x)
{
  this->min_.set (x);
}

inline
void XsdCompositeSurface::
min (const min_optional& x)
{
  this->min_ = x;
}

inline
void XsdCompositeSurface::
min (::std::auto_ptr< min_type > x)
{
  this->min_.set (x);
}

inline
const XsdCompositeSurface::max_optional& XsdCompositeSurface::
max () const
{
  return this->max_;
}

inline
XsdCompositeSurface::max_optional& XsdCompositeSurface::
max ()
{
  return this->max_;
}

inline
void XsdCompositeSurface::
max (const max_type& x)
{
  this->max_.set (x);
}

inline
void XsdCompositeSurface::
max (const max_optional& x)
{
  this->max_ = x;
}

inline
void XsdCompositeSurface::
max (::std::auto_ptr< max_type > x)
{
  this->max_.set (x);
}


// XsdMARSpline
// 


// XsdSurfaceEvaluate
// 

inline
const XsdSurfaceEvaluate::result_optional& XsdSurfaceEvaluate::
result () const
{
  return this->result_;
}

inline
XsdSurfaceEvaluate::result_optional& XsdSurfaceEvaluate::
result ()
{
  return this->result_;
}

inline
void XsdSurfaceEvaluate::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdSurfaceEvaluate::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdSurfaceEvaluate::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdSurfaceEvaluate::derivative_optional& XsdSurfaceEvaluate::
derivative () const
{
  return this->derivative_;
}

inline
XsdSurfaceEvaluate::derivative_optional& XsdSurfaceEvaluate::
derivative ()
{
  return this->derivative_;
}

inline
void XsdSurfaceEvaluate::
derivative (const derivative_type& x)
{
  this->derivative_.set (x);
}

inline
void XsdSurfaceEvaluate::
derivative (const derivative_optional& x)
{
  this->derivative_ = x;
}

inline
void XsdSurfaceEvaluate::
derivative (::std::auto_ptr< derivative_type > x)
{
  this->derivative_.set (x);
}

inline
const XsdSurfaceEvaluate::point_sequence& XsdSurfaceEvaluate::
point () const
{
  return this->point_;
}

inline
XsdSurfaceEvaluate::point_sequence& XsdSurfaceEvaluate::
point ()
{
  return this->point_;
}

inline
void XsdSurfaceEvaluate::
point (const point_sequence& s)
{
  this->point_ = s;
}

inline
const XsdSurfaceEvaluate::surface_type& XsdSurfaceEvaluate::
surface () const
{
  return this->surface_.get ();
}

inline
XsdSurfaceEvaluate::surface_type& XsdSurfaceEvaluate::
surface ()
{
  return this->surface_.get ();
}

inline
void XsdSurfaceEvaluate::
surface (const surface_type& x)
{
  this->surface_.set (x);
}

inline
void XsdSurfaceEvaluate::
surface (::std::auto_ptr< surface_type > x)
{
  this->surface_.set (x);
}


// XsdSurfaceIntegral
// 

inline
const XsdSurfaceIntegral::result_optional& XsdSurfaceIntegral::
result () const
{
  return this->result_;
}

inline
XsdSurfaceIntegral::result_optional& XsdSurfaceIntegral::
result ()
{
  return this->result_;
}

inline
void XsdSurfaceIntegral::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdSurfaceIntegral::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdSurfaceIntegral::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdSurfaceIntegral::limit_sequence& XsdSurfaceIntegral::
limit () const
{
  return this->limit_;
}

inline
XsdSurfaceIntegral::limit_sequence& XsdSurfaceIntegral::
limit ()
{
  return this->limit_;
}

inline
void XsdSurfaceIntegral::
limit (const limit_sequence& s)
{
  this->limit_ = s;
}

inline
const XsdSurfaceIntegral::surface_type& XsdSurfaceIntegral::
surface () const
{
  return this->surface_.get ();
}

inline
XsdSurfaceIntegral::surface_type& XsdSurfaceIntegral::
surface ()
{
  return this->surface_.get ();
}

inline
void XsdSurfaceIntegral::
surface (const surface_type& x)
{
  this->surface_.set (x);
}

inline
void XsdSurfaceIntegral::
surface (::std::auto_ptr< surface_type > x)
{
  this->surface_.set (x);
}


// XsdSurfaceArgs
// 

inline
const XsdSurfaceArgs::surface_optional& XsdSurfaceArgs::
surface () const
{
  return this->surface_;
}

inline
XsdSurfaceArgs::surface_optional& XsdSurfaceArgs::
surface ()
{
  return this->surface_;
}

inline
void XsdSurfaceArgs::
surface (const surface_type& x)
{
  this->surface_.set (x);
}

inline
void XsdSurfaceArgs::
surface (const surface_optional& x)
{
  this->surface_ = x;
}

inline
void XsdSurfaceArgs::
surface (::std::auto_ptr< surface_type > x)
{
  this->surface_.set (x);
}

inline
const XsdSurfaceArgs::scalar_optional& XsdSurfaceArgs::
scalar () const
{
  return this->scalar_;
}

inline
XsdSurfaceArgs::scalar_optional& XsdSurfaceArgs::
scalar ()
{
  return this->scalar_;
}

inline
void XsdSurfaceArgs::
scalar (const scalar_type& x)
{
  this->scalar_.set (x);
}

inline
void XsdSurfaceArgs::
scalar (const scalar_optional& x)
{
  this->scalar_ = x;
}


// XsdSurfaceBinary
// 

inline
const XsdSurfaceBinary::first_type& XsdSurfaceBinary::
first () const
{
  return this->first_.get ();
}

inline
XsdSurfaceBinary::first_type& XsdSurfaceBinary::
first ()
{
  return this->first_.get ();
}

inline
void XsdSurfaceBinary::
first (const first_type& x)
{
  this->first_.set (x);
}

inline
void XsdSurfaceBinary::
first (::std::auto_ptr< first_type > x)
{
  this->first_.set (x);
}

inline
const XsdSurfaceBinary::second_type& XsdSurfaceBinary::
second () const
{
  return this->second_.get ();
}

inline
XsdSurfaceBinary::second_type& XsdSurfaceBinary::
second ()
{
  return this->second_.get ();
}

inline
void XsdSurfaceBinary::
second (const second_type& x)
{
  this->second_.set (x);
}

inline
void XsdSurfaceBinary::
second (::std::auto_ptr< second_type > x)
{
  this->second_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_SURFACE_IXX
