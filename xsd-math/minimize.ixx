// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_MATH_MINIMIZE_IXX
#define CXX___SCHEMA_XSD_MATH_MINIMIZE_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

#include "constraint.ixx"

// XsdMinSolver
// 

inline
const XsdMinSolver::error_optional& XsdMinSolver::
error () const
{
  return this->error_;
}

inline
XsdMinSolver::error_optional& XsdMinSolver::
error ()
{
  return this->error_;
}

inline
void XsdMinSolver::
error (const error_type& x)
{
  this->error_.set (x);
}

inline
void XsdMinSolver::
error (const error_optional& x)
{
  this->error_ = x;
}

inline
void XsdMinSolver::
error (::std::auto_ptr< error_type > x)
{
  this->error_.set (x);
}

inline
const XsdMinSolver::maxIterations_optional& XsdMinSolver::
maxIterations () const
{
  return this->maxIterations_;
}

inline
XsdMinSolver::maxIterations_optional& XsdMinSolver::
maxIterations ()
{
  return this->maxIterations_;
}

inline
void XsdMinSolver::
maxIterations (const maxIterations_type& x)
{
  this->maxIterations_.set (x);
}

inline
void XsdMinSolver::
maxIterations (const maxIterations_optional& x)
{
  this->maxIterations_ = x;
}

inline
void XsdMinSolver::
maxIterations (::std::auto_ptr< maxIterations_type > x)
{
  this->maxIterations_.set (x);
}

inline
const XsdMinSolver::stepSize_optional& XsdMinSolver::
stepSize () const
{
  return this->stepSize_;
}

inline
XsdMinSolver::stepSize_optional& XsdMinSolver::
stepSize ()
{
  return this->stepSize_;
}

inline
void XsdMinSolver::
stepSize (const stepSize_type& x)
{
  this->stepSize_.set (x);
}

inline
void XsdMinSolver::
stepSize (const stepSize_optional& x)
{
  this->stepSize_ = x;
}

inline
void XsdMinSolver::
stepSize (::std::auto_ptr< stepSize_type > x)
{
  this->stepSize_.set (x);
}

inline
const XsdMinSolver::maxStationary_optional& XsdMinSolver::
maxStationary () const
{
  return this->maxStationary_;
}

inline
XsdMinSolver::maxStationary_optional& XsdMinSolver::
maxStationary ()
{
  return this->maxStationary_;
}

inline
void XsdMinSolver::
maxStationary (const maxStationary_type& x)
{
  this->maxStationary_.set (x);
}

inline
void XsdMinSolver::
maxStationary (const maxStationary_optional& x)
{
  this->maxStationary_ = x;
}

inline
void XsdMinSolver::
maxStationary (::std::auto_ptr< maxStationary_type > x)
{
  this->maxStationary_.set (x);
}


// XsdMinSolver1D
// 


// XsdMinError
// 

inline
const XsdMinError::root_optional& XsdMinError::
root () const
{
  return this->root_;
}

inline
XsdMinError::root_optional& XsdMinError::
root ()
{
  return this->root_;
}

inline
void XsdMinError::
root (const root_type& x)
{
  this->root_.set (x);
}

inline
void XsdMinError::
root (const root_optional& x)
{
  this->root_ = x;
}

inline
void XsdMinError::
root (::std::auto_ptr< root_type > x)
{
  this->root_.set (x);
}

inline
const XsdMinError::value_optional& XsdMinError::
value () const
{
  return this->value_;
}

inline
XsdMinError::value_optional& XsdMinError::
value ()
{
  return this->value_;
}

inline
void XsdMinError::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdMinError::
value (const value_optional& x)
{
  this->value_ = x;
}

inline
void XsdMinError::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}

inline
const XsdMinError::gradient_optional& XsdMinError::
gradient () const
{
  return this->gradient_;
}

inline
XsdMinError::gradient_optional& XsdMinError::
gradient ()
{
  return this->gradient_;
}

inline
void XsdMinError::
gradient (const gradient_type& x)
{
  this->gradient_.set (x);
}

inline
void XsdMinError::
gradient (const gradient_optional& x)
{
  this->gradient_ = x;
}

inline
void XsdMinError::
gradient (::std::auto_ptr< gradient_type > x)
{
  this->gradient_.set (x);
}


// XsdValueMinSolver
// 

inline
const XsdValueMinSolver::simplex_optional& XsdValueMinSolver::
simplex () const
{
  return this->simplex_;
}

inline
XsdValueMinSolver::simplex_optional& XsdValueMinSolver::
simplex ()
{
  return this->simplex_;
}

inline
void XsdValueMinSolver::
simplex (const simplex_type& x)
{
  this->simplex_.set (x);
}

inline
void XsdValueMinSolver::
simplex (const simplex_optional& x)
{
  this->simplex_ = x;
}

inline
void XsdValueMinSolver::
simplex (::std::auto_ptr< simplex_type > x)
{
  this->simplex_.set (x);
}


// XsdGradientMinSolver
// 

inline
const XsdGradientMinSolver::conjugateGradient_optional& XsdGradientMinSolver::
conjugateGradient () const
{
  return this->conjugateGradient_;
}

inline
XsdGradientMinSolver::conjugateGradient_optional& XsdGradientMinSolver::
conjugateGradient ()
{
  return this->conjugateGradient_;
}

inline
void XsdGradientMinSolver::
conjugateGradient (const conjugateGradient_type& x)
{
  this->conjugateGradient_.set (x);
}

inline
void XsdGradientMinSolver::
conjugateGradient (const conjugateGradient_optional& x)
{
  this->conjugateGradient_ = x;
}

inline
void XsdGradientMinSolver::
conjugateGradient (::std::auto_ptr< conjugateGradient_type > x)
{
  this->conjugateGradient_.set (x);
}

inline
const XsdGradientMinSolver::steepestDescent_optional& XsdGradientMinSolver::
steepestDescent () const
{
  return this->steepestDescent_;
}

inline
XsdGradientMinSolver::steepestDescent_optional& XsdGradientMinSolver::
steepestDescent ()
{
  return this->steepestDescent_;
}

inline
void XsdGradientMinSolver::
steepestDescent (const steepestDescent_type& x)
{
  this->steepestDescent_.set (x);
}

inline
void XsdGradientMinSolver::
steepestDescent (const steepestDescent_optional& x)
{
  this->steepestDescent_ = x;
}

inline
void XsdGradientMinSolver::
steepestDescent (::std::auto_ptr< steepestDescent_type > x)
{
  this->steepestDescent_.set (x);
}


// XsdLeastSquaresMinSolver
// 

inline
const XsdLeastSquaresMinSolver::gradient_optional& XsdLeastSquaresMinSolver::
gradient () const
{
  return this->gradient_;
}

inline
XsdLeastSquaresMinSolver::gradient_optional& XsdLeastSquaresMinSolver::
gradient ()
{
  return this->gradient_;
}

inline
void XsdLeastSquaresMinSolver::
gradient (const gradient_type& x)
{
  this->gradient_.set (x);
}

inline
void XsdLeastSquaresMinSolver::
gradient (const gradient_optional& x)
{
  this->gradient_ = x;
}

inline
XsdLeastSquaresMinSolver::gradient_type XsdLeastSquaresMinSolver::
gradient_default_value ()
{
  return gradient_type (true);
}

inline
const XsdLeastSquaresMinSolver::scaled_optional& XsdLeastSquaresMinSolver::
scaled () const
{
  return this->scaled_;
}

inline
XsdLeastSquaresMinSolver::scaled_optional& XsdLeastSquaresMinSolver::
scaled ()
{
  return this->scaled_;
}

inline
void XsdLeastSquaresMinSolver::
scaled (const scaled_type& x)
{
  this->scaled_.set (x);
}

inline
void XsdLeastSquaresMinSolver::
scaled (const scaled_optional& x)
{
  this->scaled_ = x;
}

inline
XsdLeastSquaresMinSolver::scaled_type XsdLeastSquaresMinSolver::
scaled_default_value ()
{
  return scaled_type (true);
}


// XsdValueMinSolver1D
// 

inline
const XsdValueMinSolver1D::brent_optional& XsdValueMinSolver1D::
brent () const
{
  return this->brent_;
}

inline
XsdValueMinSolver1D::brent_optional& XsdValueMinSolver1D::
brent ()
{
  return this->brent_;
}

inline
void XsdValueMinSolver1D::
brent (const brent_type& x)
{
  this->brent_.set (x);
}

inline
void XsdValueMinSolver1D::
brent (const brent_optional& x)
{
  this->brent_ = x;
}

inline
void XsdValueMinSolver1D::
brent (::std::auto_ptr< brent_type > x)
{
  this->brent_.set (x);
}

inline
const XsdValueMinSolver1D::golden_optional& XsdValueMinSolver1D::
golden () const
{
  return this->golden_;
}

inline
XsdValueMinSolver1D::golden_optional& XsdValueMinSolver1D::
golden ()
{
  return this->golden_;
}

inline
void XsdValueMinSolver1D::
golden (const golden_type& x)
{
  this->golden_.set (x);
}

inline
void XsdValueMinSolver1D::
golden (const golden_optional& x)
{
  this->golden_ = x;
}

inline
void XsdValueMinSolver1D::
golden (::std::auto_ptr< golden_type > x)
{
  this->golden_.set (x);
}


// XsdGradientMinSolver1D
// 


// XsdLinearMinSolver
// 

inline
const XsdLinearMinSolver::method_optional& XsdLinearMinSolver::
method () const
{
  return this->method_;
}

inline
XsdLinearMinSolver::method_optional& XsdLinearMinSolver::
method ()
{
  return this->method_;
}

inline
void XsdLinearMinSolver::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void XsdLinearMinSolver::
method (const method_optional& x)
{
  this->method_ = x;
}

inline
void XsdLinearMinSolver::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const XsdLinearMinSolver::method_type& XsdLinearMinSolver::
method_default_value ()
{
  return method_default_value_;
}

inline
const XsdLinearMinSolver::integer_optional& XsdLinearMinSolver::
integer () const
{
  return this->integer_;
}

inline
XsdLinearMinSolver::integer_optional& XsdLinearMinSolver::
integer ()
{
  return this->integer_;
}

inline
void XsdLinearMinSolver::
integer (const integer_type& x)
{
  this->integer_.set (x);
}

inline
void XsdLinearMinSolver::
integer (const integer_optional& x)
{
  this->integer_ = x;
}

inline
void XsdLinearMinSolver::
integer (::std::auto_ptr< integer_type > x)
{
  this->integer_.set (x);
}

inline
const XsdLinearMinSolver::binary_optional& XsdLinearMinSolver::
binary () const
{
  return this->binary_;
}

inline
XsdLinearMinSolver::binary_optional& XsdLinearMinSolver::
binary ()
{
  return this->binary_;
}

inline
void XsdLinearMinSolver::
binary (const binary_type& x)
{
  this->binary_.set (x);
}

inline
void XsdLinearMinSolver::
binary (const binary_optional& x)
{
  this->binary_ = x;
}

inline
void XsdLinearMinSolver::
binary (::std::auto_ptr< binary_type > x)
{
  this->binary_.set (x);
}

inline
const XsdLinearMinSolver::scaling_optional& XsdLinearMinSolver::
scaling () const
{
  return this->scaling_;
}

inline
XsdLinearMinSolver::scaling_optional& XsdLinearMinSolver::
scaling ()
{
  return this->scaling_;
}

inline
void XsdLinearMinSolver::
scaling (const scaling_type& x)
{
  this->scaling_.set (x);
}

inline
void XsdLinearMinSolver::
scaling (const scaling_optional& x)
{
  this->scaling_ = x;
}

inline
void XsdLinearMinSolver::
scaling (::std::auto_ptr< scaling_type > x)
{
  this->scaling_.set (x);
}

inline
const XsdLinearMinSolver::scaling_type& XsdLinearMinSolver::
scaling_default_value ()
{
  return scaling_default_value_;
}

inline
const XsdLinearMinSolver::basis_optional& XsdLinearMinSolver::
basis () const
{
  return this->basis_;
}

inline
XsdLinearMinSolver::basis_optional& XsdLinearMinSolver::
basis ()
{
  return this->basis_;
}

inline
void XsdLinearMinSolver::
basis (const basis_type& x)
{
  this->basis_.set (x);
}

inline
void XsdLinearMinSolver::
basis (const basis_optional& x)
{
  this->basis_ = x;
}

inline
void XsdLinearMinSolver::
basis (::std::auto_ptr< basis_type > x)
{
  this->basis_.set (x);
}

inline
const XsdLinearMinSolver::basis_type& XsdLinearMinSolver::
basis_default_value ()
{
  return basis_default_value_;
}


// XsdQuadraticMinSolver
// 


// XsdMinResult
// 

inline
const XsdMinResult::value_type& XsdMinResult::
value () const
{
  return this->value_.get ();
}

inline
XsdMinResult::value_type& XsdMinResult::
value ()
{
  return this->value_.get ();
}

inline
void XsdMinResult::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
const XsdMinResult::point_type& XsdMinResult::
point () const
{
  return this->point_.get ();
}

inline
XsdMinResult::point_type& XsdMinResult::
point ()
{
  return this->point_.get ();
}

inline
void XsdMinResult::
point (const point_type& x)
{
  this->point_.set (x);
}

inline
void XsdMinResult::
point (::std::auto_ptr< point_type > x)
{
  this->point_.set (x);
}


// XsdMinSolverTest1D
// 

inline
const XsdMinSolverTest1D::result_optional& XsdMinSolverTest1D::
result () const
{
  return this->result_;
}

inline
XsdMinSolverTest1D::result_optional& XsdMinSolverTest1D::
result ()
{
  return this->result_;
}

inline
void XsdMinSolverTest1D::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdMinSolverTest1D::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdMinSolverTest1D::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdMinSolverTest1D::function_type& XsdMinSolverTest1D::
function () const
{
  return this->function_.get ();
}

inline
XsdMinSolverTest1D::function_type& XsdMinSolverTest1D::
function ()
{
  return this->function_.get ();
}

inline
void XsdMinSolverTest1D::
function (const function_type& x)
{
  this->function_.set (x);
}

inline
void XsdMinSolverTest1D::
function (::std::auto_ptr< function_type > x)
{
  this->function_.set (x);
}

inline
const XsdMinSolverTest1D::constraints_optional& XsdMinSolverTest1D::
constraints () const
{
  return this->constraints_;
}

inline
XsdMinSolverTest1D::constraints_optional& XsdMinSolverTest1D::
constraints ()
{
  return this->constraints_;
}

inline
void XsdMinSolverTest1D::
constraints (const constraints_type& x)
{
  this->constraints_.set (x);
}

inline
void XsdMinSolverTest1D::
constraints (const constraints_optional& x)
{
  this->constraints_ = x;
}

inline
void XsdMinSolverTest1D::
constraints (::std::auto_ptr< constraints_type > x)
{
  this->constraints_.set (x);
}

inline
const XsdMinSolverTest1D::guess_optional& XsdMinSolverTest1D::
guess () const
{
  return this->guess_;
}

inline
XsdMinSolverTest1D::guess_optional& XsdMinSolverTest1D::
guess ()
{
  return this->guess_;
}

inline
void XsdMinSolverTest1D::
guess (const guess_type& x)
{
  this->guess_.set (x);
}

inline
void XsdMinSolverTest1D::
guess (const guess_optional& x)
{
  this->guess_ = x;
}

inline
XsdMinSolverTest1D::guess_type XsdMinSolverTest1D::
guess_default_value ()
{
  return guess_type (.0);
}

inline
const XsdMinSolverTest1D::solver_type& XsdMinSolverTest1D::
solver () const
{
  return this->solver_.get ();
}

inline
XsdMinSolverTest1D::solver_type& XsdMinSolverTest1D::
solver ()
{
  return this->solver_.get ();
}

inline
void XsdMinSolverTest1D::
solver (const solver_type& x)
{
  this->solver_.set (x);
}

inline
void XsdMinSolverTest1D::
solver (::std::auto_ptr< solver_type > x)
{
  this->solver_.set (x);
}


// XsdMinSolverTest
// 

inline
const XsdMinSolverTest::result_optional& XsdMinSolverTest::
result () const
{
  return this->result_;
}

inline
XsdMinSolverTest::result_optional& XsdMinSolverTest::
result ()
{
  return this->result_;
}

inline
void XsdMinSolverTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdMinSolverTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdMinSolverTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdMinSolverTest::function_type& XsdMinSolverTest::
function () const
{
  return this->function_.get ();
}

inline
XsdMinSolverTest::function_type& XsdMinSolverTest::
function ()
{
  return this->function_.get ();
}

inline
void XsdMinSolverTest::
function (const function_type& x)
{
  this->function_.set (x);
}

inline
void XsdMinSolverTest::
function (::std::auto_ptr< function_type > x)
{
  this->function_.set (x);
}

inline
const XsdMinSolverTest::constraints_optional& XsdMinSolverTest::
constraints () const
{
  return this->constraints_;
}

inline
XsdMinSolverTest::constraints_optional& XsdMinSolverTest::
constraints ()
{
  return this->constraints_;
}

inline
void XsdMinSolverTest::
constraints (const constraints_type& x)
{
  this->constraints_.set (x);
}

inline
void XsdMinSolverTest::
constraints (const constraints_optional& x)
{
  this->constraints_ = x;
}

inline
void XsdMinSolverTest::
constraints (::std::auto_ptr< constraints_type > x)
{
  this->constraints_.set (x);
}

inline
const XsdMinSolverTest::guess_type& XsdMinSolverTest::
guess () const
{
  return this->guess_.get ();
}

inline
XsdMinSolverTest::guess_type& XsdMinSolverTest::
guess ()
{
  return this->guess_.get ();
}

inline
void XsdMinSolverTest::
guess (const guess_type& x)
{
  this->guess_.set (x);
}

inline
void XsdMinSolverTest::
guess (::std::auto_ptr< guess_type > x)
{
  this->guess_.set (x);
}

inline
const XsdMinSolverTest::solver_type& XsdMinSolverTest::
solver () const
{
  return this->solver_.get ();
}

inline
XsdMinSolverTest::solver_type& XsdMinSolverTest::
solver ()
{
  return this->solver_.get ();
}

inline
void XsdMinSolverTest::
solver (const solver_type& x)
{
  this->solver_.set (x);
}

inline
void XsdMinSolverTest::
solver (::std::auto_ptr< solver_type > x)
{
  this->solver_.set (x);
}


// XsdLinearMinTest
// 

inline
const XsdLinearMinTest::result_optional& XsdLinearMinTest::
result () const
{
  return this->result_;
}

inline
XsdLinearMinTest::result_optional& XsdLinearMinTest::
result ()
{
  return this->result_;
}

inline
void XsdLinearMinTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdLinearMinTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdLinearMinTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdLinearMinTest::objective_type& XsdLinearMinTest::
objective () const
{
  return this->objective_.get ();
}

inline
XsdLinearMinTest::objective_type& XsdLinearMinTest::
objective ()
{
  return this->objective_.get ();
}

inline
void XsdLinearMinTest::
objective (const objective_type& x)
{
  this->objective_.set (x);
}

inline
void XsdLinearMinTest::
objective (::std::auto_ptr< objective_type > x)
{
  this->objective_.set (x);
}

inline
const XsdLinearMinTest::constraints_type& XsdLinearMinTest::
constraints () const
{
  return this->constraints_.get ();
}

inline
XsdLinearMinTest::constraints_type& XsdLinearMinTest::
constraints ()
{
  return this->constraints_.get ();
}

inline
void XsdLinearMinTest::
constraints (const constraints_type& x)
{
  this->constraints_.set (x);
}

inline
void XsdLinearMinTest::
constraints (::std::auto_ptr< constraints_type > x)
{
  this->constraints_.set (x);
}

inline
const XsdLinearMinTest::solver_type& XsdLinearMinTest::
solver () const
{
  return this->solver_.get ();
}

inline
XsdLinearMinTest::solver_type& XsdLinearMinTest::
solver ()
{
  return this->solver_.get ();
}

inline
void XsdLinearMinTest::
solver (const solver_type& x)
{
  this->solver_.set (x);
}

inline
void XsdLinearMinTest::
solver (::std::auto_ptr< solver_type > x)
{
  this->solver_.set (x);
}


// XsdQuadraticMinTest
// 

inline
const XsdQuadraticMinTest::result_optional& XsdQuadraticMinTest::
result () const
{
  return this->result_;
}

inline
XsdQuadraticMinTest::result_optional& XsdQuadraticMinTest::
result ()
{
  return this->result_;
}

inline
void XsdQuadraticMinTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdQuadraticMinTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdQuadraticMinTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdQuadraticMinTest::constraints_type& XsdQuadraticMinTest::
constraints () const
{
  return this->constraints_.get ();
}

inline
XsdQuadraticMinTest::constraints_type& XsdQuadraticMinTest::
constraints ()
{
  return this->constraints_.get ();
}

inline
void XsdQuadraticMinTest::
constraints (const constraints_type& x)
{
  this->constraints_.set (x);
}

inline
void XsdQuadraticMinTest::
constraints (::std::auto_ptr< constraints_type > x)
{
  this->constraints_.set (x);
}

inline
const XsdQuadraticMinTest::quadratic_type& XsdQuadraticMinTest::
quadratic () const
{
  return this->quadratic_.get ();
}

inline
XsdQuadraticMinTest::quadratic_type& XsdQuadraticMinTest::
quadratic ()
{
  return this->quadratic_.get ();
}

inline
void XsdQuadraticMinTest::
quadratic (const quadratic_type& x)
{
  this->quadratic_.set (x);
}

inline
void XsdQuadraticMinTest::
quadratic (::std::auto_ptr< quadratic_type > x)
{
  this->quadratic_.set (x);
}

inline
const XsdQuadraticMinTest::linear_optional& XsdQuadraticMinTest::
linear () const
{
  return this->linear_;
}

inline
XsdQuadraticMinTest::linear_optional& XsdQuadraticMinTest::
linear ()
{
  return this->linear_;
}

inline
void XsdQuadraticMinTest::
linear (const linear_type& x)
{
  this->linear_.set (x);
}

inline
void XsdQuadraticMinTest::
linear (const linear_optional& x)
{
  this->linear_ = x;
}

inline
void XsdQuadraticMinTest::
linear (::std::auto_ptr< linear_type > x)
{
  this->linear_.set (x);
}

inline
const XsdQuadraticMinTest::guess_type& XsdQuadraticMinTest::
guess () const
{
  return this->guess_.get ();
}

inline
XsdQuadraticMinTest::guess_type& XsdQuadraticMinTest::
guess ()
{
  return this->guess_.get ();
}

inline
void XsdQuadraticMinTest::
guess (const guess_type& x)
{
  this->guess_.set (x);
}

inline
void XsdQuadraticMinTest::
guess (::std::auto_ptr< guess_type > x)
{
  this->guess_.set (x);
}

inline
const XsdQuadraticMinTest::solver_type& XsdQuadraticMinTest::
solver () const
{
  return this->solver_.get ();
}

inline
XsdQuadraticMinTest::solver_type& XsdQuadraticMinTest::
solver ()
{
  return this->solver_.get ();
}

inline
void XsdQuadraticMinTest::
solver (const solver_type& x)
{
  this->solver_.set (x);
}

inline
void XsdQuadraticMinTest::
solver (::std::auto_ptr< solver_type > x)
{
  this->solver_.set (x);
}


// XsdLeastSquaresMinTest
// 

inline
const XsdLeastSquaresMinTest::result_optional& XsdLeastSquaresMinTest::
result () const
{
  return this->result_;
}

inline
XsdLeastSquaresMinTest::result_optional& XsdLeastSquaresMinTest::
result ()
{
  return this->result_;
}

inline
void XsdLeastSquaresMinTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdLeastSquaresMinTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdLeastSquaresMinTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdLeastSquaresMinTest::function_sequence& XsdLeastSquaresMinTest::
function () const
{
  return this->function_;
}

inline
XsdLeastSquaresMinTest::function_sequence& XsdLeastSquaresMinTest::
function ()
{
  return this->function_;
}

inline
void XsdLeastSquaresMinTest::
function (const function_sequence& s)
{
  this->function_ = s;
}

inline
const XsdLeastSquaresMinTest::guess_type& XsdLeastSquaresMinTest::
guess () const
{
  return this->guess_.get ();
}

inline
XsdLeastSquaresMinTest::guess_type& XsdLeastSquaresMinTest::
guess ()
{
  return this->guess_.get ();
}

inline
void XsdLeastSquaresMinTest::
guess (const guess_type& x)
{
  this->guess_.set (x);
}

inline
void XsdLeastSquaresMinTest::
guess (::std::auto_ptr< guess_type > x)
{
  this->guess_.set (x);
}

inline
const XsdLeastSquaresMinTest::constraints_optional& XsdLeastSquaresMinTest::
constraints () const
{
  return this->constraints_;
}

inline
XsdLeastSquaresMinTest::constraints_optional& XsdLeastSquaresMinTest::
constraints ()
{
  return this->constraints_;
}

inline
void XsdLeastSquaresMinTest::
constraints (const constraints_type& x)
{
  this->constraints_.set (x);
}

inline
void XsdLeastSquaresMinTest::
constraints (const constraints_optional& x)
{
  this->constraints_ = x;
}

inline
void XsdLeastSquaresMinTest::
constraints (::std::auto_ptr< constraints_type > x)
{
  this->constraints_.set (x);
}

inline
const XsdLeastSquaresMinTest::solver_type& XsdLeastSquaresMinTest::
solver () const
{
  return this->solver_.get ();
}

inline
XsdLeastSquaresMinTest::solver_type& XsdLeastSquaresMinTest::
solver ()
{
  return this->solver_.get ();
}

inline
void XsdLeastSquaresMinTest::
solver (const solver_type& x)
{
  this->solver_.set (x);
}

inline
void XsdLeastSquaresMinTest::
solver (::std::auto_ptr< solver_type > x)
{
  this->solver_.set (x);
}


// simplex
// 

inline
const simplex::lambda_type& simplex::
lambda () const
{
  return this->lambda_.get ();
}

inline
simplex::lambda_type& simplex::
lambda ()
{
  return this->lambda_.get ();
}

inline
void simplex::
lambda (const lambda_type& x)
{
  this->lambda_.set (x);
}

inline
simplex::lambda_type simplex::
lambda_default_value ()
{
  return lambda_type (1.0);
}


// conjugateGradient
// 

inline
const conjugateGradient::method_type& conjugateGradient::
method () const
{
  return this->method_.get ();
}

inline
conjugateGradient::method_type& conjugateGradient::
method ()
{
  return this->method_.get ();
}

inline
void conjugateGradient::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void conjugateGradient::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const conjugateGradient::method_type& conjugateGradient::
method_default_value ()
{
  return method_default_value_;
}


// golden
// 

inline
const golden::quadratic_type& golden::
quadratic () const
{
  return this->quadratic_.get ();
}

inline
golden::quadratic_type& golden::
quadratic ()
{
  return this->quadratic_.get ();
}

inline
void golden::
quadratic (const quadratic_type& x)
{
  this->quadratic_.set (x);
}

inline
golden::quadratic_type golden::
quadratic_default_value ()
{
  return quadratic_type (false);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_MATH_MINIMIZE_IXX
