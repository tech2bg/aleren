// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_EVENT_IXX
#define CXX___SCHEMA_XSD_ASSET_EVENT_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdDefaultKey
// 

inline
const XsdDefaultKey::obligorID_type& XsdDefaultKey::
obligorID () const
{
  return this->obligorID_.get ();
}

inline
XsdDefaultKey::obligorID_type& XsdDefaultKey::
obligorID ()
{
  return this->obligorID_.get ();
}

inline
void XsdDefaultKey::
obligorID (const obligorID_type& x)
{
  this->obligorID_.set (x);
}

inline
void XsdDefaultKey::
obligorID (::std::auto_ptr< obligorID_type > x)
{
  this->obligorID_.set (x);
}


// XsdDefaultEvent
// 

inline
const XsdDefaultEvent::time_type& XsdDefaultEvent::
time () const
{
  return this->time_.get ();
}

inline
XsdDefaultEvent::time_type& XsdDefaultEvent::
time ()
{
  return this->time_.get ();
}

inline
void XsdDefaultEvent::
time (const time_type& x)
{
  this->time_.set (x);
}

inline
void XsdDefaultEvent::
time (::std::auto_ptr< time_type > x)
{
  this->time_.set (x);
}

inline
const XsdDefaultEvent::recovery_optional& XsdDefaultEvent::
recovery () const
{
  return this->recovery_;
}

inline
XsdDefaultEvent::recovery_optional& XsdDefaultEvent::
recovery ()
{
  return this->recovery_;
}

inline
void XsdDefaultEvent::
recovery (const recovery_type& x)
{
  this->recovery_.set (x);
}

inline
void XsdDefaultEvent::
recovery (const recovery_optional& x)
{
  this->recovery_ = x;
}

inline
void XsdDefaultEvent::
recovery (::std::auto_ptr< recovery_type > x)
{
  this->recovery_.set (x);
}

inline
const XsdDefaultEvent::defaultType_optional& XsdDefaultEvent::
defaultType () const
{
  return this->defaultType_;
}

inline
XsdDefaultEvent::defaultType_optional& XsdDefaultEvent::
defaultType ()
{
  return this->defaultType_;
}

inline
void XsdDefaultEvent::
defaultType (const defaultType_type& x)
{
  this->defaultType_.set (x);
}

inline
void XsdDefaultEvent::
defaultType (const defaultType_optional& x)
{
  this->defaultType_ = x;
}

inline
void XsdDefaultEvent::
defaultType (::std::auto_ptr< defaultType_type > x)
{
  this->defaultType_.set (x);
}

inline
const XsdDefaultEvent::defaultType_type& XsdDefaultEvent::
defaultType_default_value ()
{
  return defaultType_default_value_;
}

inline
const XsdDefaultEvent::restructureType_optional& XsdDefaultEvent::
restructureType () const
{
  return this->restructureType_;
}

inline
XsdDefaultEvent::restructureType_optional& XsdDefaultEvent::
restructureType ()
{
  return this->restructureType_;
}

inline
void XsdDefaultEvent::
restructureType (const restructureType_type& x)
{
  this->restructureType_.set (x);
}

inline
void XsdDefaultEvent::
restructureType (const restructureType_optional& x)
{
  this->restructureType_ = x;
}

inline
void XsdDefaultEvent::
restructureType (::std::auto_ptr< restructureType_type > x)
{
  this->restructureType_.set (x);
}

inline
const XsdDefaultEvent::restructureType_type& XsdDefaultEvent::
restructureType_default_value ()
{
  return restructureType_default_value_;
}


// XsdRatingKey
// 

inline
const XsdRatingKey::obligorID_type& XsdRatingKey::
obligorID () const
{
  return this->obligorID_.get ();
}

inline
XsdRatingKey::obligorID_type& XsdRatingKey::
obligorID ()
{
  return this->obligorID_.get ();
}

inline
void XsdRatingKey::
obligorID (const obligorID_type& x)
{
  this->obligorID_.set (x);
}

inline
void XsdRatingKey::
obligorID (::std::auto_ptr< obligorID_type > x)
{
  this->obligorID_.set (x);
}

inline
const XsdRatingKey::agency_type& XsdRatingKey::
agency () const
{
  return this->agency_.get ();
}

inline
XsdRatingKey::agency_type& XsdRatingKey::
agency ()
{
  return this->agency_.get ();
}

inline
void XsdRatingKey::
agency (const agency_type& x)
{
  this->agency_.set (x);
}

inline
void XsdRatingKey::
agency (::std::auto_ptr< agency_type > x)
{
  this->agency_.set (x);
}

inline
const XsdRatingKey::scheme_type& XsdRatingKey::
scheme () const
{
  return this->scheme_.get ();
}

inline
XsdRatingKey::scheme_type& XsdRatingKey::
scheme ()
{
  return this->scheme_.get ();
}

inline
void XsdRatingKey::
scheme (const scheme_type& x)
{
  this->scheme_.set (x);
}

inline
void XsdRatingKey::
scheme (::std::auto_ptr< scheme_type > x)
{
  this->scheme_.set (x);
}

inline
const XsdRatingKey::scheme_type& XsdRatingKey::
scheme_default_value ()
{
  return scheme_default_value_;
}


// XsdRatingEvent
// 

inline
const XsdRatingEvent::rank_type& XsdRatingEvent::
rank () const
{
  return this->rank_.get ();
}

inline
XsdRatingEvent::rank_type& XsdRatingEvent::
rank ()
{
  return this->rank_.get ();
}

inline
void XsdRatingEvent::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
void XsdRatingEvent::
rank (::std::auto_ptr< rank_type > x)
{
  this->rank_.set (x);
}


// XsdRatingSeries
// 

inline
const XsdRatingSeries::rank_sequence& XsdRatingSeries::
rank () const
{
  return this->rank_;
}

inline
XsdRatingSeries::rank_sequence& XsdRatingSeries::
rank ()
{
  return this->rank_;
}

inline
void XsdRatingSeries::
rank (const rank_sequence& s)
{
  this->rank_ = s;
}


// XsdDefaultRecovery
// 

inline
const XsdDefaultRecovery::lag_optional& XsdDefaultRecovery::
lag () const
{
  return this->lag_;
}

inline
XsdDefaultRecovery::lag_optional& XsdDefaultRecovery::
lag ()
{
  return this->lag_;
}

inline
void XsdDefaultRecovery::
lag (const lag_type& x)
{
  this->lag_.set (x);
}

inline
void XsdDefaultRecovery::
lag (const lag_optional& x)
{
  this->lag_ = x;
}

inline
void XsdDefaultRecovery::
lag (::std::auto_ptr< lag_type > x)
{
  this->lag_.set (x);
}

inline
const XsdDefaultRecovery::lag_type& XsdDefaultRecovery::
lag_default_value ()
{
  return lag_default_value_;
}

inline
const XsdDefaultRecovery::fraction_type& XsdDefaultRecovery::
fraction () const
{
  return this->fraction_.get ();
}

inline
XsdDefaultRecovery::fraction_type& XsdDefaultRecovery::
fraction ()
{
  return this->fraction_.get ();
}

inline
void XsdDefaultRecovery::
fraction (const fraction_type& x)
{
  this->fraction_.set (x);
}

inline
void XsdDefaultRecovery::
fraction (::std::auto_ptr< fraction_type > x)
{
  this->fraction_.set (x);
}


// XsdRatingRank
// 

inline
const XsdRatingRank::date_type& XsdRatingRank::
date () const
{
  return this->date_.get ();
}

inline
XsdRatingRank::date_type& XsdRatingRank::
date ()
{
  return this->date_.get ();
}

inline
void XsdRatingRank::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdRatingRank::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const XsdRatingRank::provisional_type& XsdRatingRank::
provisional () const
{
  return this->provisional_.get ();
}

inline
XsdRatingRank::provisional_type& XsdRatingRank::
provisional ()
{
  return this->provisional_.get ();
}

inline
void XsdRatingRank::
provisional (const provisional_type& x)
{
  this->provisional_.set (x);
}

inline
XsdRatingRank::provisional_type XsdRatingRank::
provisional_default_value ()
{
  return provisional_type (false);
}


// rank
// 

inline
const rank::date_type& rank::
date () const
{
  return this->date_.get ();
}

inline
rank::date_type& rank::
date ()
{
  return this->date_.get ();
}

inline
void rank::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void rank::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const rank::provisional_type& rank::
provisional () const
{
  return this->provisional_.get ();
}

inline
rank::provisional_type& rank::
provisional ()
{
  return this->provisional_.get ();
}

inline
void rank::
provisional (const provisional_type& x)
{
  this->provisional_.set (x);
}

inline
rank::provisional_type rank::
provisional_default_value ()
{
  return provisional_type (false);
}


// rank1
// 

inline
const rank1::date_type& rank1::
date () const
{
  return this->date_.get ();
}

inline
rank1::date_type& rank1::
date ()
{
  return this->date_.get ();
}

inline
void rank1::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void rank1::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const rank1::provisional_type& rank1::
provisional () const
{
  return this->provisional_.get ();
}

inline
rank1::provisional_type& rank1::
provisional ()
{
  return this->provisional_.get ();
}

inline
void rank1::
provisional (const provisional_type& x)
{
  this->provisional_.set (x);
}

inline
rank1::provisional_type rank1::
provisional_default_value ()
{
  return provisional_type (false);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_EVENT_IXX
