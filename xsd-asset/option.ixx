// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_OPTION_IXX
#define CXX___SCHEMA_XSD_ASSET_OPTION_IXX

// Begin prologue.
//
//
// End prologue.

#include "equity.ixx"

#include "swap.ixx"

#include "cdswap.ixx"

// XsdOption
// 

inline
const XsdOption::quanto_optional& XsdOption::
quanto () const
{
  return this->quanto_;
}

inline
XsdOption::quanto_optional& XsdOption::
quanto ()
{
  return this->quanto_;
}

inline
void XsdOption::
quanto (const quanto_type& x)
{
  this->quanto_.set (x);
}

inline
void XsdOption::
quanto (const quanto_optional& x)
{
  this->quanto_ = x;
}

inline
void XsdOption::
quanto (::std::auto_ptr< quanto_type > x)
{
  this->quanto_.set (x);
}

inline
const XsdOption::optionType_optional& XsdOption::
optionType () const
{
  return this->optionType_;
}

inline
XsdOption::optionType_optional& XsdOption::
optionType ()
{
  return this->optionType_;
}

inline
void XsdOption::
optionType (const optionType_type& x)
{
  this->optionType_.set (x);
}

inline
void XsdOption::
optionType (const optionType_optional& x)
{
  this->optionType_ = x;
}

inline
void XsdOption::
optionType (::std::auto_ptr< optionType_type > x)
{
  this->optionType_.set (x);
}

inline
const XsdOption::optionType_type& XsdOption::
optionType_default_value ()
{
  return optionType_default_value_;
}

inline
const XsdOption::exercise_type& XsdOption::
exercise () const
{
  return this->exercise_.get ();
}

inline
XsdOption::exercise_type& XsdOption::
exercise ()
{
  return this->exercise_.get ();
}

inline
void XsdOption::
exercise (const exercise_type& x)
{
  this->exercise_.set (x);
}

inline
void XsdOption::
exercise (::std::auto_ptr< exercise_type > x)
{
  this->exercise_.set (x);
}

inline
const XsdOption::underlying_sequence& XsdOption::
underlying () const
{
  return this->underlying_;
}

inline
XsdOption::underlying_sequence& XsdOption::
underlying ()
{
  return this->underlying_;
}

inline
void XsdOption::
underlying (const underlying_sequence& s)
{
  this->underlying_ = s;
}


// XsdAsianOption
// 

inline
const XsdAsianOption::average_type& XsdAsianOption::
average () const
{
  return this->average_.get ();
}

inline
XsdAsianOption::average_type& XsdAsianOption::
average ()
{
  return this->average_.get ();
}

inline
void XsdAsianOption::
average (const average_type& x)
{
  this->average_.set (x);
}

inline
void XsdAsianOption::
average (::std::auto_ptr< average_type > x)
{
  this->average_.set (x);
}

inline
const XsdAsianOption::average_type& XsdAsianOption::
average_default_value ()
{
  return average_default_value_;
}

inline
const XsdAsianOption::dates_type& XsdAsianOption::
dates () const
{
  return this->dates_.get ();
}

inline
XsdAsianOption::dates_type& XsdAsianOption::
dates ()
{
  return this->dates_.get ();
}

inline
void XsdAsianOption::
dates (const dates_type& x)
{
  this->dates_.set (x);
}

inline
void XsdAsianOption::
dates (::std::auto_ptr< dates_type > x)
{
  this->dates_.set (x);
}


// XsdBarrierOption
// 

inline
const XsdBarrierOption::barrier_sequence& XsdBarrierOption::
barrier () const
{
  return this->barrier_;
}

inline
XsdBarrierOption::barrier_sequence& XsdBarrierOption::
barrier ()
{
  return this->barrier_;
}

inline
void XsdBarrierOption::
barrier (const barrier_sequence& s)
{
  this->barrier_ = s;
}


// XsdBasketOption
// 

inline
const XsdBasketOption::aggregate_type& XsdBasketOption::
aggregate () const
{
  return this->aggregate_.get ();
}

inline
XsdBasketOption::aggregate_type& XsdBasketOption::
aggregate ()
{
  return this->aggregate_.get ();
}

inline
void XsdBasketOption::
aggregate (const aggregate_type& x)
{
  this->aggregate_.set (x);
}

inline
void XsdBasketOption::
aggregate (::std::auto_ptr< aggregate_type > x)
{
  this->aggregate_.set (x);
}


// XsdDigitalOption
// 

inline
const XsdDigitalOption::cashAmount_optional& XsdDigitalOption::
cashAmount () const
{
  return this->cashAmount_;
}

inline
XsdDigitalOption::cashAmount_optional& XsdDigitalOption::
cashAmount ()
{
  return this->cashAmount_;
}

inline
void XsdDigitalOption::
cashAmount (const cashAmount_type& x)
{
  this->cashAmount_.set (x);
}

inline
void XsdDigitalOption::
cashAmount (const cashAmount_optional& x)
{
  this->cashAmount_ = x;
}

inline
void XsdDigitalOption::
cashAmount (::std::auto_ptr< cashAmount_type > x)
{
  this->cashAmount_.set (x);
}

inline
XsdDigitalOption::cashAmount_type XsdDigitalOption::
cashAmount_default_value ()
{
  return cashAmount_type (1.0);
}

inline
const XsdDigitalOption::digitalType_optional& XsdDigitalOption::
digitalType () const
{
  return this->digitalType_;
}

inline
XsdDigitalOption::digitalType_optional& XsdDigitalOption::
digitalType ()
{
  return this->digitalType_;
}

inline
void XsdDigitalOption::
digitalType (const digitalType_type& x)
{
  this->digitalType_.set (x);
}

inline
void XsdDigitalOption::
digitalType (const digitalType_optional& x)
{
  this->digitalType_ = x;
}

inline
void XsdDigitalOption::
digitalType (::std::auto_ptr< digitalType_type > x)
{
  this->digitalType_.set (x);
}

inline
const XsdDigitalOption::digitalType_type& XsdDigitalOption::
digitalType_default_value ()
{
  return digitalType_default_value_;
}


// XsdLookbackOption
// 

inline
const XsdLookbackOption::lookbackType_optional& XsdLookbackOption::
lookbackType () const
{
  return this->lookbackType_;
}

inline
XsdLookbackOption::lookbackType_optional& XsdLookbackOption::
lookbackType ()
{
  return this->lookbackType_;
}

inline
void XsdLookbackOption::
lookbackType (const lookbackType_type& x)
{
  this->lookbackType_.set (x);
}

inline
void XsdLookbackOption::
lookbackType (const lookbackType_optional& x)
{
  this->lookbackType_ = x;
}

inline
void XsdLookbackOption::
lookbackType (::std::auto_ptr< lookbackType_type > x)
{
  this->lookbackType_.set (x);
}

inline
const XsdLookbackOption::dates_type& XsdLookbackOption::
dates () const
{
  return this->dates_.get ();
}

inline
XsdLookbackOption::dates_type& XsdLookbackOption::
dates ()
{
  return this->dates_.get ();
}

inline
void XsdLookbackOption::
dates (const dates_type& x)
{
  this->dates_.set (x);
}

inline
void XsdLookbackOption::
dates (::std::auto_ptr< dates_type > x)
{
  this->dates_.set (x);
}


// XsdRatchetOption
// 

inline
const XsdRatchetOption::ratchet_type& XsdRatchetOption::
ratchet () const
{
  return this->ratchet_.get ();
}

inline
XsdRatchetOption::ratchet_type& XsdRatchetOption::
ratchet ()
{
  return this->ratchet_.get ();
}

inline
void XsdRatchetOption::
ratchet (const ratchet_type& x)
{
  this->ratchet_.set (x);
}

inline
void XsdRatchetOption::
ratchet (::std::auto_ptr< ratchet_type > x)
{
  this->ratchet_.set (x);
}

inline
const XsdRatchetOption::sticky_optional& XsdRatchetOption::
sticky () const
{
  return this->sticky_;
}

inline
XsdRatchetOption::sticky_optional& XsdRatchetOption::
sticky ()
{
  return this->sticky_;
}

inline
void XsdRatchetOption::
sticky (const sticky_type& x)
{
  this->sticky_.set (x);
}

inline
void XsdRatchetOption::
sticky (const sticky_optional& x)
{
  this->sticky_ = x;
}

inline
void XsdRatchetOption::
sticky (::std::auto_ptr< sticky_type > x)
{
  this->sticky_.set (x);
}


// XsdVanillaOption
// 

inline
const XsdVanillaOption::gap_optional& XsdVanillaOption::
gap () const
{
  return this->gap_;
}

inline
XsdVanillaOption::gap_optional& XsdVanillaOption::
gap ()
{
  return this->gap_;
}

inline
void XsdVanillaOption::
gap (const gap_type& x)
{
  this->gap_.set (x);
}

inline
void XsdVanillaOption::
gap (const gap_optional& x)
{
  this->gap_ = x;
}

inline
void XsdVanillaOption::
gap (::std::auto_ptr< gap_type > x)
{
  this->gap_.set (x);
}

inline
XsdVanillaOption::gap_type XsdVanillaOption::
gap_default_value ()
{
  return gap_type (.0);
}


// XsdRateCap
// 

inline
const XsdRateCap::simple_optional& XsdRateCap::
simple () const
{
  return this->simple_;
}

inline
XsdRateCap::simple_optional& XsdRateCap::
simple ()
{
  return this->simple_;
}

inline
void XsdRateCap::
simple (const simple_type& x)
{
  this->simple_.set (x);
}

inline
void XsdRateCap::
simple (const simple_optional& x)
{
  this->simple_ = x;
}

inline
void XsdRateCap::
simple (::std::auto_ptr< simple_type > x)
{
  this->simple_.set (x);
}

inline
const XsdRateCap::general_optional& XsdRateCap::
general () const
{
  return this->general_;
}

inline
XsdRateCap::general_optional& XsdRateCap::
general ()
{
  return this->general_;
}

inline
void XsdRateCap::
general (const general_type& x)
{
  this->general_.set (x);
}

inline
void XsdRateCap::
general (const general_optional& x)
{
  this->general_ = x;
}

inline
void XsdRateCap::
general (::std::auto_ptr< general_type > x)
{
  this->general_.set (x);
}


// XsdRateSwaption
// 

inline
const XsdRateSwaption::sign_optional& XsdRateSwaption::
sign () const
{
  return this->sign_;
}

inline
XsdRateSwaption::sign_optional& XsdRateSwaption::
sign ()
{
  return this->sign_;
}

inline
void XsdRateSwaption::
sign (const sign_type& x)
{
  this->sign_.set (x);
}

inline
void XsdRateSwaption::
sign (const sign_optional& x)
{
  this->sign_ = x;
}

inline
void XsdRateSwaption::
sign (::std::auto_ptr< sign_type > x)
{
  this->sign_.set (x);
}

inline
const XsdRateSwaption::sign_type& XsdRateSwaption::
sign_default_value ()
{
  return sign_default_value_;
}

inline
const XsdRateSwaption::strikeRate_optional& XsdRateSwaption::
strikeRate () const
{
  return this->strikeRate_;
}

inline
XsdRateSwaption::strikeRate_optional& XsdRateSwaption::
strikeRate ()
{
  return this->strikeRate_;
}

inline
void XsdRateSwaption::
strikeRate (const strikeRate_type& x)
{
  this->strikeRate_.set (x);
}

inline
void XsdRateSwaption::
strikeRate (const strikeRate_optional& x)
{
  this->strikeRate_ = x;
}

inline
const XsdRateSwaption::settleType_optional& XsdRateSwaption::
settleType () const
{
  return this->settleType_;
}

inline
XsdRateSwaption::settleType_optional& XsdRateSwaption::
settleType ()
{
  return this->settleType_;
}

inline
void XsdRateSwaption::
settleType (const settleType_type& x)
{
  this->settleType_.set (x);
}

inline
void XsdRateSwaption::
settleType (const settleType_optional& x)
{
  this->settleType_ = x;
}

inline
void XsdRateSwaption::
settleType (::std::auto_ptr< settleType_type > x)
{
  this->settleType_.set (x);
}

inline
const XsdRateSwaption::settleType_type& XsdRateSwaption::
settleType_default_value ()
{
  return settleType_default_value_;
}

inline
const XsdRateSwaption::swap_type& XsdRateSwaption::
swap () const
{
  return this->swap_.get ();
}

inline
XsdRateSwaption::swap_type& XsdRateSwaption::
swap ()
{
  return this->swap_.get ();
}

inline
void XsdRateSwaption::
swap (const swap_type& x)
{
  this->swap_.set (x);
}

inline
void XsdRateSwaption::
swap (::std::auto_ptr< swap_type > x)
{
  this->swap_.set (x);
}


// XsdCreditSwaption
// 

inline
const XsdCreditSwaption::CDS_type& XsdCreditSwaption::
CDS () const
{
  return this->CDS_.get ();
}

inline
XsdCreditSwaption::CDS_type& XsdCreditSwaption::
CDS ()
{
  return this->CDS_.get ();
}

inline
void XsdCreditSwaption::
CDS (const CDS_type& x)
{
  this->CDS_.set (x);
}

inline
void XsdCreditSwaption::
CDS (::std::auto_ptr< CDS_type > x)
{
  this->CDS_.set (x);
}


// XsdExerciseType
// 

inline
XsdExerciseType::
XsdExerciseType ()
: ::xml_schema::string ()
{
}

inline
XsdExerciseType::
XsdExerciseType (value v)
: ::xml_schema::string (_xsd_XsdExerciseType_literals_[v])
{
}

inline
XsdExerciseType::
XsdExerciseType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdExerciseType::
XsdExerciseType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExerciseType::
XsdExerciseType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdExerciseType::
XsdExerciseType (const XsdExerciseType& v,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdExerciseType& XsdExerciseType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdExerciseType_literals_[v]);

  return *this;
}


// XsdRateCapType
// 

inline
XsdRateCapType::
XsdRateCapType ()
: ::xml_schema::string ()
{
}

inline
XsdRateCapType::
XsdRateCapType (value v)
: ::xml_schema::string (_xsd_XsdRateCapType_literals_[v])
{
}

inline
XsdRateCapType::
XsdRateCapType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRateCapType::
XsdRateCapType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateCapType::
XsdRateCapType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateCapType::
XsdRateCapType (const XsdRateCapType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRateCapType& XsdRateCapType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRateCapType_literals_[v]);

  return *this;
}


// XsdRateOptionType
// 

inline
XsdRateOptionType::
XsdRateOptionType ()
: ::xml_schema::string ()
{
}

inline
XsdRateOptionType::
XsdRateOptionType (value v)
: ::xml_schema::string (_xsd_XsdRateOptionType_literals_[v])
{
}

inline
XsdRateOptionType::
XsdRateOptionType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdRateOptionType::
XsdRateOptionType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateOptionType::
XsdRateOptionType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdRateOptionType::
XsdRateOptionType (const XsdRateOptionType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdRateOptionType& XsdRateOptionType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdRateOptionType_literals_[v]);

  return *this;
}


// XsdDigitalOptionType
// 

inline
XsdDigitalOptionType::
XsdDigitalOptionType ()
: ::xml_schema::string ()
{
}

inline
XsdDigitalOptionType::
XsdDigitalOptionType (value v)
: ::xml_schema::string (_xsd_XsdDigitalOptionType_literals_[v])
{
}

inline
XsdDigitalOptionType::
XsdDigitalOptionType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdDigitalOptionType::
XsdDigitalOptionType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDigitalOptionType::
XsdDigitalOptionType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdDigitalOptionType::
XsdDigitalOptionType (const XsdDigitalOptionType& v,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdDigitalOptionType& XsdDigitalOptionType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdDigitalOptionType_literals_[v]);

  return *this;
}


// XsdCallOrPut
// 

inline
XsdCallOrPut::
XsdCallOrPut ()
: ::xml_schema::string ()
{
}

inline
XsdCallOrPut::
XsdCallOrPut (value v)
: ::xml_schema::string (_xsd_XsdCallOrPut_literals_[v])
{
}

inline
XsdCallOrPut::
XsdCallOrPut (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdCallOrPut::
XsdCallOrPut (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCallOrPut::
XsdCallOrPut (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdCallOrPut::
XsdCallOrPut (const XsdCallOrPut& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdCallOrPut& XsdCallOrPut::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdCallOrPut_literals_[v]);

  return *this;
}


// XsdOptionStrike
// 

inline
const XsdOptionStrike::strike_optional& XsdOptionStrike::
strike () const
{
  return this->strike_;
}

inline
XsdOptionStrike::strike_optional& XsdOptionStrike::
strike ()
{
  return this->strike_;
}

inline
void XsdOptionStrike::
strike (const strike_type& x)
{
  this->strike_.set (x);
}

inline
void XsdOptionStrike::
strike (const strike_optional& x)
{
  this->strike_ = x;
}

inline
const XsdOptionStrike::series_optional& XsdOptionStrike::
series () const
{
  return this->series_;
}

inline
XsdOptionStrike::series_optional& XsdOptionStrike::
series ()
{
  return this->series_;
}

inline
void XsdOptionStrike::
series (const series_type& x)
{
  this->series_.set (x);
}

inline
void XsdOptionStrike::
series (const series_optional& x)
{
  this->series_ = x;
}

inline
void XsdOptionStrike::
series (::std::auto_ptr< series_type > x)
{
  this->series_.set (x);
}


// XsdGeneralRateCap
// 

inline
const XsdGeneralRateCap::floating_sequence& XsdGeneralRateCap::
floating () const
{
  return this->floating_;
}

inline
XsdGeneralRateCap::floating_sequence& XsdGeneralRateCap::
floating ()
{
  return this->floating_;
}

inline
void XsdGeneralRateCap::
floating (const floating_sequence& s)
{
  this->floating_ = s;
}

inline
const XsdGeneralRateCap::cap_optional& XsdGeneralRateCap::
cap () const
{
  return this->cap_;
}

inline
XsdGeneralRateCap::cap_optional& XsdGeneralRateCap::
cap ()
{
  return this->cap_;
}

inline
void XsdGeneralRateCap::
cap (const cap_type& x)
{
  this->cap_.set (x);
}

inline
void XsdGeneralRateCap::
cap (const cap_optional& x)
{
  this->cap_ = x;
}

inline
void XsdGeneralRateCap::
cap (::std::auto_ptr< cap_type > x)
{
  this->cap_.set (x);
}

inline
const XsdGeneralRateCap::floor_optional& XsdGeneralRateCap::
floor () const
{
  return this->floor_;
}

inline
XsdGeneralRateCap::floor_optional& XsdGeneralRateCap::
floor ()
{
  return this->floor_;
}

inline
void XsdGeneralRateCap::
floor (const floor_type& x)
{
  this->floor_.set (x);
}

inline
void XsdGeneralRateCap::
floor (const floor_optional& x)
{
  this->floor_ = x;
}

inline
void XsdGeneralRateCap::
floor (::std::auto_ptr< floor_type > x)
{
  this->floor_.set (x);
}

inline
const XsdGeneralRateCap::volatility_optional& XsdGeneralRateCap::
volatility () const
{
  return this->volatility_;
}

inline
XsdGeneralRateCap::volatility_optional& XsdGeneralRateCap::
volatility ()
{
  return this->volatility_;
}

inline
void XsdGeneralRateCap::
volatility (const volatility_type& x)
{
  this->volatility_.set (x);
}

inline
void XsdGeneralRateCap::
volatility (const volatility_optional& x)
{
  this->volatility_ = x;
}

inline
void XsdGeneralRateCap::
volatility (::std::auto_ptr< volatility_type > x)
{
  this->volatility_.set (x);
}


// XsdSimpleRateCap
// 

inline
const XsdSimpleRateCap::type_optional& XsdSimpleRateCap::
type () const
{
  return this->type_;
}

inline
XsdSimpleRateCap::type_optional& XsdSimpleRateCap::
type ()
{
  return this->type_;
}

inline
void XsdSimpleRateCap::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdSimpleRateCap::
type (const type_optional& x)
{
  this->type_ = x;
}

inline
void XsdSimpleRateCap::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const XsdSimpleRateCap::type_type& XsdSimpleRateCap::
type_default_value ()
{
  return type_default_value_;
}

inline
const XsdSimpleRateCap::strike_optional& XsdSimpleRateCap::
strike () const
{
  return this->strike_;
}

inline
XsdSimpleRateCap::strike_optional& XsdSimpleRateCap::
strike ()
{
  return this->strike_;
}

inline
void XsdSimpleRateCap::
strike (const strike_type& x)
{
  this->strike_.set (x);
}

inline
void XsdSimpleRateCap::
strike (const strike_optional& x)
{
  this->strike_ = x;
}

inline
const XsdSimpleRateCap::index_type& XsdSimpleRateCap::
index () const
{
  return this->index_.get ();
}

inline
XsdSimpleRateCap::index_type& XsdSimpleRateCap::
index ()
{
  return this->index_.get ();
}

inline
void XsdSimpleRateCap::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdSimpleRateCap::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}


// cashAmount
// 


// gap
// 


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_OPTION_IXX
