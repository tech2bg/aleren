// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_EXPRESSION_IXX
#define CXX___SCHEMA_XSD_ASSET_EXPRESSION_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

#include "index.ixx"

#include "cashflow.ixx"

// XsdExpression
// 


// XsdDataExpression
// 

inline
const XsdDataExpression::boolean_optional& XsdDataExpression::
boolean () const
{
  return this->boolean_;
}

inline
XsdDataExpression::boolean_optional& XsdDataExpression::
boolean ()
{
  return this->boolean_;
}

inline
void XsdDataExpression::
boolean (const boolean_type& x)
{
  this->boolean_.set (x);
}

inline
void XsdDataExpression::
boolean (const boolean_optional& x)
{
  this->boolean_ = x;
}

inline
const XsdDataExpression::date_optional& XsdDataExpression::
date () const
{
  return this->date_;
}

inline
XsdDataExpression::date_optional& XsdDataExpression::
date ()
{
  return this->date_;
}

inline
void XsdDataExpression::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdDataExpression::
date (const date_optional& x)
{
  this->date_ = x;
}

inline
void XsdDataExpression::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const XsdDataExpression::dateTime_optional& XsdDataExpression::
dateTime () const
{
  return this->dateTime_;
}

inline
XsdDataExpression::dateTime_optional& XsdDataExpression::
dateTime ()
{
  return this->dateTime_;
}

inline
void XsdDataExpression::
dateTime (const dateTime_type& x)
{
  this->dateTime_.set (x);
}

inline
void XsdDataExpression::
dateTime (const dateTime_optional& x)
{
  this->dateTime_ = x;
}

inline
void XsdDataExpression::
dateTime (::std::auto_ptr< dateTime_type > x)
{
  this->dateTime_.set (x);
}

inline
const XsdDataExpression::integer_optional& XsdDataExpression::
integer () const
{
  return this->integer_;
}

inline
XsdDataExpression::integer_optional& XsdDataExpression::
integer ()
{
  return this->integer_;
}

inline
void XsdDataExpression::
integer (const integer_type& x)
{
  this->integer_.set (x);
}

inline
void XsdDataExpression::
integer (const integer_optional& x)
{
  this->integer_ = x;
}

inline
const XsdDataExpression::real_optional& XsdDataExpression::
real () const
{
  return this->real_;
}

inline
XsdDataExpression::real_optional& XsdDataExpression::
real ()
{
  return this->real_;
}

inline
void XsdDataExpression::
real (const real_type& x)
{
  this->real_.set (x);
}

inline
void XsdDataExpression::
real (const real_optional& x)
{
  this->real_ = x;
}

inline
const XsdDataExpression::tenor_optional& XsdDataExpression::
tenor () const
{
  return this->tenor_;
}

inline
XsdDataExpression::tenor_optional& XsdDataExpression::
tenor ()
{
  return this->tenor_;
}

inline
void XsdDataExpression::
tenor (const tenor_type& x)
{
  this->tenor_.set (x);
}

inline
void XsdDataExpression::
tenor (const tenor_optional& x)
{
  this->tenor_ = x;
}

inline
void XsdDataExpression::
tenor (::std::auto_ptr< tenor_type > x)
{
  this->tenor_.set (x);
}


// XsdMathExpression
// 

inline
const XsdMathExpression::add_optional& XsdMathExpression::
add () const
{
  return this->add_;
}

inline
XsdMathExpression::add_optional& XsdMathExpression::
add ()
{
  return this->add_;
}

inline
void XsdMathExpression::
add (const add_type& x)
{
  this->add_.set (x);
}

inline
void XsdMathExpression::
add (const add_optional& x)
{
  this->add_ = x;
}

inline
void XsdMathExpression::
add (::std::auto_ptr< add_type > x)
{
  this->add_.set (x);
}

inline
const XsdMathExpression::cosine_optional& XsdMathExpression::
cosine () const
{
  return this->cosine_;
}

inline
XsdMathExpression::cosine_optional& XsdMathExpression::
cosine ()
{
  return this->cosine_;
}

inline
void XsdMathExpression::
cosine (const cosine_type& x)
{
  this->cosine_.set (x);
}

inline
void XsdMathExpression::
cosine (const cosine_optional& x)
{
  this->cosine_ = x;
}

inline
void XsdMathExpression::
cosine (::std::auto_ptr< cosine_type > x)
{
  this->cosine_.set (x);
}

inline
const XsdMathExpression::divide_optional& XsdMathExpression::
divide () const
{
  return this->divide_;
}

inline
XsdMathExpression::divide_optional& XsdMathExpression::
divide ()
{
  return this->divide_;
}

inline
void XsdMathExpression::
divide (const divide_type& x)
{
  this->divide_.set (x);
}

inline
void XsdMathExpression::
divide (const divide_optional& x)
{
  this->divide_ = x;
}

inline
void XsdMathExpression::
divide (::std::auto_ptr< divide_type > x)
{
  this->divide_.set (x);
}

inline
const XsdMathExpression::exp_optional& XsdMathExpression::
exp () const
{
  return this->exp_;
}

inline
XsdMathExpression::exp_optional& XsdMathExpression::
exp ()
{
  return this->exp_;
}

inline
void XsdMathExpression::
exp (const exp_type& x)
{
  this->exp_.set (x);
}

inline
void XsdMathExpression::
exp (const exp_optional& x)
{
  this->exp_ = x;
}

inline
void XsdMathExpression::
exp (::std::auto_ptr< exp_type > x)
{
  this->exp_.set (x);
}

inline
const XsdMathExpression::log_optional& XsdMathExpression::
log () const
{
  return this->log_;
}

inline
XsdMathExpression::log_optional& XsdMathExpression::
log ()
{
  return this->log_;
}

inline
void XsdMathExpression::
log (const log_type& x)
{
  this->log_.set (x);
}

inline
void XsdMathExpression::
log (const log_optional& x)
{
  this->log_ = x;
}

inline
void XsdMathExpression::
log (::std::auto_ptr< log_type > x)
{
  this->log_.set (x);
}

inline
const XsdMathExpression::max_optional& XsdMathExpression::
max () const
{
  return this->max_;
}

inline
XsdMathExpression::max_optional& XsdMathExpression::
max ()
{
  return this->max_;
}

inline
void XsdMathExpression::
max (const max_type& x)
{
  this->max_.set (x);
}

inline
void XsdMathExpression::
max (const max_optional& x)
{
  this->max_ = x;
}

inline
void XsdMathExpression::
max (::std::auto_ptr< max_type > x)
{
  this->max_.set (x);
}

inline
const XsdMathExpression::min_optional& XsdMathExpression::
min () const
{
  return this->min_;
}

inline
XsdMathExpression::min_optional& XsdMathExpression::
min ()
{
  return this->min_;
}

inline
void XsdMathExpression::
min (const min_type& x)
{
  this->min_.set (x);
}

inline
void XsdMathExpression::
min (const min_optional& x)
{
  this->min_ = x;
}

inline
void XsdMathExpression::
min (::std::auto_ptr< min_type > x)
{
  this->min_.set (x);
}

inline
const XsdMathExpression::multiply_optional& XsdMathExpression::
multiply () const
{
  return this->multiply_;
}

inline
XsdMathExpression::multiply_optional& XsdMathExpression::
multiply ()
{
  return this->multiply_;
}

inline
void XsdMathExpression::
multiply (const multiply_type& x)
{
  this->multiply_.set (x);
}

inline
void XsdMathExpression::
multiply (const multiply_optional& x)
{
  this->multiply_ = x;
}

inline
void XsdMathExpression::
multiply (::std::auto_ptr< multiply_type > x)
{
  this->multiply_.set (x);
}

inline
const XsdMathExpression::negate_optional& XsdMathExpression::
negate () const
{
  return this->negate_;
}

inline
XsdMathExpression::negate_optional& XsdMathExpression::
negate ()
{
  return this->negate_;
}

inline
void XsdMathExpression::
negate (const negate_type& x)
{
  this->negate_.set (x);
}

inline
void XsdMathExpression::
negate (const negate_optional& x)
{
  this->negate_ = x;
}

inline
void XsdMathExpression::
negate (::std::auto_ptr< negate_type > x)
{
  this->negate_.set (x);
}

inline
const XsdMathExpression::pow_optional& XsdMathExpression::
pow () const
{
  return this->pow_;
}

inline
XsdMathExpression::pow_optional& XsdMathExpression::
pow ()
{
  return this->pow_;
}

inline
void XsdMathExpression::
pow (const pow_type& x)
{
  this->pow_.set (x);
}

inline
void XsdMathExpression::
pow (const pow_optional& x)
{
  this->pow_ = x;
}

inline
void XsdMathExpression::
pow (::std::auto_ptr< pow_type > x)
{
  this->pow_.set (x);
}

inline
const XsdMathExpression::round_optional& XsdMathExpression::
round () const
{
  return this->round_;
}

inline
XsdMathExpression::round_optional& XsdMathExpression::
round ()
{
  return this->round_;
}

inline
void XsdMathExpression::
round (const round_type& x)
{
  this->round_.set (x);
}

inline
void XsdMathExpression::
round (const round_optional& x)
{
  this->round_ = x;
}

inline
void XsdMathExpression::
round (::std::auto_ptr< round_type > x)
{
  this->round_.set (x);
}

inline
const XsdMathExpression::sine_optional& XsdMathExpression::
sine () const
{
  return this->sine_;
}

inline
XsdMathExpression::sine_optional& XsdMathExpression::
sine ()
{
  return this->sine_;
}

inline
void XsdMathExpression::
sine (const sine_type& x)
{
  this->sine_.set (x);
}

inline
void XsdMathExpression::
sine (const sine_optional& x)
{
  this->sine_ = x;
}

inline
void XsdMathExpression::
sine (::std::auto_ptr< sine_type > x)
{
  this->sine_.set (x);
}

inline
const XsdMathExpression::sqrt_optional& XsdMathExpression::
sqrt () const
{
  return this->sqrt_;
}

inline
XsdMathExpression::sqrt_optional& XsdMathExpression::
sqrt ()
{
  return this->sqrt_;
}

inline
void XsdMathExpression::
sqrt (const sqrt_type& x)
{
  this->sqrt_.set (x);
}

inline
void XsdMathExpression::
sqrt (const sqrt_optional& x)
{
  this->sqrt_ = x;
}

inline
void XsdMathExpression::
sqrt (::std::auto_ptr< sqrt_type > x)
{
  this->sqrt_.set (x);
}

inline
const XsdMathExpression::square_optional& XsdMathExpression::
square () const
{
  return this->square_;
}

inline
XsdMathExpression::square_optional& XsdMathExpression::
square ()
{
  return this->square_;
}

inline
void XsdMathExpression::
square (const square_type& x)
{
  this->square_.set (x);
}

inline
void XsdMathExpression::
square (const square_optional& x)
{
  this->square_ = x;
}

inline
void XsdMathExpression::
square (::std::auto_ptr< square_type > x)
{
  this->square_.set (x);
}

inline
const XsdMathExpression::subtract_optional& XsdMathExpression::
subtract () const
{
  return this->subtract_;
}

inline
XsdMathExpression::subtract_optional& XsdMathExpression::
subtract ()
{
  return this->subtract_;
}

inline
void XsdMathExpression::
subtract (const subtract_type& x)
{
  this->subtract_.set (x);
}

inline
void XsdMathExpression::
subtract (const subtract_optional& x)
{
  this->subtract_ = x;
}

inline
void XsdMathExpression::
subtract (::std::auto_ptr< subtract_type > x)
{
  this->subtract_.set (x);
}


// XsdCompareExpression
// 

inline
const XsdCompareExpression::eq_optional& XsdCompareExpression::
eq () const
{
  return this->eq_;
}

inline
XsdCompareExpression::eq_optional& XsdCompareExpression::
eq ()
{
  return this->eq_;
}

inline
void XsdCompareExpression::
eq (const eq_type& x)
{
  this->eq_.set (x);
}

inline
void XsdCompareExpression::
eq (const eq_optional& x)
{
  this->eq_ = x;
}

inline
void XsdCompareExpression::
eq (::std::auto_ptr< eq_type > x)
{
  this->eq_.set (x);
}

inline
const XsdCompareExpression::ne_optional& XsdCompareExpression::
ne () const
{
  return this->ne_;
}

inline
XsdCompareExpression::ne_optional& XsdCompareExpression::
ne ()
{
  return this->ne_;
}

inline
void XsdCompareExpression::
ne (const ne_type& x)
{
  this->ne_.set (x);
}

inline
void XsdCompareExpression::
ne (const ne_optional& x)
{
  this->ne_ = x;
}

inline
void XsdCompareExpression::
ne (::std::auto_ptr< ne_type > x)
{
  this->ne_.set (x);
}

inline
const XsdCompareExpression::ge_optional& XsdCompareExpression::
ge () const
{
  return this->ge_;
}

inline
XsdCompareExpression::ge_optional& XsdCompareExpression::
ge ()
{
  return this->ge_;
}

inline
void XsdCompareExpression::
ge (const ge_type& x)
{
  this->ge_.set (x);
}

inline
void XsdCompareExpression::
ge (const ge_optional& x)
{
  this->ge_ = x;
}

inline
void XsdCompareExpression::
ge (::std::auto_ptr< ge_type > x)
{
  this->ge_.set (x);
}

inline
const XsdCompareExpression::gt_optional& XsdCompareExpression::
gt () const
{
  return this->gt_;
}

inline
XsdCompareExpression::gt_optional& XsdCompareExpression::
gt ()
{
  return this->gt_;
}

inline
void XsdCompareExpression::
gt (const gt_type& x)
{
  this->gt_.set (x);
}

inline
void XsdCompareExpression::
gt (const gt_optional& x)
{
  this->gt_ = x;
}

inline
void XsdCompareExpression::
gt (::std::auto_ptr< gt_type > x)
{
  this->gt_.set (x);
}

inline
const XsdCompareExpression::le_optional& XsdCompareExpression::
le () const
{
  return this->le_;
}

inline
XsdCompareExpression::le_optional& XsdCompareExpression::
le ()
{
  return this->le_;
}

inline
void XsdCompareExpression::
le (const le_type& x)
{
  this->le_.set (x);
}

inline
void XsdCompareExpression::
le (const le_optional& x)
{
  this->le_ = x;
}

inline
void XsdCompareExpression::
le (::std::auto_ptr< le_type > x)
{
  this->le_.set (x);
}

inline
const XsdCompareExpression::lt_optional& XsdCompareExpression::
lt () const
{
  return this->lt_;
}

inline
XsdCompareExpression::lt_optional& XsdCompareExpression::
lt ()
{
  return this->lt_;
}

inline
void XsdCompareExpression::
lt (const lt_type& x)
{
  this->lt_.set (x);
}

inline
void XsdCompareExpression::
lt (const lt_optional& x)
{
  this->lt_ = x;
}

inline
void XsdCompareExpression::
lt (::std::auto_ptr< lt_type > x)
{
  this->lt_.set (x);
}


// XsdLogicalExpression
// 

inline
const XsdLogicalExpression::and_optional& XsdLogicalExpression::
and_ () const
{
  return this->and__;
}

inline
XsdLogicalExpression::and_optional& XsdLogicalExpression::
and_ ()
{
  return this->and__;
}

inline
void XsdLogicalExpression::
and_ (const and_type& x)
{
  this->and__.set (x);
}

inline
void XsdLogicalExpression::
and_ (const and_optional& x)
{
  this->and__ = x;
}

inline
void XsdLogicalExpression::
and_ (::std::auto_ptr< and_type > x)
{
  this->and__.set (x);
}

inline
const XsdLogicalExpression::ifThenElse_optional& XsdLogicalExpression::
ifThenElse () const
{
  return this->ifThenElse_;
}

inline
XsdLogicalExpression::ifThenElse_optional& XsdLogicalExpression::
ifThenElse ()
{
  return this->ifThenElse_;
}

inline
void XsdLogicalExpression::
ifThenElse (const ifThenElse_type& x)
{
  this->ifThenElse_.set (x);
}

inline
void XsdLogicalExpression::
ifThenElse (const ifThenElse_optional& x)
{
  this->ifThenElse_ = x;
}

inline
void XsdLogicalExpression::
ifThenElse (::std::auto_ptr< ifThenElse_type > x)
{
  this->ifThenElse_.set (x);
}

inline
const XsdLogicalExpression::not_optional& XsdLogicalExpression::
not_ () const
{
  return this->not__;
}

inline
XsdLogicalExpression::not_optional& XsdLogicalExpression::
not_ ()
{
  return this->not__;
}

inline
void XsdLogicalExpression::
not_ (const not_type& x)
{
  this->not__.set (x);
}

inline
void XsdLogicalExpression::
not_ (const not_optional& x)
{
  this->not__ = x;
}

inline
void XsdLogicalExpression::
not_ (::std::auto_ptr< not_type > x)
{
  this->not__.set (x);
}

inline
const XsdLogicalExpression::or_optional& XsdLogicalExpression::
or_ () const
{
  return this->or__;
}

inline
XsdLogicalExpression::or_optional& XsdLogicalExpression::
or_ ()
{
  return this->or__;
}

inline
void XsdLogicalExpression::
or_ (const or_type& x)
{
  this->or__.set (x);
}

inline
void XsdLogicalExpression::
or_ (const or_optional& x)
{
  this->or__ = x;
}

inline
void XsdLogicalExpression::
or_ (::std::auto_ptr< or_type > x)
{
  this->or__.set (x);
}

inline
const XsdLogicalExpression::xor_optional& XsdLogicalExpression::
xor_ () const
{
  return this->xor__;
}

inline
XsdLogicalExpression::xor_optional& XsdLogicalExpression::
xor_ ()
{
  return this->xor__;
}

inline
void XsdLogicalExpression::
xor_ (const xor_type& x)
{
  this->xor__.set (x);
}

inline
void XsdLogicalExpression::
xor_ (const xor_optional& x)
{
  this->xor__ = x;
}

inline
void XsdLogicalExpression::
xor_ (::std::auto_ptr< xor_type > x)
{
  this->xor__.set (x);
}


// XsdPathwiseExpression
// 

inline
const XsdPathwiseExpression::average_optional& XsdPathwiseExpression::
average () const
{
  return this->average_;
}

inline
XsdPathwiseExpression::average_optional& XsdPathwiseExpression::
average ()
{
  return this->average_;
}

inline
void XsdPathwiseExpression::
average (const average_type& x)
{
  this->average_.set (x);
}

inline
void XsdPathwiseExpression::
average (const average_optional& x)
{
  this->average_ = x;
}

inline
void XsdPathwiseExpression::
average (::std::auto_ptr< average_type > x)
{
  this->average_.set (x);
}

inline
const XsdPathwiseExpression::count_optional& XsdPathwiseExpression::
count () const
{
  return this->count_;
}

inline
XsdPathwiseExpression::count_optional& XsdPathwiseExpression::
count ()
{
  return this->count_;
}

inline
void XsdPathwiseExpression::
count (const count_type& x)
{
  this->count_.set (x);
}

inline
void XsdPathwiseExpression::
count (const count_optional& x)
{
  this->count_ = x;
}

inline
void XsdPathwiseExpression::
count (::std::auto_ptr< count_type > x)
{
  this->count_.set (x);
}

inline
const XsdPathwiseExpression::earliest_optional& XsdPathwiseExpression::
earliest () const
{
  return this->earliest_;
}

inline
XsdPathwiseExpression::earliest_optional& XsdPathwiseExpression::
earliest ()
{
  return this->earliest_;
}

inline
void XsdPathwiseExpression::
earliest (const earliest_type& x)
{
  this->earliest_.set (x);
}

inline
void XsdPathwiseExpression::
earliest (const earliest_optional& x)
{
  this->earliest_ = x;
}

inline
void XsdPathwiseExpression::
earliest (::std::auto_ptr< earliest_type > x)
{
  this->earliest_.set (x);
}

inline
const XsdPathwiseExpression::fraction_optional& XsdPathwiseExpression::
fraction () const
{
  return this->fraction_;
}

inline
XsdPathwiseExpression::fraction_optional& XsdPathwiseExpression::
fraction ()
{
  return this->fraction_;
}

inline
void XsdPathwiseExpression::
fraction (const fraction_type& x)
{
  this->fraction_.set (x);
}

inline
void XsdPathwiseExpression::
fraction (const fraction_optional& x)
{
  this->fraction_ = x;
}

inline
void XsdPathwiseExpression::
fraction (::std::auto_ptr< fraction_type > x)
{
  this->fraction_.set (x);
}

inline
const XsdPathwiseExpression::lagged_optional& XsdPathwiseExpression::
lagged () const
{
  return this->lagged_;
}

inline
XsdPathwiseExpression::lagged_optional& XsdPathwiseExpression::
lagged ()
{
  return this->lagged_;
}

inline
void XsdPathwiseExpression::
lagged (const lagged_type& x)
{
  this->lagged_.set (x);
}

inline
void XsdPathwiseExpression::
lagged (const lagged_optional& x)
{
  this->lagged_ = x;
}

inline
void XsdPathwiseExpression::
lagged (::std::auto_ptr< lagged_type > x)
{
  this->lagged_.set (x);
}

inline
const XsdPathwiseExpression::latest_optional& XsdPathwiseExpression::
latest () const
{
  return this->latest_;
}

inline
XsdPathwiseExpression::latest_optional& XsdPathwiseExpression::
latest ()
{
  return this->latest_;
}

inline
void XsdPathwiseExpression::
latest (const latest_type& x)
{
  this->latest_.set (x);
}

inline
void XsdPathwiseExpression::
latest (const latest_optional& x)
{
  this->latest_ = x;
}

inline
void XsdPathwiseExpression::
latest (::std::auto_ptr< latest_type > x)
{
  this->latest_.set (x);
}

inline
const XsdPathwiseExpression::lower_optional& XsdPathwiseExpression::
lower () const
{
  return this->lower_;
}

inline
XsdPathwiseExpression::lower_optional& XsdPathwiseExpression::
lower ()
{
  return this->lower_;
}

inline
void XsdPathwiseExpression::
lower (const lower_type& x)
{
  this->lower_.set (x);
}

inline
void XsdPathwiseExpression::
lower (const lower_optional& x)
{
  this->lower_ = x;
}

inline
void XsdPathwiseExpression::
lower (::std::auto_ptr< lower_type > x)
{
  this->lower_.set (x);
}

inline
const XsdPathwiseExpression::observe_optional& XsdPathwiseExpression::
observe () const
{
  return this->observe_;
}

inline
XsdPathwiseExpression::observe_optional& XsdPathwiseExpression::
observe ()
{
  return this->observe_;
}

inline
void XsdPathwiseExpression::
observe (const observe_type& x)
{
  this->observe_.set (x);
}

inline
void XsdPathwiseExpression::
observe (const observe_optional& x)
{
  this->observe_ = x;
}

inline
void XsdPathwiseExpression::
observe (::std::auto_ptr< observe_type > x)
{
  this->observe_.set (x);
}

inline
const XsdPathwiseExpression::ratio_optional& XsdPathwiseExpression::
ratio () const
{
  return this->ratio_;
}

inline
XsdPathwiseExpression::ratio_optional& XsdPathwiseExpression::
ratio ()
{
  return this->ratio_;
}

inline
void XsdPathwiseExpression::
ratio (const ratio_type& x)
{
  this->ratio_.set (x);
}

inline
void XsdPathwiseExpression::
ratio (const ratio_optional& x)
{
  this->ratio_ = x;
}

inline
void XsdPathwiseExpression::
ratio (::std::auto_ptr< ratio_type > x)
{
  this->ratio_.set (x);
}

inline
const XsdPathwiseExpression::return_optional& XsdPathwiseExpression::
return_ () const
{
  return this->return__;
}

inline
XsdPathwiseExpression::return_optional& XsdPathwiseExpression::
return_ ()
{
  return this->return__;
}

inline
void XsdPathwiseExpression::
return_ (const return_type& x)
{
  this->return__.set (x);
}

inline
void XsdPathwiseExpression::
return_ (const return_optional& x)
{
  this->return__ = x;
}

inline
void XsdPathwiseExpression::
return_ (::std::auto_ptr< return_type > x)
{
  this->return__.set (x);
}

inline
const XsdPathwiseExpression::upper_optional& XsdPathwiseExpression::
upper () const
{
  return this->upper_;
}

inline
XsdPathwiseExpression::upper_optional& XsdPathwiseExpression::
upper ()
{
  return this->upper_;
}

inline
void XsdPathwiseExpression::
upper (const upper_type& x)
{
  this->upper_.set (x);
}

inline
void XsdPathwiseExpression::
upper (const upper_optional& x)
{
  this->upper_ = x;
}

inline
void XsdPathwiseExpression::
upper (::std::auto_ptr< upper_type > x)
{
  this->upper_.set (x);
}

inline
const XsdPathwiseExpression::sum_optional& XsdPathwiseExpression::
sum () const
{
  return this->sum_;
}

inline
XsdPathwiseExpression::sum_optional& XsdPathwiseExpression::
sum ()
{
  return this->sum_;
}

inline
void XsdPathwiseExpression::
sum (const sum_type& x)
{
  this->sum_.set (x);
}

inline
void XsdPathwiseExpression::
sum (const sum_optional& x)
{
  this->sum_ = x;
}

inline
void XsdPathwiseExpression::
sum (::std::auto_ptr< sum_type > x)
{
  this->sum_.set (x);
}


// XsdBasketExpression
// 

inline
const XsdBasketExpression::add_optional& XsdBasketExpression::
add () const
{
  return this->add_;
}

inline
XsdBasketExpression::add_optional& XsdBasketExpression::
add ()
{
  return this->add_;
}

inline
void XsdBasketExpression::
add (const add_type& x)
{
  this->add_.set (x);
}

inline
void XsdBasketExpression::
add (const add_optional& x)
{
  this->add_ = x;
}

inline
void XsdBasketExpression::
add (::std::auto_ptr< add_type > x)
{
  this->add_.set (x);
}

inline
const XsdBasketExpression::best_optional& XsdBasketExpression::
best () const
{
  return this->best_;
}

inline
XsdBasketExpression::best_optional& XsdBasketExpression::
best ()
{
  return this->best_;
}

inline
void XsdBasketExpression::
best (const best_type& x)
{
  this->best_.set (x);
}

inline
void XsdBasketExpression::
best (const best_optional& x)
{
  this->best_ = x;
}

inline
void XsdBasketExpression::
best (::std::auto_ptr< best_type > x)
{
  this->best_.set (x);
}

inline
const XsdBasketExpression::inner_optional& XsdBasketExpression::
inner () const
{
  return this->inner_;
}

inline
XsdBasketExpression::inner_optional& XsdBasketExpression::
inner ()
{
  return this->inner_;
}

inline
void XsdBasketExpression::
inner (const inner_type& x)
{
  this->inner_.set (x);
}

inline
void XsdBasketExpression::
inner (const inner_optional& x)
{
  this->inner_ = x;
}

inline
void XsdBasketExpression::
inner (::std::auto_ptr< inner_type > x)
{
  this->inner_.set (x);
}

inline
const XsdBasketExpression::outer_optional& XsdBasketExpression::
outer () const
{
  return this->outer_;
}

inline
XsdBasketExpression::outer_optional& XsdBasketExpression::
outer ()
{
  return this->outer_;
}

inline
void XsdBasketExpression::
outer (const outer_type& x)
{
  this->outer_.set (x);
}

inline
void XsdBasketExpression::
outer (const outer_optional& x)
{
  this->outer_ = x;
}

inline
void XsdBasketExpression::
outer (::std::auto_ptr< outer_type > x)
{
  this->outer_.set (x);
}

inline
const XsdBasketExpression::remove_optional& XsdBasketExpression::
remove () const
{
  return this->remove_;
}

inline
XsdBasketExpression::remove_optional& XsdBasketExpression::
remove ()
{
  return this->remove_;
}

inline
void XsdBasketExpression::
remove (const remove_type& x)
{
  this->remove_.set (x);
}

inline
void XsdBasketExpression::
remove (const remove_optional& x)
{
  this->remove_ = x;
}

inline
void XsdBasketExpression::
remove (::std::auto_ptr< remove_type > x)
{
  this->remove_.set (x);
}

inline
const XsdBasketExpression::size_optional& XsdBasketExpression::
size () const
{
  return this->size_;
}

inline
XsdBasketExpression::size_optional& XsdBasketExpression::
size ()
{
  return this->size_;
}

inline
void XsdBasketExpression::
size (const size_type& x)
{
  this->size_.set (x);
}

inline
void XsdBasketExpression::
size (const size_optional& x)
{
  this->size_ = x;
}

inline
void XsdBasketExpression::
size (::std::auto_ptr< size_type > x)
{
  this->size_.set (x);
}

inline
const XsdBasketExpression::worst_optional& XsdBasketExpression::
worst () const
{
  return this->worst_;
}

inline
XsdBasketExpression::worst_optional& XsdBasketExpression::
worst ()
{
  return this->worst_;
}

inline
void XsdBasketExpression::
worst (const worst_type& x)
{
  this->worst_.set (x);
}

inline
void XsdBasketExpression::
worst (const worst_optional& x)
{
  this->worst_ = x;
}

inline
void XsdBasketExpression::
worst (::std::auto_ptr< worst_type > x)
{
  this->worst_.set (x);
}


// XsdCashflowExpression
// 

inline
const XsdCashflowExpression::average_optional& XsdCashflowExpression::
average () const
{
  return this->average_;
}

inline
XsdCashflowExpression::average_optional& XsdCashflowExpression::
average ()
{
  return this->average_;
}

inline
void XsdCashflowExpression::
average (const average_type& x)
{
  this->average_.set (x);
}

inline
void XsdCashflowExpression::
average (const average_optional& x)
{
  this->average_ = x;
}

inline
void XsdCashflowExpression::
average (::std::auto_ptr< average_type > x)
{
  this->average_.set (x);
}

inline
const XsdCashflowExpression::minimum_optional& XsdCashflowExpression::
minimum () const
{
  return this->minimum_;
}

inline
XsdCashflowExpression::minimum_optional& XsdCashflowExpression::
minimum ()
{
  return this->minimum_;
}

inline
void XsdCashflowExpression::
minimum (const minimum_type& x)
{
  this->minimum_.set (x);
}

inline
void XsdCashflowExpression::
minimum (const minimum_optional& x)
{
  this->minimum_ = x;
}

inline
void XsdCashflowExpression::
minimum (::std::auto_ptr< minimum_type > x)
{
  this->minimum_.set (x);
}

inline
const XsdCashflowExpression::maximum_optional& XsdCashflowExpression::
maximum () const
{
  return this->maximum_;
}

inline
XsdCashflowExpression::maximum_optional& XsdCashflowExpression::
maximum ()
{
  return this->maximum_;
}

inline
void XsdCashflowExpression::
maximum (const maximum_type& x)
{
  this->maximum_.set (x);
}

inline
void XsdCashflowExpression::
maximum (const maximum_optional& x)
{
  this->maximum_ = x;
}

inline
void XsdCashflowExpression::
maximum (::std::auto_ptr< maximum_type > x)
{
  this->maximum_.set (x);
}

inline
const XsdCashflowExpression::total_optional& XsdCashflowExpression::
total () const
{
  return this->total_;
}

inline
XsdCashflowExpression::total_optional& XsdCashflowExpression::
total ()
{
  return this->total_;
}

inline
void XsdCashflowExpression::
total (const total_type& x)
{
  this->total_.set (x);
}

inline
void XsdCashflowExpression::
total (const total_optional& x)
{
  this->total_ = x;
}

inline
void XsdCashflowExpression::
total (::std::auto_ptr< total_type > x)
{
  this->total_.set (x);
}

inline
const XsdCashflowExpression::value_optional& XsdCashflowExpression::
value () const
{
  return this->value_;
}

inline
XsdCashflowExpression::value_optional& XsdCashflowExpression::
value ()
{
  return this->value_;
}

inline
void XsdCashflowExpression::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdCashflowExpression::
value (const value_optional& x)
{
  this->value_ = x;
}

inline
void XsdCashflowExpression::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}

inline
const XsdCashflowExpression::balance_optional& XsdCashflowExpression::
balance () const
{
  return this->balance_;
}

inline
XsdCashflowExpression::balance_optional& XsdCashflowExpression::
balance ()
{
  return this->balance_;
}

inline
void XsdCashflowExpression::
balance (const balance_type& x)
{
  this->balance_.set (x);
}

inline
void XsdCashflowExpression::
balance (const balance_optional& x)
{
  this->balance_ = x;
}

inline
void XsdCashflowExpression::
balance (::std::auto_ptr< balance_type > x)
{
  this->balance_.set (x);
}


// XsdBinaryArgs
// 

inline
const XsdBinaryArgs::first_type& XsdBinaryArgs::
first () const
{
  return this->first_.get ();
}

inline
XsdBinaryArgs::first_type& XsdBinaryArgs::
first ()
{
  return this->first_.get ();
}

inline
void XsdBinaryArgs::
first (const first_type& x)
{
  this->first_.set (x);
}

inline
void XsdBinaryArgs::
first (::std::auto_ptr< first_type > x)
{
  this->first_.set (x);
}

inline
const XsdBinaryArgs::second_type& XsdBinaryArgs::
second () const
{
  return this->second_.get ();
}

inline
XsdBinaryArgs::second_type& XsdBinaryArgs::
second ()
{
  return this->second_.get ();
}

inline
void XsdBinaryArgs::
second (const second_type& x)
{
  this->second_.set (x);
}

inline
void XsdBinaryArgs::
second (::std::auto_ptr< second_type > x)
{
  this->second_.set (x);
}


// XsdTernaryArgs
// 

inline
const XsdTernaryArgs::third_type& XsdTernaryArgs::
third () const
{
  return this->third_.get ();
}

inline
XsdTernaryArgs::third_type& XsdTernaryArgs::
third ()
{
  return this->third_.get ();
}

inline
void XsdTernaryArgs::
third (const third_type& x)
{
  this->third_.set (x);
}

inline
void XsdTernaryArgs::
third (::std::auto_ptr< third_type > x)
{
  this->third_.set (x);
}


// XsdPathwiseArgs
// 

inline
const XsdPathwiseArgs::index_type& XsdPathwiseArgs::
index () const
{
  return this->index_.get ();
}

inline
XsdPathwiseArgs::index_type& XsdPathwiseArgs::
index ()
{
  return this->index_.get ();
}

inline
void XsdPathwiseArgs::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdPathwiseArgs::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdPathwiseArgs::lag_type& XsdPathwiseArgs::
lag () const
{
  return this->lag_.get ();
}

inline
XsdPathwiseArgs::lag_type& XsdPathwiseArgs::
lag ()
{
  return this->lag_.get ();
}

inline
void XsdPathwiseArgs::
lag (const lag_type& x)
{
  this->lag_.set (x);
}

inline
void XsdPathwiseArgs::
lag (::std::auto_ptr< lag_type > x)
{
  this->lag_.set (x);
}

inline
const XsdPathwiseArgs::period_type& XsdPathwiseArgs::
period () const
{
  return this->period_.get ();
}

inline
XsdPathwiseArgs::period_type& XsdPathwiseArgs::
period ()
{
  return this->period_.get ();
}

inline
void XsdPathwiseArgs::
period (const period_type& x)
{
  this->period_.set (x);
}

inline
void XsdPathwiseArgs::
period (::std::auto_ptr< period_type > x)
{
  this->period_.set (x);
}


// XsdPathwiseDatedArgs
// 

inline
const XsdPathwiseDatedArgs::date_type& XsdPathwiseDatedArgs::
date () const
{
  return this->date_.get ();
}

inline
XsdPathwiseDatedArgs::date_type& XsdPathwiseDatedArgs::
date ()
{
  return this->date_.get ();
}

inline
void XsdPathwiseDatedArgs::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdPathwiseDatedArgs::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}


// XsdPathwiseLagArgs
// 

inline
const XsdPathwiseLagArgs::index_type& XsdPathwiseLagArgs::
index () const
{
  return this->index_.get ();
}

inline
XsdPathwiseLagArgs::index_type& XsdPathwiseLagArgs::
index ()
{
  return this->index_.get ();
}

inline
void XsdPathwiseLagArgs::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdPathwiseLagArgs::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdPathwiseLagArgs::lag_type& XsdPathwiseLagArgs::
lag () const
{
  return this->lag_.get ();
}

inline
XsdPathwiseLagArgs::lag_type& XsdPathwiseLagArgs::
lag ()
{
  return this->lag_.get ();
}

inline
void XsdPathwiseLagArgs::
lag (const lag_type& x)
{
  this->lag_.set (x);
}

inline
void XsdPathwiseLagArgs::
lag (::std::auto_ptr< lag_type > x)
{
  this->lag_.set (x);
}


// XsdPathwiseObserveArgs
// 

inline
const XsdPathwiseObserveArgs::index_type& XsdPathwiseObserveArgs::
index () const
{
  return this->index_.get ();
}

inline
XsdPathwiseObserveArgs::index_type& XsdPathwiseObserveArgs::
index ()
{
  return this->index_.get ();
}

inline
void XsdPathwiseObserveArgs::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdPathwiseObserveArgs::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdPathwiseObserveArgs::date_type& XsdPathwiseObserveArgs::
date () const
{
  return this->date_.get ();
}

inline
XsdPathwiseObserveArgs::date_type& XsdPathwiseObserveArgs::
date ()
{
  return this->date_.get ();
}

inline
void XsdPathwiseObserveArgs::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdPathwiseObserveArgs::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}


// XsdBasketAddRemove
// 

inline
const XsdBasketAddRemove::basket_type& XsdBasketAddRemove::
basket () const
{
  return this->basket_.get ();
}

inline
XsdBasketAddRemove::basket_type& XsdBasketAddRemove::
basket ()
{
  return this->basket_.get ();
}

inline
void XsdBasketAddRemove::
basket (const basket_type& x)
{
  this->basket_.set (x);
}

inline
void XsdBasketAddRemove::
basket (::std::auto_ptr< basket_type > x)
{
  this->basket_.set (x);
}

inline
const XsdBasketAddRemove::index_type& XsdBasketAddRemove::
index () const
{
  return this->index_.get ();
}

inline
XsdBasketAddRemove::index_type& XsdBasketAddRemove::
index ()
{
  return this->index_.get ();
}

inline
void XsdBasketAddRemove::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdBasketAddRemove::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdBasketAddRemove::weight_optional& XsdBasketAddRemove::
weight () const
{
  return this->weight_;
}

inline
XsdBasketAddRemove::weight_optional& XsdBasketAddRemove::
weight ()
{
  return this->weight_;
}

inline
void XsdBasketAddRemove::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
void XsdBasketAddRemove::
weight (const weight_optional& x)
{
  this->weight_ = x;
}

inline
void XsdBasketAddRemove::
weight (::std::auto_ptr< weight_type > x)
{
  this->weight_.set (x);
}


// XsdBasketBestWorst
// 

inline
const XsdBasketBestWorst::basket_type& XsdBasketBestWorst::
basket () const
{
  return this->basket_.get ();
}

inline
XsdBasketBestWorst::basket_type& XsdBasketBestWorst::
basket ()
{
  return this->basket_.get ();
}

inline
void XsdBasketBestWorst::
basket (const basket_type& x)
{
  this->basket_.set (x);
}

inline
void XsdBasketBestWorst::
basket (::std::auto_ptr< basket_type > x)
{
  this->basket_.set (x);
}

inline
const XsdBasketBestWorst::date_optional& XsdBasketBestWorst::
date () const
{
  return this->date_;
}

inline
XsdBasketBestWorst::date_optional& XsdBasketBestWorst::
date ()
{
  return this->date_;
}

inline
void XsdBasketBestWorst::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdBasketBestWorst::
date (const date_optional& x)
{
  this->date_ = x;
}

inline
void XsdBasketBestWorst::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const XsdBasketBestWorst::rank_type& XsdBasketBestWorst::
rank () const
{
  return this->rank_.get ();
}

inline
XsdBasketBestWorst::rank_type& XsdBasketBestWorst::
rank ()
{
  return this->rank_.get ();
}

inline
void XsdBasketBestWorst::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
XsdBasketBestWorst::rank_type XsdBasketBestWorst::
rank_default_value ()
{
  return rank_type (0);
}


// XsdCashflowArgs
// 

inline
const XsdCashflowArgs::minLag_optional& XsdCashflowArgs::
minLag () const
{
  return this->minLag_;
}

inline
XsdCashflowArgs::minLag_optional& XsdCashflowArgs::
minLag ()
{
  return this->minLag_;
}

inline
void XsdCashflowArgs::
minLag (const minLag_type& x)
{
  this->minLag_.set (x);
}

inline
void XsdCashflowArgs::
minLag (const minLag_optional& x)
{
  this->minLag_ = x;
}

inline
void XsdCashflowArgs::
minLag (::std::auto_ptr< minLag_type > x)
{
  this->minLag_.set (x);
}

inline
const XsdCashflowArgs::maxLag_optional& XsdCashflowArgs::
maxLag () const
{
  return this->maxLag_;
}

inline
XsdCashflowArgs::maxLag_optional& XsdCashflowArgs::
maxLag ()
{
  return this->maxLag_;
}

inline
void XsdCashflowArgs::
maxLag (const maxLag_type& x)
{
  this->maxLag_.set (x);
}

inline
void XsdCashflowArgs::
maxLag (const maxLag_optional& x)
{
  this->maxLag_ = x;
}

inline
void XsdCashflowArgs::
maxLag (::std::auto_ptr< maxLag_type > x)
{
  this->maxLag_.set (x);
}

inline
const XsdCashflowArgs::type_type& XsdCashflowArgs::
type () const
{
  return this->type_.get ();
}

inline
XsdCashflowArgs::type_type& XsdCashflowArgs::
type ()
{
  return this->type_.get ();
}

inline
void XsdCashflowArgs::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdCashflowArgs::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const XsdCashflowArgs::type_type& XsdCashflowArgs::
type_default_value ()
{
  return type_default_value_;
}

inline
const XsdCashflowArgs::currency_type& XsdCashflowArgs::
currency () const
{
  return this->currency_.get ();
}

inline
XsdCashflowArgs::currency_type& XsdCashflowArgs::
currency ()
{
  return this->currency_.get ();
}

inline
void XsdCashflowArgs::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

inline
void XsdCashflowArgs::
currency (::std::auto_ptr< currency_type > x)
{
  this->currency_.set (x);
}

inline
const XsdCashflowArgs::currency_type& XsdCashflowArgs::
currency_default_value ()
{
  return currency_default_value_;
}


// XsdCashflowValue
// 

inline
const XsdCashflowValue::lag_optional& XsdCashflowValue::
lag () const
{
  return this->lag_;
}

inline
XsdCashflowValue::lag_optional& XsdCashflowValue::
lag ()
{
  return this->lag_;
}

inline
void XsdCashflowValue::
lag (const lag_type& x)
{
  this->lag_.set (x);
}

inline
void XsdCashflowValue::
lag (const lag_optional& x)
{
  this->lag_ = x;
}

inline
void XsdCashflowValue::
lag (::std::auto_ptr< lag_type > x)
{
  this->lag_.set (x);
}

inline
const XsdCashflowValue::type_type& XsdCashflowValue::
type () const
{
  return this->type_.get ();
}

inline
XsdCashflowValue::type_type& XsdCashflowValue::
type ()
{
  return this->type_.get ();
}

inline
void XsdCashflowValue::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdCashflowValue::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const XsdCashflowValue::type_type& XsdCashflowValue::
type_default_value ()
{
  return type_default_value_;
}

inline
const XsdCashflowValue::currency_type& XsdCashflowValue::
currency () const
{
  return this->currency_.get ();
}

inline
XsdCashflowValue::currency_type& XsdCashflowValue::
currency ()
{
  return this->currency_.get ();
}

inline
void XsdCashflowValue::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

inline
void XsdCashflowValue::
currency (::std::auto_ptr< currency_type > x)
{
  this->currency_.set (x);
}

inline
const XsdCashflowValue::currency_type& XsdCashflowValue::
currency_default_value ()
{
  return currency_default_value_;
}


// round
// 

inline
const round::rounding_type& round::
rounding () const
{
  return this->rounding_.get ();
}

inline
round::rounding_type& round::
rounding ()
{
  return this->rounding_.get ();
}

inline
void round::
rounding (const rounding_type& x)
{
  this->rounding_.set (x);
}

inline
void round::
rounding (::std::auto_ptr< rounding_type > x)
{
  this->rounding_.set (x);
}

inline
const round::rounding_type& round::
rounding_default_value ()
{
  return rounding_default_value_;
}


// average
// 

inline
const average::method_type& average::
method () const
{
  return this->method_.get ();
}

inline
average::method_type& average::
method ()
{
  return this->method_.get ();
}

inline
void average::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void average::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const average::method_type& average::
method_default_value ()
{
  return method_default_value_;
}


// lower
// 

inline
const lower::rank_type& lower::
rank () const
{
  return this->rank_.get ();
}

inline
lower::rank_type& lower::
rank ()
{
  return this->rank_.get ();
}

inline
void lower::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
lower::rank_type lower::
rank_default_value ()
{
  return rank_type (0);
}


// return_
// 

inline
const return_::frequency_optional& return_::
frequency () const
{
  return this->frequency_;
}

inline
return_::frequency_optional& return_::
frequency ()
{
  return this->frequency_;
}

inline
void return_::
frequency (const frequency_type& x)
{
  this->frequency_.set (x);
}

inline
void return_::
frequency (const frequency_optional& x)
{
  this->frequency_ = x;
}

inline
void return_::
frequency (::std::auto_ptr< frequency_type > x)
{
  this->frequency_.set (x);
}


// upper
// 

inline
const upper::rank_type& upper::
rank () const
{
  return this->rank_.get ();
}

inline
upper::rank_type& upper::
rank ()
{
  return this->rank_.get ();
}

inline
void upper::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
upper::rank_type upper::
rank_default_value ()
{
  return rank_type (0);
}


// sum
// 

inline
const sum::method_type& sum::
method () const
{
  return this->method_.get ();
}

inline
sum::method_type& sum::
method ()
{
  return this->method_.get ();
}

inline
void sum::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void sum::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const sum::method_type& sum::
method_default_value ()
{
  return method_default_value_;
}


// average1
// 

inline
const average1::method_type& average1::
method () const
{
  return this->method_.get ();
}

inline
average1::method_type& average1::
method ()
{
  return this->method_.get ();
}

inline
void average1::
method (const method_type& x)
{
  this->method_.set (x);
}

inline
void average1::
method (::std::auto_ptr< method_type > x)
{
  this->method_.set (x);
}

inline
const average1::method_type& average1::
method_default_value ()
{
  return method_default_value_;
}


// minimum
// 

inline
const minimum::rank_type& minimum::
rank () const
{
  return this->rank_.get ();
}

inline
minimum::rank_type& minimum::
rank ()
{
  return this->rank_.get ();
}

inline
void minimum::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
minimum::rank_type minimum::
rank_default_value ()
{
  return rank_type (0);
}


// maximum
// 

inline
const maximum::rank_type& maximum::
rank () const
{
  return this->rank_.get ();
}

inline
maximum::rank_type& maximum::
rank ()
{
  return this->rank_.get ();
}

inline
void maximum::
rank (const rank_type& x)
{
  this->rank_.set (x);
}

inline
maximum::rank_type maximum::
rank_default_value ()
{
  return rank_type (0);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_EXPRESSION_IXX
