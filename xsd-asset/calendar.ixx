// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_CALENDAR_IXX
#define CXX___SCHEMA_XSD_ASSET_CALENDAR_IXX

// Begin prologue.
//
//
// End prologue.

#include "types.ixx"

// XsdCalendar
// 


// XsdModifiedCalendar
// 

inline
const XsdModifiedCalendar::calendar_type& XsdModifiedCalendar::
calendar () const
{
  return this->calendar_.get ();
}

inline
XsdModifiedCalendar::calendar_type& XsdModifiedCalendar::
calendar ()
{
  return this->calendar_.get ();
}

inline
void XsdModifiedCalendar::
calendar (const calendar_type& x)
{
  this->calendar_.set (x);
}

inline
void XsdModifiedCalendar::
calendar (::std::auto_ptr< calendar_type > x)
{
  this->calendar_.set (x);
}

inline
const XsdModifiedCalendar::add_optional& XsdModifiedCalendar::
add () const
{
  return this->add_;
}

inline
XsdModifiedCalendar::add_optional& XsdModifiedCalendar::
add ()
{
  return this->add_;
}

inline
void XsdModifiedCalendar::
add (const add_type& x)
{
  this->add_.set (x);
}

inline
void XsdModifiedCalendar::
add (const add_optional& x)
{
  this->add_ = x;
}

inline
void XsdModifiedCalendar::
add (::std::auto_ptr< add_type > x)
{
  this->add_.set (x);
}

inline
const XsdModifiedCalendar::remove_optional& XsdModifiedCalendar::
remove () const
{
  return this->remove_;
}

inline
XsdModifiedCalendar::remove_optional& XsdModifiedCalendar::
remove ()
{
  return this->remove_;
}

inline
void XsdModifiedCalendar::
remove (const remove_type& x)
{
  this->remove_.set (x);
}

inline
void XsdModifiedCalendar::
remove (const remove_optional& x)
{
  this->remove_ = x;
}

inline
void XsdModifiedCalendar::
remove (::std::auto_ptr< remove_type > x)
{
  this->remove_.set (x);
}


// XsdRuleBasedCalendar
// 

inline
const XsdRuleBasedCalendar::Argentina_optional& XsdRuleBasedCalendar::
Argentina () const
{
  return this->Argentina_;
}

inline
XsdRuleBasedCalendar::Argentina_optional& XsdRuleBasedCalendar::
Argentina ()
{
  return this->Argentina_;
}

inline
void XsdRuleBasedCalendar::
Argentina (const Argentina_type& x)
{
  this->Argentina_.set (x);
}

inline
void XsdRuleBasedCalendar::
Argentina (const Argentina_optional& x)
{
  this->Argentina_ = x;
}

inline
void XsdRuleBasedCalendar::
Argentina (::std::auto_ptr< Argentina_type > x)
{
  this->Argentina_.set (x);
}

inline
const XsdRuleBasedCalendar::Australia_optional& XsdRuleBasedCalendar::
Australia () const
{
  return this->Australia_;
}

inline
XsdRuleBasedCalendar::Australia_optional& XsdRuleBasedCalendar::
Australia ()
{
  return this->Australia_;
}

inline
void XsdRuleBasedCalendar::
Australia (const Australia_type& x)
{
  this->Australia_.set (x);
}

inline
void XsdRuleBasedCalendar::
Australia (const Australia_optional& x)
{
  this->Australia_ = x;
}

inline
void XsdRuleBasedCalendar::
Australia (::std::auto_ptr< Australia_type > x)
{
  this->Australia_.set (x);
}

inline
const XsdRuleBasedCalendar::Brazil_optional& XsdRuleBasedCalendar::
Brazil () const
{
  return this->Brazil_;
}

inline
XsdRuleBasedCalendar::Brazil_optional& XsdRuleBasedCalendar::
Brazil ()
{
  return this->Brazil_;
}

inline
void XsdRuleBasedCalendar::
Brazil (const Brazil_type& x)
{
  this->Brazil_.set (x);
}

inline
void XsdRuleBasedCalendar::
Brazil (const Brazil_optional& x)
{
  this->Brazil_ = x;
}

inline
void XsdRuleBasedCalendar::
Brazil (::std::auto_ptr< Brazil_type > x)
{
  this->Brazil_.set (x);
}

inline
const XsdRuleBasedCalendar::Canada_optional& XsdRuleBasedCalendar::
Canada () const
{
  return this->Canada_;
}

inline
XsdRuleBasedCalendar::Canada_optional& XsdRuleBasedCalendar::
Canada ()
{
  return this->Canada_;
}

inline
void XsdRuleBasedCalendar::
Canada (const Canada_type& x)
{
  this->Canada_.set (x);
}

inline
void XsdRuleBasedCalendar::
Canada (const Canada_optional& x)
{
  this->Canada_ = x;
}

inline
void XsdRuleBasedCalendar::
Canada (::std::auto_ptr< Canada_type > x)
{
  this->Canada_.set (x);
}

inline
const XsdRuleBasedCalendar::China_optional& XsdRuleBasedCalendar::
China () const
{
  return this->China_;
}

inline
XsdRuleBasedCalendar::China_optional& XsdRuleBasedCalendar::
China ()
{
  return this->China_;
}

inline
void XsdRuleBasedCalendar::
China (const China_type& x)
{
  this->China_.set (x);
}

inline
void XsdRuleBasedCalendar::
China (const China_optional& x)
{
  this->China_ = x;
}

inline
void XsdRuleBasedCalendar::
China (::std::auto_ptr< China_type > x)
{
  this->China_.set (x);
}

inline
const XsdRuleBasedCalendar::CzechRepublic_optional& XsdRuleBasedCalendar::
CzechRepublic () const
{
  return this->CzechRepublic_;
}

inline
XsdRuleBasedCalendar::CzechRepublic_optional& XsdRuleBasedCalendar::
CzechRepublic ()
{
  return this->CzechRepublic_;
}

inline
void XsdRuleBasedCalendar::
CzechRepublic (const CzechRepublic_type& x)
{
  this->CzechRepublic_.set (x);
}

inline
void XsdRuleBasedCalendar::
CzechRepublic (const CzechRepublic_optional& x)
{
  this->CzechRepublic_ = x;
}

inline
void XsdRuleBasedCalendar::
CzechRepublic (::std::auto_ptr< CzechRepublic_type > x)
{
  this->CzechRepublic_.set (x);
}

inline
const XsdRuleBasedCalendar::Denmark_optional& XsdRuleBasedCalendar::
Denmark () const
{
  return this->Denmark_;
}

inline
XsdRuleBasedCalendar::Denmark_optional& XsdRuleBasedCalendar::
Denmark ()
{
  return this->Denmark_;
}

inline
void XsdRuleBasedCalendar::
Denmark (const Denmark_type& x)
{
  this->Denmark_.set (x);
}

inline
void XsdRuleBasedCalendar::
Denmark (const Denmark_optional& x)
{
  this->Denmark_ = x;
}

inline
void XsdRuleBasedCalendar::
Denmark (::std::auto_ptr< Denmark_type > x)
{
  this->Denmark_.set (x);
}

inline
const XsdRuleBasedCalendar::ECB_optional& XsdRuleBasedCalendar::
ECB () const
{
  return this->ECB_;
}

inline
XsdRuleBasedCalendar::ECB_optional& XsdRuleBasedCalendar::
ECB ()
{
  return this->ECB_;
}

inline
void XsdRuleBasedCalendar::
ECB (const ECB_type& x)
{
  this->ECB_.set (x);
}

inline
void XsdRuleBasedCalendar::
ECB (const ECB_optional& x)
{
  this->ECB_ = x;
}

inline
void XsdRuleBasedCalendar::
ECB (::std::auto_ptr< ECB_type > x)
{
  this->ECB_.set (x);
}

inline
const XsdRuleBasedCalendar::England_optional& XsdRuleBasedCalendar::
England () const
{
  return this->England_;
}

inline
XsdRuleBasedCalendar::England_optional& XsdRuleBasedCalendar::
England ()
{
  return this->England_;
}

inline
void XsdRuleBasedCalendar::
England (const England_type& x)
{
  this->England_.set (x);
}

inline
void XsdRuleBasedCalendar::
England (const England_optional& x)
{
  this->England_ = x;
}

inline
void XsdRuleBasedCalendar::
England (::std::auto_ptr< England_type > x)
{
  this->England_.set (x);
}

inline
const XsdRuleBasedCalendar::Finland_optional& XsdRuleBasedCalendar::
Finland () const
{
  return this->Finland_;
}

inline
XsdRuleBasedCalendar::Finland_optional& XsdRuleBasedCalendar::
Finland ()
{
  return this->Finland_;
}

inline
void XsdRuleBasedCalendar::
Finland (const Finland_type& x)
{
  this->Finland_.set (x);
}

inline
void XsdRuleBasedCalendar::
Finland (const Finland_optional& x)
{
  this->Finland_ = x;
}

inline
void XsdRuleBasedCalendar::
Finland (::std::auto_ptr< Finland_type > x)
{
  this->Finland_.set (x);
}

inline
const XsdRuleBasedCalendar::Germany_optional& XsdRuleBasedCalendar::
Germany () const
{
  return this->Germany_;
}

inline
XsdRuleBasedCalendar::Germany_optional& XsdRuleBasedCalendar::
Germany ()
{
  return this->Germany_;
}

inline
void XsdRuleBasedCalendar::
Germany (const Germany_type& x)
{
  this->Germany_.set (x);
}

inline
void XsdRuleBasedCalendar::
Germany (const Germany_optional& x)
{
  this->Germany_ = x;
}

inline
void XsdRuleBasedCalendar::
Germany (::std::auto_ptr< Germany_type > x)
{
  this->Germany_.set (x);
}

inline
const XsdRuleBasedCalendar::HongKong_optional& XsdRuleBasedCalendar::
HongKong () const
{
  return this->HongKong_;
}

inline
XsdRuleBasedCalendar::HongKong_optional& XsdRuleBasedCalendar::
HongKong ()
{
  return this->HongKong_;
}

inline
void XsdRuleBasedCalendar::
HongKong (const HongKong_type& x)
{
  this->HongKong_.set (x);
}

inline
void XsdRuleBasedCalendar::
HongKong (const HongKong_optional& x)
{
  this->HongKong_ = x;
}

inline
void XsdRuleBasedCalendar::
HongKong (::std::auto_ptr< HongKong_type > x)
{
  this->HongKong_.set (x);
}

inline
const XsdRuleBasedCalendar::Hungary_optional& XsdRuleBasedCalendar::
Hungary () const
{
  return this->Hungary_;
}

inline
XsdRuleBasedCalendar::Hungary_optional& XsdRuleBasedCalendar::
Hungary ()
{
  return this->Hungary_;
}

inline
void XsdRuleBasedCalendar::
Hungary (const Hungary_type& x)
{
  this->Hungary_.set (x);
}

inline
void XsdRuleBasedCalendar::
Hungary (const Hungary_optional& x)
{
  this->Hungary_ = x;
}

inline
void XsdRuleBasedCalendar::
Hungary (::std::auto_ptr< Hungary_type > x)
{
  this->Hungary_.set (x);
}

inline
const XsdRuleBasedCalendar::Iceland_optional& XsdRuleBasedCalendar::
Iceland () const
{
  return this->Iceland_;
}

inline
XsdRuleBasedCalendar::Iceland_optional& XsdRuleBasedCalendar::
Iceland ()
{
  return this->Iceland_;
}

inline
void XsdRuleBasedCalendar::
Iceland (const Iceland_type& x)
{
  this->Iceland_.set (x);
}

inline
void XsdRuleBasedCalendar::
Iceland (const Iceland_optional& x)
{
  this->Iceland_ = x;
}

inline
void XsdRuleBasedCalendar::
Iceland (::std::auto_ptr< Iceland_type > x)
{
  this->Iceland_.set (x);
}

inline
const XsdRuleBasedCalendar::India_optional& XsdRuleBasedCalendar::
India () const
{
  return this->India_;
}

inline
XsdRuleBasedCalendar::India_optional& XsdRuleBasedCalendar::
India ()
{
  return this->India_;
}

inline
void XsdRuleBasedCalendar::
India (const India_type& x)
{
  this->India_.set (x);
}

inline
void XsdRuleBasedCalendar::
India (const India_optional& x)
{
  this->India_ = x;
}

inline
void XsdRuleBasedCalendar::
India (::std::auto_ptr< India_type > x)
{
  this->India_.set (x);
}

inline
const XsdRuleBasedCalendar::Indonesia_optional& XsdRuleBasedCalendar::
Indonesia () const
{
  return this->Indonesia_;
}

inline
XsdRuleBasedCalendar::Indonesia_optional& XsdRuleBasedCalendar::
Indonesia ()
{
  return this->Indonesia_;
}

inline
void XsdRuleBasedCalendar::
Indonesia (const Indonesia_type& x)
{
  this->Indonesia_.set (x);
}

inline
void XsdRuleBasedCalendar::
Indonesia (const Indonesia_optional& x)
{
  this->Indonesia_ = x;
}

inline
void XsdRuleBasedCalendar::
Indonesia (::std::auto_ptr< Indonesia_type > x)
{
  this->Indonesia_.set (x);
}

inline
const XsdRuleBasedCalendar::Italy_optional& XsdRuleBasedCalendar::
Italy () const
{
  return this->Italy_;
}

inline
XsdRuleBasedCalendar::Italy_optional& XsdRuleBasedCalendar::
Italy ()
{
  return this->Italy_;
}

inline
void XsdRuleBasedCalendar::
Italy (const Italy_type& x)
{
  this->Italy_.set (x);
}

inline
void XsdRuleBasedCalendar::
Italy (const Italy_optional& x)
{
  this->Italy_ = x;
}

inline
void XsdRuleBasedCalendar::
Italy (::std::auto_ptr< Italy_type > x)
{
  this->Italy_.set (x);
}

inline
const XsdRuleBasedCalendar::Japan_optional& XsdRuleBasedCalendar::
Japan () const
{
  return this->Japan_;
}

inline
XsdRuleBasedCalendar::Japan_optional& XsdRuleBasedCalendar::
Japan ()
{
  return this->Japan_;
}

inline
void XsdRuleBasedCalendar::
Japan (const Japan_type& x)
{
  this->Japan_.set (x);
}

inline
void XsdRuleBasedCalendar::
Japan (const Japan_optional& x)
{
  this->Japan_ = x;
}

inline
void XsdRuleBasedCalendar::
Japan (::std::auto_ptr< Japan_type > x)
{
  this->Japan_.set (x);
}

inline
const XsdRuleBasedCalendar::Mexico_optional& XsdRuleBasedCalendar::
Mexico () const
{
  return this->Mexico_;
}

inline
XsdRuleBasedCalendar::Mexico_optional& XsdRuleBasedCalendar::
Mexico ()
{
  return this->Mexico_;
}

inline
void XsdRuleBasedCalendar::
Mexico (const Mexico_type& x)
{
  this->Mexico_.set (x);
}

inline
void XsdRuleBasedCalendar::
Mexico (const Mexico_optional& x)
{
  this->Mexico_ = x;
}

inline
void XsdRuleBasedCalendar::
Mexico (::std::auto_ptr< Mexico_type > x)
{
  this->Mexico_.set (x);
}

inline
const XsdRuleBasedCalendar::NewZealand_optional& XsdRuleBasedCalendar::
NewZealand () const
{
  return this->NewZealand_;
}

inline
XsdRuleBasedCalendar::NewZealand_optional& XsdRuleBasedCalendar::
NewZealand ()
{
  return this->NewZealand_;
}

inline
void XsdRuleBasedCalendar::
NewZealand (const NewZealand_type& x)
{
  this->NewZealand_.set (x);
}

inline
void XsdRuleBasedCalendar::
NewZealand (const NewZealand_optional& x)
{
  this->NewZealand_ = x;
}

inline
void XsdRuleBasedCalendar::
NewZealand (::std::auto_ptr< NewZealand_type > x)
{
  this->NewZealand_.set (x);
}

inline
const XsdRuleBasedCalendar::Norway_optional& XsdRuleBasedCalendar::
Norway () const
{
  return this->Norway_;
}

inline
XsdRuleBasedCalendar::Norway_optional& XsdRuleBasedCalendar::
Norway ()
{
  return this->Norway_;
}

inline
void XsdRuleBasedCalendar::
Norway (const Norway_type& x)
{
  this->Norway_.set (x);
}

inline
void XsdRuleBasedCalendar::
Norway (const Norway_optional& x)
{
  this->Norway_ = x;
}

inline
void XsdRuleBasedCalendar::
Norway (::std::auto_ptr< Norway_type > x)
{
  this->Norway_.set (x);
}

inline
const XsdRuleBasedCalendar::Poland_optional& XsdRuleBasedCalendar::
Poland () const
{
  return this->Poland_;
}

inline
XsdRuleBasedCalendar::Poland_optional& XsdRuleBasedCalendar::
Poland ()
{
  return this->Poland_;
}

inline
void XsdRuleBasedCalendar::
Poland (const Poland_type& x)
{
  this->Poland_.set (x);
}

inline
void XsdRuleBasedCalendar::
Poland (const Poland_optional& x)
{
  this->Poland_ = x;
}

inline
void XsdRuleBasedCalendar::
Poland (::std::auto_ptr< Poland_type > x)
{
  this->Poland_.set (x);
}

inline
const XsdRuleBasedCalendar::Russia_optional& XsdRuleBasedCalendar::
Russia () const
{
  return this->Russia_;
}

inline
XsdRuleBasedCalendar::Russia_optional& XsdRuleBasedCalendar::
Russia ()
{
  return this->Russia_;
}

inline
void XsdRuleBasedCalendar::
Russia (const Russia_type& x)
{
  this->Russia_.set (x);
}

inline
void XsdRuleBasedCalendar::
Russia (const Russia_optional& x)
{
  this->Russia_ = x;
}

inline
void XsdRuleBasedCalendar::
Russia (::std::auto_ptr< Russia_type > x)
{
  this->Russia_.set (x);
}

inline
const XsdRuleBasedCalendar::SaudiArabia_optional& XsdRuleBasedCalendar::
SaudiArabia () const
{
  return this->SaudiArabia_;
}

inline
XsdRuleBasedCalendar::SaudiArabia_optional& XsdRuleBasedCalendar::
SaudiArabia ()
{
  return this->SaudiArabia_;
}

inline
void XsdRuleBasedCalendar::
SaudiArabia (const SaudiArabia_type& x)
{
  this->SaudiArabia_.set (x);
}

inline
void XsdRuleBasedCalendar::
SaudiArabia (const SaudiArabia_optional& x)
{
  this->SaudiArabia_ = x;
}

inline
void XsdRuleBasedCalendar::
SaudiArabia (::std::auto_ptr< SaudiArabia_type > x)
{
  this->SaudiArabia_.set (x);
}

inline
const XsdRuleBasedCalendar::Singapore_optional& XsdRuleBasedCalendar::
Singapore () const
{
  return this->Singapore_;
}

inline
XsdRuleBasedCalendar::Singapore_optional& XsdRuleBasedCalendar::
Singapore ()
{
  return this->Singapore_;
}

inline
void XsdRuleBasedCalendar::
Singapore (const Singapore_type& x)
{
  this->Singapore_.set (x);
}

inline
void XsdRuleBasedCalendar::
Singapore (const Singapore_optional& x)
{
  this->Singapore_ = x;
}

inline
void XsdRuleBasedCalendar::
Singapore (::std::auto_ptr< Singapore_type > x)
{
  this->Singapore_.set (x);
}

inline
const XsdRuleBasedCalendar::Slovakia_optional& XsdRuleBasedCalendar::
Slovakia () const
{
  return this->Slovakia_;
}

inline
XsdRuleBasedCalendar::Slovakia_optional& XsdRuleBasedCalendar::
Slovakia ()
{
  return this->Slovakia_;
}

inline
void XsdRuleBasedCalendar::
Slovakia (const Slovakia_type& x)
{
  this->Slovakia_.set (x);
}

inline
void XsdRuleBasedCalendar::
Slovakia (const Slovakia_optional& x)
{
  this->Slovakia_ = x;
}

inline
void XsdRuleBasedCalendar::
Slovakia (::std::auto_ptr< Slovakia_type > x)
{
  this->Slovakia_.set (x);
}

inline
const XsdRuleBasedCalendar::SouthAfrica_optional& XsdRuleBasedCalendar::
SouthAfrica () const
{
  return this->SouthAfrica_;
}

inline
XsdRuleBasedCalendar::SouthAfrica_optional& XsdRuleBasedCalendar::
SouthAfrica ()
{
  return this->SouthAfrica_;
}

inline
void XsdRuleBasedCalendar::
SouthAfrica (const SouthAfrica_type& x)
{
  this->SouthAfrica_.set (x);
}

inline
void XsdRuleBasedCalendar::
SouthAfrica (const SouthAfrica_optional& x)
{
  this->SouthAfrica_ = x;
}

inline
void XsdRuleBasedCalendar::
SouthAfrica (::std::auto_ptr< SouthAfrica_type > x)
{
  this->SouthAfrica_.set (x);
}

inline
const XsdRuleBasedCalendar::SouthKorea_optional& XsdRuleBasedCalendar::
SouthKorea () const
{
  return this->SouthKorea_;
}

inline
XsdRuleBasedCalendar::SouthKorea_optional& XsdRuleBasedCalendar::
SouthKorea ()
{
  return this->SouthKorea_;
}

inline
void XsdRuleBasedCalendar::
SouthKorea (const SouthKorea_type& x)
{
  this->SouthKorea_.set (x);
}

inline
void XsdRuleBasedCalendar::
SouthKorea (const SouthKorea_optional& x)
{
  this->SouthKorea_ = x;
}

inline
void XsdRuleBasedCalendar::
SouthKorea (::std::auto_ptr< SouthKorea_type > x)
{
  this->SouthKorea_.set (x);
}

inline
const XsdRuleBasedCalendar::Sweden_optional& XsdRuleBasedCalendar::
Sweden () const
{
  return this->Sweden_;
}

inline
XsdRuleBasedCalendar::Sweden_optional& XsdRuleBasedCalendar::
Sweden ()
{
  return this->Sweden_;
}

inline
void XsdRuleBasedCalendar::
Sweden (const Sweden_type& x)
{
  this->Sweden_.set (x);
}

inline
void XsdRuleBasedCalendar::
Sweden (const Sweden_optional& x)
{
  this->Sweden_ = x;
}

inline
void XsdRuleBasedCalendar::
Sweden (::std::auto_ptr< Sweden_type > x)
{
  this->Sweden_.set (x);
}

inline
const XsdRuleBasedCalendar::Switzerland_optional& XsdRuleBasedCalendar::
Switzerland () const
{
  return this->Switzerland_;
}

inline
XsdRuleBasedCalendar::Switzerland_optional& XsdRuleBasedCalendar::
Switzerland ()
{
  return this->Switzerland_;
}

inline
void XsdRuleBasedCalendar::
Switzerland (const Switzerland_type& x)
{
  this->Switzerland_.set (x);
}

inline
void XsdRuleBasedCalendar::
Switzerland (const Switzerland_optional& x)
{
  this->Switzerland_ = x;
}

inline
void XsdRuleBasedCalendar::
Switzerland (::std::auto_ptr< Switzerland_type > x)
{
  this->Switzerland_.set (x);
}

inline
const XsdRuleBasedCalendar::Taiwan_optional& XsdRuleBasedCalendar::
Taiwan () const
{
  return this->Taiwan_;
}

inline
XsdRuleBasedCalendar::Taiwan_optional& XsdRuleBasedCalendar::
Taiwan ()
{
  return this->Taiwan_;
}

inline
void XsdRuleBasedCalendar::
Taiwan (const Taiwan_type& x)
{
  this->Taiwan_.set (x);
}

inline
void XsdRuleBasedCalendar::
Taiwan (const Taiwan_optional& x)
{
  this->Taiwan_ = x;
}

inline
void XsdRuleBasedCalendar::
Taiwan (::std::auto_ptr< Taiwan_type > x)
{
  this->Taiwan_.set (x);
}

inline
const XsdRuleBasedCalendar::Turkey_optional& XsdRuleBasedCalendar::
Turkey () const
{
  return this->Turkey_;
}

inline
XsdRuleBasedCalendar::Turkey_optional& XsdRuleBasedCalendar::
Turkey ()
{
  return this->Turkey_;
}

inline
void XsdRuleBasedCalendar::
Turkey (const Turkey_type& x)
{
  this->Turkey_.set (x);
}

inline
void XsdRuleBasedCalendar::
Turkey (const Turkey_optional& x)
{
  this->Turkey_ = x;
}

inline
void XsdRuleBasedCalendar::
Turkey (::std::auto_ptr< Turkey_type > x)
{
  this->Turkey_.set (x);
}

inline
const XsdRuleBasedCalendar::Ukraine_optional& XsdRuleBasedCalendar::
Ukraine () const
{
  return this->Ukraine_;
}

inline
XsdRuleBasedCalendar::Ukraine_optional& XsdRuleBasedCalendar::
Ukraine ()
{
  return this->Ukraine_;
}

inline
void XsdRuleBasedCalendar::
Ukraine (const Ukraine_type& x)
{
  this->Ukraine_.set (x);
}

inline
void XsdRuleBasedCalendar::
Ukraine (const Ukraine_optional& x)
{
  this->Ukraine_ = x;
}

inline
void XsdRuleBasedCalendar::
Ukraine (::std::auto_ptr< Ukraine_type > x)
{
  this->Ukraine_.set (x);
}

inline
const XsdRuleBasedCalendar::UnitedStates_optional& XsdRuleBasedCalendar::
UnitedStates () const
{
  return this->UnitedStates_;
}

inline
XsdRuleBasedCalendar::UnitedStates_optional& XsdRuleBasedCalendar::
UnitedStates ()
{
  return this->UnitedStates_;
}

inline
void XsdRuleBasedCalendar::
UnitedStates (const UnitedStates_type& x)
{
  this->UnitedStates_.set (x);
}

inline
void XsdRuleBasedCalendar::
UnitedStates (const UnitedStates_optional& x)
{
  this->UnitedStates_ = x;
}

inline
void XsdRuleBasedCalendar::
UnitedStates (::std::auto_ptr< UnitedStates_type > x)
{
  this->UnitedStates_.set (x);
}

inline
const XsdRuleBasedCalendar::WeekendsOnly_optional& XsdRuleBasedCalendar::
WeekendsOnly () const
{
  return this->WeekendsOnly_;
}

inline
XsdRuleBasedCalendar::WeekendsOnly_optional& XsdRuleBasedCalendar::
WeekendsOnly ()
{
  return this->WeekendsOnly_;
}

inline
void XsdRuleBasedCalendar::
WeekendsOnly (const WeekendsOnly_type& x)
{
  this->WeekendsOnly_.set (x);
}

inline
void XsdRuleBasedCalendar::
WeekendsOnly (const WeekendsOnly_optional& x)
{
  this->WeekendsOnly_ = x;
}

inline
void XsdRuleBasedCalendar::
WeekendsOnly (::std::auto_ptr< WeekendsOnly_type > x)
{
  this->WeekendsOnly_.set (x);
}


// XsdDateListCalendar
// 

inline
const XsdDateListCalendar::bounds_type& XsdDateListCalendar::
bounds () const
{
  return this->bounds_.get ();
}

inline
XsdDateListCalendar::bounds_type& XsdDateListCalendar::
bounds ()
{
  return this->bounds_.get ();
}

inline
void XsdDateListCalendar::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdDateListCalendar::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdDateListCalendar::holidays_type& XsdDateListCalendar::
holidays () const
{
  return this->holidays_.get ();
}

inline
XsdDateListCalendar::holidays_type& XsdDateListCalendar::
holidays ()
{
  return this->holidays_.get ();
}

inline
void XsdDateListCalendar::
holidays (const holidays_type& x)
{
  this->holidays_.set (x);
}

inline
void XsdDateListCalendar::
holidays (::std::auto_ptr< holidays_type > x)
{
  this->holidays_.set (x);
}

inline
const XsdDateListCalendar::weekend_sequence& XsdDateListCalendar::
weekend () const
{
  return this->weekend_;
}

inline
XsdDateListCalendar::weekend_sequence& XsdDateListCalendar::
weekend ()
{
  return this->weekend_;
}

inline
void XsdDateListCalendar::
weekend (const weekend_sequence& s)
{
  this->weekend_ = s;
}


// XsdCompositeCalendar
// 

inline
const XsdCompositeCalendar::intersection_optional& XsdCompositeCalendar::
intersection () const
{
  return this->intersection_;
}

inline
XsdCompositeCalendar::intersection_optional& XsdCompositeCalendar::
intersection ()
{
  return this->intersection_;
}

inline
void XsdCompositeCalendar::
intersection (const intersection_type& x)
{
  this->intersection_.set (x);
}

inline
void XsdCompositeCalendar::
intersection (const intersection_optional& x)
{
  this->intersection_ = x;
}

inline
void XsdCompositeCalendar::
intersection (::std::auto_ptr< intersection_type > x)
{
  this->intersection_.set (x);
}

inline
const XsdCompositeCalendar::union_optional& XsdCompositeCalendar::
union_ () const
{
  return this->union__;
}

inline
XsdCompositeCalendar::union_optional& XsdCompositeCalendar::
union_ ()
{
  return this->union__;
}

inline
void XsdCompositeCalendar::
union_ (const union_type& x)
{
  this->union__.set (x);
}

inline
void XsdCompositeCalendar::
union_ (const union_optional& x)
{
  this->union__ = x;
}

inline
void XsdCompositeCalendar::
union_ (::std::auto_ptr< union_type > x)
{
  this->union__.set (x);
}


// XsdRollTest
// 

inline
const XsdRollTest::result_optional& XsdRollTest::
result () const
{
  return this->result_;
}

inline
XsdRollTest::result_optional& XsdRollTest::
result ()
{
  return this->result_;
}

inline
void XsdRollTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdRollTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdRollTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdRollTest::date_type& XsdRollTest::
date () const
{
  return this->date_.get ();
}

inline
XsdRollTest::date_type& XsdRollTest::
date ()
{
  return this->date_.get ();
}

inline
void XsdRollTest::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdRollTest::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}

inline
const XsdRollTest::roll_optional& XsdRollTest::
roll () const
{
  return this->roll_;
}

inline
XsdRollTest::roll_optional& XsdRollTest::
roll ()
{
  return this->roll_;
}

inline
void XsdRollTest::
roll (const roll_type& x)
{
  this->roll_.set (x);
}

inline
void XsdRollTest::
roll (const roll_optional& x)
{
  this->roll_ = x;
}

inline
void XsdRollTest::
roll (::std::auto_ptr< roll_type > x)
{
  this->roll_.set (x);
}

inline
const XsdRollTest::calendar_type& XsdRollTest::
calendar () const
{
  return this->calendar_.get ();
}

inline
XsdRollTest::calendar_type& XsdRollTest::
calendar ()
{
  return this->calendar_.get ();
}

inline
void XsdRollTest::
calendar (const calendar_type& x)
{
  this->calendar_.set (x);
}

inline
void XsdRollTest::
calendar (::std::auto_ptr< calendar_type > x)
{
  this->calendar_.set (x);
}


// XsdCalendarTest
// 

inline
const XsdCalendarTest::result_optional& XsdCalendarTest::
result () const
{
  return this->result_;
}

inline
XsdCalendarTest::result_optional& XsdCalendarTest::
result ()
{
  return this->result_;
}

inline
void XsdCalendarTest::
result (const result_type& x)
{
  this->result_.set (x);
}

inline
void XsdCalendarTest::
result (const result_optional& x)
{
  this->result_ = x;
}

inline
void XsdCalendarTest::
result (::std::auto_ptr< result_type > x)
{
  this->result_.set (x);
}

inline
const XsdCalendarTest::bounds_type& XsdCalendarTest::
bounds () const
{
  return this->bounds_.get ();
}

inline
XsdCalendarTest::bounds_type& XsdCalendarTest::
bounds ()
{
  return this->bounds_.get ();
}

inline
void XsdCalendarTest::
bounds (const bounds_type& x)
{
  this->bounds_.set (x);
}

inline
void XsdCalendarTest::
bounds (::std::auto_ptr< bounds_type > x)
{
  this->bounds_.set (x);
}

inline
const XsdCalendarTest::calendar_type& XsdCalendarTest::
calendar () const
{
  return this->calendar_.get ();
}

inline
XsdCalendarTest::calendar_type& XsdCalendarTest::
calendar ()
{
  return this->calendar_.get ();
}

inline
void XsdCalendarTest::
calendar (const calendar_type& x)
{
  this->calendar_.set (x);
}

inline
void XsdCalendarTest::
calendar (::std::auto_ptr< calendar_type > x)
{
  this->calendar_.set (x);
}


// XsdUKCalendarType
// 

inline
XsdUKCalendarType::
XsdUKCalendarType ()
: ::xml_schema::string ()
{
}

inline
XsdUKCalendarType::
XsdUKCalendarType (value v)
: ::xml_schema::string (_xsd_XsdUKCalendarType_literals_[v])
{
}

inline
XsdUKCalendarType::
XsdUKCalendarType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdUKCalendarType::
XsdUKCalendarType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUKCalendarType::
XsdUKCalendarType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUKCalendarType::
XsdUKCalendarType (const XsdUKCalendarType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdUKCalendarType& XsdUKCalendarType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdUKCalendarType_literals_[v]);

  return *this;
}


// XsdUSCalendarType
// 

inline
XsdUSCalendarType::
XsdUSCalendarType ()
: ::xml_schema::string ()
{
}

inline
XsdUSCalendarType::
XsdUSCalendarType (value v)
: ::xml_schema::string (_xsd_XsdUSCalendarType_literals_[v])
{
}

inline
XsdUSCalendarType::
XsdUSCalendarType (const char* v)
: ::xml_schema::string (v)
{
}

inline
XsdUSCalendarType::
XsdUSCalendarType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUSCalendarType::
XsdUSCalendarType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

inline
XsdUSCalendarType::
XsdUSCalendarType (const XsdUSCalendarType& v,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

inline
XsdUSCalendarType& XsdUSCalendarType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_XsdUSCalendarType_literals_[v]);

  return *this;
}


// XsdCalendarList
// 

inline
const XsdCalendarList::calendar_sequence& XsdCalendarList::
calendar () const
{
  return this->calendar_;
}

inline
XsdCalendarList::calendar_sequence& XsdCalendarList::
calendar ()
{
  return this->calendar_;
}

inline
void XsdCalendarList::
calendar (const calendar_sequence& s)
{
  this->calendar_ = s;
}


// England
// 

inline
const England::type_type& England::
type () const
{
  return this->type_.get ();
}

inline
England::type_type& England::
type ()
{
  return this->type_.get ();
}

inline
void England::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void England::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const England::type_type& England::
type_default_value ()
{
  return type_default_value_;
}


// UnitedStates
// 

inline
const UnitedStates::type_type& UnitedStates::
type () const
{
  return this->type_.get ();
}

inline
UnitedStates::type_type& UnitedStates::
type ()
{
  return this->type_.get ();
}

inline
void UnitedStates::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void UnitedStates::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const UnitedStates::type_type& UnitedStates::
type_default_value ()
{
  return type_default_value_;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_CALENDAR_IXX
