// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_INDEX_IXX
#define CXX___SCHEMA_XSD_ASSET_INDEX_IXX

// Begin prologue.
//
//
// End prologue.

#include "convention.ixx"

// XsdIndex
// 

inline
const XsdIndex::convention_optional& XsdIndex::
convention () const
{
  return this->convention_;
}

inline
XsdIndex::convention_optional& XsdIndex::
convention ()
{
  return this->convention_;
}

inline
void XsdIndex::
convention (const convention_type& x)
{
  this->convention_.set (x);
}

inline
void XsdIndex::
convention (const convention_optional& x)
{
  this->convention_ = x;
}

inline
void XsdIndex::
convention (::std::auto_ptr< convention_type > x)
{
  this->convention_.set (x);
}

inline
const XsdIndex::fixing_optional& XsdIndex::
fixing () const
{
  return this->fixing_;
}

inline
XsdIndex::fixing_optional& XsdIndex::
fixing ()
{
  return this->fixing_;
}

inline
void XsdIndex::
fixing (const fixing_type& x)
{
  this->fixing_.set (x);
}

inline
void XsdIndex::
fixing (const fixing_optional& x)
{
  this->fixing_ = x;
}

inline
void XsdIndex::
fixing (::std::auto_ptr< fixing_type > x)
{
  this->fixing_.set (x);
}

inline
const XsdIndex::history_optional& XsdIndex::
history () const
{
  return this->history_;
}

inline
XsdIndex::history_optional& XsdIndex::
history ()
{
  return this->history_;
}

inline
void XsdIndex::
history (const history_type& x)
{
  this->history_.set (x);
}

inline
void XsdIndex::
history (const history_optional& x)
{
  this->history_ = x;
}

inline
void XsdIndex::
history (::std::auto_ptr< history_type > x)
{
  this->history_.set (x);
}

inline
const XsdIndex::keyName_optional& XsdIndex::
keyName () const
{
  return this->keyName_;
}

inline
XsdIndex::keyName_optional& XsdIndex::
keyName ()
{
  return this->keyName_;
}

inline
void XsdIndex::
keyName (const keyName_type& x)
{
  this->keyName_.set (x);
}

inline
void XsdIndex::
keyName (const keyName_optional& x)
{
  this->keyName_ = x;
}

inline
void XsdIndex::
keyName (::std::auto_ptr< keyName_type > x)
{
  this->keyName_.set (x);
}

inline
const XsdIndex::name_optional& XsdIndex::
name () const
{
  return this->name_;
}

inline
XsdIndex::name_optional& XsdIndex::
name ()
{
  return this->name_;
}

inline
void XsdIndex::
name (const name_type& x)
{
  this->name_.set (x);
}

inline
void XsdIndex::
name (const name_optional& x)
{
  this->name_ = x;
}

inline
void XsdIndex::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// XsdRateIndex
// 

inline
const XsdRateIndex::indexType_optional& XsdRateIndex::
indexType () const
{
  return this->indexType_;
}

inline
XsdRateIndex::indexType_optional& XsdRateIndex::
indexType ()
{
  return this->indexType_;
}

inline
void XsdRateIndex::
indexType (const indexType_type& x)
{
  this->indexType_.set (x);
}

inline
void XsdRateIndex::
indexType (const indexType_optional& x)
{
  this->indexType_ = x;
}

inline
void XsdRateIndex::
indexType (::std::auto_ptr< indexType_type > x)
{
  this->indexType_.set (x);
}

inline
const XsdRateIndex::indexType_type& XsdRateIndex::
indexType_default_value ()
{
  return indexType_default_value_;
}

inline
const XsdRateIndex::tenor_optional& XsdRateIndex::
tenor () const
{
  return this->tenor_;
}

inline
XsdRateIndex::tenor_optional& XsdRateIndex::
tenor ()
{
  return this->tenor_;
}

inline
void XsdRateIndex::
tenor (const tenor_type& x)
{
  this->tenor_.set (x);
}

inline
void XsdRateIndex::
tenor (const tenor_optional& x)
{
  this->tenor_ = x;
}

inline
void XsdRateIndex::
tenor (::std::auto_ptr< tenor_type > x)
{
  this->tenor_.set (x);
}

inline
const XsdRateIndex::tenor_type& XsdRateIndex::
tenor_default_value ()
{
  return tenor_default_value_;
}

inline
const XsdRateIndex::underlying_optional& XsdRateIndex::
underlying () const
{
  return this->underlying_;
}

inline
XsdRateIndex::underlying_optional& XsdRateIndex::
underlying ()
{
  return this->underlying_;
}

inline
void XsdRateIndex::
underlying (const underlying_type& x)
{
  this->underlying_.set (x);
}

inline
void XsdRateIndex::
underlying (const underlying_optional& x)
{
  this->underlying_ = x;
}

inline
void XsdRateIndex::
underlying (::std::auto_ptr< underlying_type > x)
{
  this->underlying_.set (x);
}


// XsdInflationIndex
// 

inline
const XsdInflationIndex::inflationType_optional& XsdInflationIndex::
inflationType () const
{
  return this->inflationType_;
}

inline
XsdInflationIndex::inflationType_optional& XsdInflationIndex::
inflationType ()
{
  return this->inflationType_;
}

inline
void XsdInflationIndex::
inflationType (const inflationType_type& x)
{
  this->inflationType_.set (x);
}

inline
void XsdInflationIndex::
inflationType (const inflationType_optional& x)
{
  this->inflationType_ = x;
}

inline
void XsdInflationIndex::
inflationType (::std::auto_ptr< inflationType_type > x)
{
  this->inflationType_.set (x);
}

inline
const XsdInflationIndex::inflationType_type& XsdInflationIndex::
inflationType_default_value ()
{
  return inflationType_default_value_;
}

inline
const XsdInflationIndex::revised_optional& XsdInflationIndex::
revised () const
{
  return this->revised_;
}

inline
XsdInflationIndex::revised_optional& XsdInflationIndex::
revised ()
{
  return this->revised_;
}

inline
void XsdInflationIndex::
revised (const revised_type& x)
{
  this->revised_.set (x);
}

inline
void XsdInflationIndex::
revised (const revised_optional& x)
{
  this->revised_ = x;
}

inline
XsdInflationIndex::revised_type XsdInflationIndex::
revised_default_value ()
{
  return revised_type (false);
}

inline
const XsdInflationIndex::interpolated_optional& XsdInflationIndex::
interpolated () const
{
  return this->interpolated_;
}

inline
XsdInflationIndex::interpolated_optional& XsdInflationIndex::
interpolated ()
{
  return this->interpolated_;
}

inline
void XsdInflationIndex::
interpolated (const interpolated_type& x)
{
  this->interpolated_.set (x);
}

inline
void XsdInflationIndex::
interpolated (const interpolated_optional& x)
{
  this->interpolated_ = x;
}

inline
XsdInflationIndex::interpolated_type XsdInflationIndex::
interpolated_default_value ()
{
  return interpolated_type (false);
}

inline
const XsdInflationIndex::availabilityLag_optional& XsdInflationIndex::
availabilityLag () const
{
  return this->availabilityLag_;
}

inline
XsdInflationIndex::availabilityLag_optional& XsdInflationIndex::
availabilityLag ()
{
  return this->availabilityLag_;
}

inline
void XsdInflationIndex::
availabilityLag (const availabilityLag_type& x)
{
  this->availabilityLag_.set (x);
}

inline
void XsdInflationIndex::
availabilityLag (const availabilityLag_optional& x)
{
  this->availabilityLag_ = x;
}

inline
void XsdInflationIndex::
availabilityLag (::std::auto_ptr< availabilityLag_type > x)
{
  this->availabilityLag_.set (x);
}

inline
const XsdInflationIndex::availabilityLag_type& XsdInflationIndex::
availabilityLag_default_value ()
{
  return availabilityLag_default_value_;
}


// XsdBasketIndex
// 

inline
const XsdBasketIndex::aggregate_type& XsdBasketIndex::
aggregate () const
{
  return this->aggregate_.get ();
}

inline
XsdBasketIndex::aggregate_type& XsdBasketIndex::
aggregate ()
{
  return this->aggregate_.get ();
}

inline
void XsdBasketIndex::
aggregate (const aggregate_type& x)
{
  this->aggregate_.set (x);
}

inline
void XsdBasketIndex::
aggregate (::std::auto_ptr< aggregate_type > x)
{
  this->aggregate_.set (x);
}

inline
const XsdBasketIndex::underlying_sequence& XsdBasketIndex::
underlying () const
{
  return this->underlying_;
}

inline
XsdBasketIndex::underlying_sequence& XsdBasketIndex::
underlying ()
{
  return this->underlying_;
}

inline
void XsdBasketIndex::
underlying (const underlying_sequence& s)
{
  this->underlying_ = s;
}


// XsdVariableIndex
// 

inline
const XsdVariableIndex::underlying_sequence& XsdVariableIndex::
underlying () const
{
  return this->underlying_;
}

inline
XsdVariableIndex::underlying_sequence& XsdVariableIndex::
underlying ()
{
  return this->underlying_;
}

inline
void XsdVariableIndex::
underlying (const underlying_sequence& s)
{
  this->underlying_ = s;
}


// XsdCompositeIndex
// 

inline
const XsdCompositeIndex::add_optional& XsdCompositeIndex::
add () const
{
  return this->add_;
}

inline
XsdCompositeIndex::add_optional& XsdCompositeIndex::
add ()
{
  return this->add_;
}

inline
void XsdCompositeIndex::
add (const add_type& x)
{
  this->add_.set (x);
}

inline
void XsdCompositeIndex::
add (const add_optional& x)
{
  this->add_ = x;
}

inline
void XsdCompositeIndex::
add (::std::auto_ptr< add_type > x)
{
  this->add_.set (x);
}

inline
const XsdCompositeIndex::subtract_optional& XsdCompositeIndex::
subtract () const
{
  return this->subtract_;
}

inline
XsdCompositeIndex::subtract_optional& XsdCompositeIndex::
subtract ()
{
  return this->subtract_;
}

inline
void XsdCompositeIndex::
subtract (const subtract_type& x)
{
  this->subtract_.set (x);
}

inline
void XsdCompositeIndex::
subtract (const subtract_optional& x)
{
  this->subtract_ = x;
}

inline
void XsdCompositeIndex::
subtract (::std::auto_ptr< subtract_type > x)
{
  this->subtract_.set (x);
}

inline
const XsdCompositeIndex::multiply_optional& XsdCompositeIndex::
multiply () const
{
  return this->multiply_;
}

inline
XsdCompositeIndex::multiply_optional& XsdCompositeIndex::
multiply ()
{
  return this->multiply_;
}

inline
void XsdCompositeIndex::
multiply (const multiply_type& x)
{
  this->multiply_.set (x);
}

inline
void XsdCompositeIndex::
multiply (const multiply_optional& x)
{
  this->multiply_ = x;
}

inline
void XsdCompositeIndex::
multiply (::std::auto_ptr< multiply_type > x)
{
  this->multiply_.set (x);
}

inline
const XsdCompositeIndex::divide_optional& XsdCompositeIndex::
divide () const
{
  return this->divide_;
}

inline
XsdCompositeIndex::divide_optional& XsdCompositeIndex::
divide ()
{
  return this->divide_;
}

inline
void XsdCompositeIndex::
divide (const divide_type& x)
{
  this->divide_.set (x);
}

inline
void XsdCompositeIndex::
divide (const divide_optional& x)
{
  this->divide_ = x;
}

inline
void XsdCompositeIndex::
divide (::std::auto_ptr< divide_type > x)
{
  this->divide_.set (x);
}

inline
const XsdCompositeIndex::min_optional& XsdCompositeIndex::
min () const
{
  return this->min_;
}

inline
XsdCompositeIndex::min_optional& XsdCompositeIndex::
min ()
{
  return this->min_;
}

inline
void XsdCompositeIndex::
min (const min_type& x)
{
  this->min_.set (x);
}

inline
void XsdCompositeIndex::
min (const min_optional& x)
{
  this->min_ = x;
}

inline
void XsdCompositeIndex::
min (::std::auto_ptr< min_type > x)
{
  this->min_.set (x);
}

inline
const XsdCompositeIndex::max_optional& XsdCompositeIndex::
max () const
{
  return this->max_;
}

inline
XsdCompositeIndex::max_optional& XsdCompositeIndex::
max ()
{
  return this->max_;
}

inline
void XsdCompositeIndex::
max (const max_type& x)
{
  this->max_.set (x);
}

inline
void XsdCompositeIndex::
max (const max_optional& x)
{
  this->max_ = x;
}

inline
void XsdCompositeIndex::
max (::std::auto_ptr< max_type > x)
{
  this->max_.set (x);
}


// XsdIndexCoupon
// 

inline
const XsdIndexCoupon::index_type& XsdIndexCoupon::
index () const
{
  return this->index_.get ();
}

inline
XsdIndexCoupon::index_type& XsdIndexCoupon::
index ()
{
  return this->index_.get ();
}

inline
void XsdIndexCoupon::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdIndexCoupon::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdIndexCoupon::spread_optional& XsdIndexCoupon::
spread () const
{
  return this->spread_;
}

inline
XsdIndexCoupon::spread_optional& XsdIndexCoupon::
spread ()
{
  return this->spread_;
}

inline
void XsdIndexCoupon::
spread (const spread_type& x)
{
  this->spread_.set (x);
}

inline
void XsdIndexCoupon::
spread (const spread_optional& x)
{
  this->spread_ = x;
}

inline
XsdIndexCoupon::spread_type XsdIndexCoupon::
spread_default_value ()
{
  return spread_type (.0);
}

inline
const XsdIndexCoupon::multiplier_optional& XsdIndexCoupon::
multiplier () const
{
  return this->multiplier_;
}

inline
XsdIndexCoupon::multiplier_optional& XsdIndexCoupon::
multiplier ()
{
  return this->multiplier_;
}

inline
void XsdIndexCoupon::
multiplier (const multiplier_type& x)
{
  this->multiplier_.set (x);
}

inline
void XsdIndexCoupon::
multiplier (const multiplier_optional& x)
{
  this->multiplier_ = x;
}

inline
XsdIndexCoupon::multiplier_type XsdIndexCoupon::
multiplier_default_value ()
{
  return multiplier_type (1.0);
}

inline
const XsdIndexCoupon::floor_optional& XsdIndexCoupon::
floor () const
{
  return this->floor_;
}

inline
XsdIndexCoupon::floor_optional& XsdIndexCoupon::
floor ()
{
  return this->floor_;
}

inline
void XsdIndexCoupon::
floor (const floor_type& x)
{
  this->floor_.set (x);
}

inline
void XsdIndexCoupon::
floor (const floor_optional& x)
{
  this->floor_ = x;
}

inline
XsdIndexCoupon::floor_type XsdIndexCoupon::
floor_default_value ()
{
  return floor_type (.0);
}

inline
const XsdIndexCoupon::cap_optional& XsdIndexCoupon::
cap () const
{
  return this->cap_;
}

inline
XsdIndexCoupon::cap_optional& XsdIndexCoupon::
cap ()
{
  return this->cap_;
}

inline
void XsdIndexCoupon::
cap (const cap_type& x)
{
  this->cap_.set (x);
}

inline
void XsdIndexCoupon::
cap (const cap_optional& x)
{
  this->cap_ = x;
}

inline
XsdIndexCoupon::cap_type XsdIndexCoupon::
cap_default_value ()
{
  return cap_type (1.0);
}

inline
const XsdIndexCoupon::round_optional& XsdIndexCoupon::
round () const
{
  return this->round_;
}

inline
XsdIndexCoupon::round_optional& XsdIndexCoupon::
round ()
{
  return this->round_;
}

inline
void XsdIndexCoupon::
round (const round_type& x)
{
  this->round_.set (x);
}

inline
void XsdIndexCoupon::
round (const round_optional& x)
{
  this->round_ = x;
}

inline
void XsdIndexCoupon::
round (::std::auto_ptr< round_type > x)
{
  this->round_.set (x);
}


// XsdIndexAggregate
// 

inline
const XsdIndexAggregate::index_sequence& XsdIndexAggregate::
index () const
{
  return this->index_;
}

inline
XsdIndexAggregate::index_sequence& XsdIndexAggregate::
index ()
{
  return this->index_;
}

inline
void XsdIndexAggregate::
index (const index_sequence& s)
{
  this->index_ = s;
}

inline
const XsdIndexAggregate::weight_optional& XsdIndexAggregate::
weight () const
{
  return this->weight_;
}

inline
XsdIndexAggregate::weight_optional& XsdIndexAggregate::
weight ()
{
  return this->weight_;
}

inline
void XsdIndexAggregate::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
void XsdIndexAggregate::
weight (const weight_optional& x)
{
  this->weight_ = x;
}

inline
void XsdIndexAggregate::
weight (::std::auto_ptr< weight_type > x)
{
  this->weight_.set (x);
}

inline
const XsdIndexAggregate::minDate_optional& XsdIndexAggregate::
minDate () const
{
  return this->minDate_;
}

inline
XsdIndexAggregate::minDate_optional& XsdIndexAggregate::
minDate ()
{
  return this->minDate_;
}

inline
void XsdIndexAggregate::
minDate (const minDate_type& x)
{
  this->minDate_.set (x);
}

inline
void XsdIndexAggregate::
minDate (const minDate_optional& x)
{
  this->minDate_ = x;
}

inline
void XsdIndexAggregate::
minDate (::std::auto_ptr< minDate_type > x)
{
  this->minDate_.set (x);
}

inline
const XsdIndexAggregate::maxDate_optional& XsdIndexAggregate::
maxDate () const
{
  return this->maxDate_;
}

inline
XsdIndexAggregate::maxDate_optional& XsdIndexAggregate::
maxDate ()
{
  return this->maxDate_;
}

inline
void XsdIndexAggregate::
maxDate (const maxDate_type& x)
{
  this->maxDate_.set (x);
}

inline
void XsdIndexAggregate::
maxDate (const maxDate_optional& x)
{
  this->maxDate_ = x;
}

inline
void XsdIndexAggregate::
maxDate (::std::auto_ptr< maxDate_type > x)
{
  this->maxDate_.set (x);
}


// XsdIndexArgs
// 

inline
const XsdIndexArgs::scalar_optional& XsdIndexArgs::
scalar () const
{
  return this->scalar_;
}

inline
XsdIndexArgs::scalar_optional& XsdIndexArgs::
scalar ()
{
  return this->scalar_;
}

inline
void XsdIndexArgs::
scalar (const scalar_type& x)
{
  this->scalar_.set (x);
}

inline
void XsdIndexArgs::
scalar (const scalar_optional& x)
{
  this->scalar_ = x;
}

inline
const XsdIndexArgs::index_optional& XsdIndexArgs::
index () const
{
  return this->index_;
}

inline
XsdIndexArgs::index_optional& XsdIndexArgs::
index ()
{
  return this->index_;
}

inline
void XsdIndexArgs::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdIndexArgs::
index (const index_optional& x)
{
  this->index_ = x;
}

inline
void XsdIndexArgs::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}


// XsdIndexBinary
// 

inline
const XsdIndexBinary::first_type& XsdIndexBinary::
first () const
{
  return this->first_.get ();
}

inline
XsdIndexBinary::first_type& XsdIndexBinary::
first ()
{
  return this->first_.get ();
}

inline
void XsdIndexBinary::
first (const first_type& x)
{
  this->first_.set (x);
}

inline
void XsdIndexBinary::
first (::std::auto_ptr< first_type > x)
{
  this->first_.set (x);
}

inline
const XsdIndexBinary::second_type& XsdIndexBinary::
second () const
{
  return this->second_.get ();
}

inline
XsdIndexBinary::second_type& XsdIndexBinary::
second ()
{
  return this->second_.get ();
}

inline
void XsdIndexBinary::
second (const second_type& x)
{
  this->second_.set (x);
}

inline
void XsdIndexBinary::
second (::std::auto_ptr< second_type > x)
{
  this->second_.set (x);
}

inline
const XsdIndexBinary::inner_type& XsdIndexBinary::
inner () const
{
  return this->inner_.get ();
}

inline
XsdIndexBinary::inner_type& XsdIndexBinary::
inner ()
{
  return this->inner_.get ();
}

inline
void XsdIndexBinary::
inner (const inner_type& x)
{
  this->inner_.set (x);
}

inline
XsdIndexBinary::inner_type XsdIndexBinary::
inner_default_value ()
{
  return inner_type (false);
}


// XsdIndexDate
// 

inline
const XsdIndexDate::index_type& XsdIndexDate::
index () const
{
  return this->index_.get ();
}

inline
XsdIndexDate::index_type& XsdIndexDate::
index ()
{
  return this->index_.get ();
}

inline
void XsdIndexDate::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdIndexDate::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdIndexDate::date_type& XsdIndexDate::
date () const
{
  return this->date_.get ();
}

inline
XsdIndexDate::date_type& XsdIndexDate::
date ()
{
  return this->date_.get ();
}

inline
void XsdIndexDate::
date (const date_type& x)
{
  this->date_.set (x);
}

inline
void XsdIndexDate::
date (::std::auto_ptr< date_type > x)
{
  this->date_.set (x);
}


// XsdIndexWeight
// 

inline
const XsdIndexWeight::index_type& XsdIndexWeight::
index () const
{
  return this->index_.get ();
}

inline
XsdIndexWeight::index_type& XsdIndexWeight::
index ()
{
  return this->index_.get ();
}

inline
void XsdIndexWeight::
index (const index_type& x)
{
  this->index_.set (x);
}

inline
void XsdIndexWeight::
index (::std::auto_ptr< index_type > x)
{
  this->index_.set (x);
}

inline
const XsdIndexWeight::weight_type& XsdIndexWeight::
weight () const
{
  return this->weight_.get ();
}

inline
XsdIndexWeight::weight_type& XsdIndexWeight::
weight ()
{
  return this->weight_.get ();
}

inline
void XsdIndexWeight::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

inline
XsdIndexWeight::weight_type XsdIndexWeight::
weight_default_value ()
{
  return weight_type (1.0);
}


// XsdIndexKey
// 

inline
const XsdIndexKey::indexID_type& XsdIndexKey::
indexID () const
{
  return this->indexID_.get ();
}

inline
XsdIndexKey::indexID_type& XsdIndexKey::
indexID ()
{
  return this->indexID_.get ();
}

inline
void XsdIndexKey::
indexID (const indexID_type& x)
{
  this->indexID_.set (x);
}

inline
void XsdIndexKey::
indexID (::std::auto_ptr< indexID_type > x)
{
  this->indexID_.set (x);
}


// XsdIndexFixing
// 

inline
const XsdIndexFixing::value_type& XsdIndexFixing::
value () const
{
  return this->value_.get ();
}

inline
XsdIndexFixing::value_type& XsdIndexFixing::
value ()
{
  return this->value_.get ();
}

inline
void XsdIndexFixing::
value (const value_type& x)
{
  this->value_.set (x);
}

inline
void XsdIndexFixing::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// XsdFixingSeries
// 

inline
const XsdFixingSeries::value_sequence& XsdFixingSeries::
value () const
{
  return this->value_;
}

inline
XsdFixingSeries::value_sequence& XsdFixingSeries::
value ()
{
  return this->value_;
}

inline
void XsdFixingSeries::
value (const value_sequence& s)
{
  this->value_ = s;
}


// tenor1
// 


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_INDEX_IXX
