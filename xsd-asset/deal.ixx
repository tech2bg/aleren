// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_DEAL_IXX
#define CXX___SCHEMA_XSD_ASSET_DEAL_IXX

// Begin prologue.
//
//
// End prologue.

#include "tranche.ixx"

#include "portfolio.ixx"

// XsdDeal
// 

inline
const XsdDeal::collateral_optional& XsdDeal::
collateral () const
{
  return this->collateral_;
}

inline
XsdDeal::collateral_optional& XsdDeal::
collateral ()
{
  return this->collateral_;
}

inline
void XsdDeal::
collateral (const collateral_type& x)
{
  this->collateral_.set (x);
}

inline
void XsdDeal::
collateral (const collateral_optional& x)
{
  this->collateral_ = x;
}

inline
void XsdDeal::
collateral (::std::auto_ptr< collateral_type > x)
{
  this->collateral_.set (x);
}

inline
const XsdDeal::tranche_sequence& XsdDeal::
tranche () const
{
  return this->tranche_;
}

inline
XsdDeal::tranche_sequence& XsdDeal::
tranche ()
{
  return this->tranche_;
}

inline
void XsdDeal::
tranche (const tranche_sequence& s)
{
  this->tranche_ = s;
}


// XsdDealPriority
// 

inline
const XsdDealPriority::flow_optional& XsdDealPriority::
flow () const
{
  return this->flow_;
}

inline
XsdDealPriority::flow_optional& XsdDealPriority::
flow ()
{
  return this->flow_;
}

inline
void XsdDealPriority::
flow (const flow_type& x)
{
  this->flow_.set (x);
}

inline
void XsdDealPriority::
flow (const flow_optional& x)
{
  this->flow_ = x;
}

inline
void XsdDealPriority::
flow (::std::auto_ptr< flow_type > x)
{
  this->flow_.set (x);
}

inline
const XsdDealPriority::test_optional& XsdDealPriority::
test () const
{
  return this->test_;
}

inline
XsdDealPriority::test_optional& XsdDealPriority::
test ()
{
  return this->test_;
}

inline
void XsdDealPriority::
test (const test_type& x)
{
  this->test_.set (x);
}

inline
void XsdDealPriority::
test (const test_optional& x)
{
  this->test_ = x;
}

inline
void XsdDealPriority::
test (::std::auto_ptr< test_type > x)
{
  this->test_.set (x);
}

inline
const XsdDealPriority::source_type& XsdDealPriority::
source () const
{
  return this->source_.get ();
}

inline
XsdDealPriority::source_type& XsdDealPriority::
source ()
{
  return this->source_.get ();
}

inline
void XsdDealPriority::
source (const source_type& x)
{
  this->source_.set (x);
}

inline
void XsdDealPriority::
source (::std::auto_ptr< source_type > x)
{
  this->source_.set (x);
}

inline
const XsdDealPriority::target_type& XsdDealPriority::
target () const
{
  return this->target_.get ();
}

inline
XsdDealPriority::target_type& XsdDealPriority::
target ()
{
  return this->target_.get ();
}

inline
void XsdDealPriority::
target (const target_type& x)
{
  this->target_.set (x);
}

inline
void XsdDealPriority::
target (::std::auto_ptr< target_type > x)
{
  this->target_.set (x);
}

inline
const XsdDealPriority::dates_optional& XsdDealPriority::
dates () const
{
  return this->dates_;
}

inline
XsdDealPriority::dates_optional& XsdDealPriority::
dates ()
{
  return this->dates_;
}

inline
void XsdDealPriority::
dates (const dates_type& x)
{
  this->dates_.set (x);
}

inline
void XsdDealPriority::
dates (const dates_optional& x)
{
  this->dates_ = x;
}

inline
void XsdDealPriority::
dates (::std::auto_ptr< dates_type > x)
{
  this->dates_.set (x);
}


// XsdDealAccount
// 

inline
const XsdDealAccount::tranche_optional& XsdDealAccount::
tranche () const
{
  return this->tranche_;
}

inline
XsdDealAccount::tranche_optional& XsdDealAccount::
tranche ()
{
  return this->tranche_;
}

inline
void XsdDealAccount::
tranche (const tranche_type& x)
{
  this->tranche_.set (x);
}

inline
void XsdDealAccount::
tranche (const tranche_optional& x)
{
  this->tranche_ = x;
}

inline
void XsdDealAccount::
tranche (::std::auto_ptr< tranche_type > x)
{
  this->tranche_.set (x);
}

inline
const XsdDealAccount::collateral_optional& XsdDealAccount::
collateral () const
{
  return this->collateral_;
}

inline
XsdDealAccount::collateral_optional& XsdDealAccount::
collateral ()
{
  return this->collateral_;
}

inline
void XsdDealAccount::
collateral (const collateral_type& x)
{
  this->collateral_.set (x);
}

inline
void XsdDealAccount::
collateral (const collateral_optional& x)
{
  this->collateral_ = x;
}

inline
void XsdDealAccount::
collateral (::std::auto_ptr< collateral_type > x)
{
  this->collateral_.set (x);
}

inline
const XsdDealAccount::type_type& XsdDealAccount::
type () const
{
  return this->type_.get ();
}

inline
XsdDealAccount::type_type& XsdDealAccount::
type ()
{
  return this->type_.get ();
}

inline
void XsdDealAccount::
type (const type_type& x)
{
  this->type_.set (x);
}

inline
void XsdDealAccount::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

inline
const XsdDealAccount::currency_type& XsdDealAccount::
currency () const
{
  return this->currency_.get ();
}

inline
XsdDealAccount::currency_type& XsdDealAccount::
currency ()
{
  return this->currency_.get ();
}

inline
void XsdDealAccount::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

inline
void XsdDealAccount::
currency (::std::auto_ptr< currency_type > x)
{
  this->currency_.set (x);
}

inline
const XsdDealAccount::currency_type& XsdDealAccount::
currency_default_value ()
{
  return currency_default_value_;
}

inline
const XsdDealAccount::flag_type& XsdDealAccount::
flag () const
{
  return this->flag_.get ();
}

inline
XsdDealAccount::flag_type& XsdDealAccount::
flag ()
{
  return this->flag_.get ();
}

inline
void XsdDealAccount::
flag (const flag_type& x)
{
  this->flag_.set (x);
}

inline
XsdDealAccount::flag_type XsdDealAccount::
flag_default_value ()
{
  return flag_type (0LL);
}


// XsdDealFlowPriority
// 

inline
const XsdDealFlowPriority::next_type& XsdDealFlowPriority::
next () const
{
  return this->next_.get ();
}

inline
XsdDealFlowPriority::next_type& XsdDealFlowPriority::
next ()
{
  return this->next_.get ();
}

inline
void XsdDealFlowPriority::
next (const next_type& x)
{
  this->next_.set (x);
}

inline
void XsdDealFlowPriority::
next (::std::auto_ptr< next_type > x)
{
  this->next_.set (x);
}


// XsdDealTestPriority
// 

inline
const XsdDealTestPriority::pass_type& XsdDealTestPriority::
pass () const
{
  return this->pass_.get ();
}

inline
XsdDealTestPriority::pass_type& XsdDealTestPriority::
pass ()
{
  return this->pass_.get ();
}

inline
void XsdDealTestPriority::
pass (const pass_type& x)
{
  this->pass_.set (x);
}

inline
void XsdDealTestPriority::
pass (::std::auto_ptr< pass_type > x)
{
  this->pass_.set (x);
}

inline
const XsdDealTestPriority::fail_type& XsdDealTestPriority::
fail () const
{
  return this->fail_.get ();
}

inline
XsdDealTestPriority::fail_type& XsdDealTestPriority::
fail ()
{
  return this->fail_.get ();
}

inline
void XsdDealTestPriority::
fail (const fail_type& x)
{
  this->fail_.set (x);
}

inline
void XsdDealTestPriority::
fail (::std::auto_ptr< fail_type > x)
{
  this->fail_.set (x);
}

inline
const XsdDealTestPriority::ratio_type& XsdDealTestPriority::
ratio () const
{
  return this->ratio_.get ();
}

inline
XsdDealTestPriority::ratio_type& XsdDealTestPriority::
ratio ()
{
  return this->ratio_.get ();
}

inline
void XsdDealTestPriority::
ratio (const ratio_type& x)
{
  this->ratio_.set (x);
}


// XsdDealWaterfall
// 

inline
const XsdDealWaterfall::cashflow_type& XsdDealWaterfall::
cashflow () const
{
  return this->cashflow_.get ();
}

inline
XsdDealWaterfall::cashflow_type& XsdDealWaterfall::
cashflow ()
{
  return this->cashflow_.get ();
}

inline
void XsdDealWaterfall::
cashflow (const cashflow_type& x)
{
  this->cashflow_.set (x);
}

inline
void XsdDealWaterfall::
cashflow (::std::auto_ptr< cashflow_type > x)
{
  this->cashflow_.set (x);
}

inline
const XsdDealWaterfall::interim_optional& XsdDealWaterfall::
interim () const
{
  return this->interim_;
}

inline
XsdDealWaterfall::interim_optional& XsdDealWaterfall::
interim ()
{
  return this->interim_;
}

inline
void XsdDealWaterfall::
interim (const interim_type& x)
{
  this->interim_.set (x);
}

inline
void XsdDealWaterfall::
interim (const interim_optional& x)
{
  this->interim_ = x;
}

inline
void XsdDealWaterfall::
interim (::std::auto_ptr< interim_type > x)
{
  this->interim_.set (x);
}

inline
const XsdDealWaterfall::accelerated_optional& XsdDealWaterfall::
accelerated () const
{
  return this->accelerated_;
}

inline
XsdDealWaterfall::accelerated_optional& XsdDealWaterfall::
accelerated ()
{
  return this->accelerated_;
}

inline
void XsdDealWaterfall::
accelerated (const accelerated_type& x)
{
  this->accelerated_.set (x);
}

inline
void XsdDealWaterfall::
accelerated (const accelerated_optional& x)
{
  this->accelerated_ = x;
}

inline
void XsdDealWaterfall::
accelerated (::std::auto_ptr< accelerated_type > x)
{
  this->accelerated_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_DEAL_IXX
