// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_CONVENTION_IXX
#define CXX___SCHEMA_XSD_ASSET_CONVENTION_IXX

// Begin prologue.
//
//
// End prologue.

#include "calendar.ixx"

#include "daycount.ixx"

// XsdConvention
// 

inline
const XsdConvention::basis_optional& XsdConvention::
basis () const
{
  return this->basis_;
}

inline
XsdConvention::basis_optional& XsdConvention::
basis ()
{
  return this->basis_;
}

inline
void XsdConvention::
basis (const basis_type& x)
{
  this->basis_.set (x);
}

inline
void XsdConvention::
basis (const basis_optional& x)
{
  this->basis_ = x;
}

inline
void XsdConvention::
basis (::std::auto_ptr< basis_type > x)
{
  this->basis_.set (x);
}

inline
const XsdConvention::basis_type& XsdConvention::
basis_default_value ()
{
  return basis_default_value_;
}

inline
const XsdConvention::calendar_optional& XsdConvention::
calendar () const
{
  return this->calendar_;
}

inline
XsdConvention::calendar_optional& XsdConvention::
calendar ()
{
  return this->calendar_;
}

inline
void XsdConvention::
calendar (const calendar_type& x)
{
  this->calendar_.set (x);
}

inline
void XsdConvention::
calendar (const calendar_optional& x)
{
  this->calendar_ = x;
}

inline
void XsdConvention::
calendar (::std::auto_ptr< calendar_type > x)
{
  this->calendar_.set (x);
}

inline
const XsdConvention::currency_optional& XsdConvention::
currency () const
{
  return this->currency_;
}

inline
XsdConvention::currency_optional& XsdConvention::
currency ()
{
  return this->currency_;
}

inline
void XsdConvention::
currency (const currency_type& x)
{
  this->currency_.set (x);
}

inline
void XsdConvention::
currency (const currency_optional& x)
{
  this->currency_ = x;
}

inline
void XsdConvention::
currency (::std::auto_ptr< currency_type > x)
{
  this->currency_.set (x);
}

inline
const XsdConvention::currency_type& XsdConvention::
currency_default_value ()
{
  return currency_default_value_;
}

inline
const XsdConvention::dateRule_optional& XsdConvention::
dateRule () const
{
  return this->dateRule_;
}

inline
XsdConvention::dateRule_optional& XsdConvention::
dateRule ()
{
  return this->dateRule_;
}

inline
void XsdConvention::
dateRule (const dateRule_type& x)
{
  this->dateRule_.set (x);
}

inline
void XsdConvention::
dateRule (const dateRule_optional& x)
{
  this->dateRule_ = x;
}

inline
void XsdConvention::
dateRule (::std::auto_ptr< dateRule_type > x)
{
  this->dateRule_.set (x);
}

inline
const XsdConvention::dateRule_type& XsdConvention::
dateRule_default_value ()
{
  return dateRule_default_value_;
}

inline
const XsdConvention::dayCount_optional& XsdConvention::
dayCount () const
{
  return this->dayCount_;
}

inline
XsdConvention::dayCount_optional& XsdConvention::
dayCount ()
{
  return this->dayCount_;
}

inline
void XsdConvention::
dayCount (const dayCount_type& x)
{
  this->dayCount_.set (x);
}

inline
void XsdConvention::
dayCount (const dayCount_optional& x)
{
  this->dayCount_ = x;
}

inline
void XsdConvention::
dayCount (::std::auto_ptr< dayCount_type > x)
{
  this->dayCount_.set (x);
}

inline
const XsdConvention::endOfMonth_optional& XsdConvention::
endOfMonth () const
{
  return this->endOfMonth_;
}

inline
XsdConvention::endOfMonth_optional& XsdConvention::
endOfMonth ()
{
  return this->endOfMonth_;
}

inline
void XsdConvention::
endOfMonth (const endOfMonth_type& x)
{
  this->endOfMonth_.set (x);
}

inline
void XsdConvention::
endOfMonth (const endOfMonth_optional& x)
{
  this->endOfMonth_ = x;
}

inline
XsdConvention::endOfMonth_type XsdConvention::
endOfMonth_default_value ()
{
  return endOfMonth_type (false);
}

inline
const XsdConvention::frequency_optional& XsdConvention::
frequency () const
{
  return this->frequency_;
}

inline
XsdConvention::frequency_optional& XsdConvention::
frequency ()
{
  return this->frequency_;
}

inline
void XsdConvention::
frequency (const frequency_type& x)
{
  this->frequency_.set (x);
}

inline
void XsdConvention::
frequency (const frequency_optional& x)
{
  this->frequency_ = x;
}

inline
void XsdConvention::
frequency (::std::auto_ptr< frequency_type > x)
{
  this->frequency_.set (x);
}

inline
const XsdConvention::frequency_type& XsdConvention::
frequency_default_value ()
{
  return frequency_default_value_;
}

inline
const XsdConvention::inArrears_optional& XsdConvention::
inArrears () const
{
  return this->inArrears_;
}

inline
XsdConvention::inArrears_optional& XsdConvention::
inArrears ()
{
  return this->inArrears_;
}

inline
void XsdConvention::
inArrears (const inArrears_type& x)
{
  this->inArrears_.set (x);
}

inline
void XsdConvention::
inArrears (const inArrears_optional& x)
{
  this->inArrears_ = x;
}

inline
XsdConvention::inArrears_type XsdConvention::
inArrears_default_value ()
{
  return inArrears_type (true);
}

inline
const XsdConvention::oddCoupon_optional& XsdConvention::
oddCoupon () const
{
  return this->oddCoupon_;
}

inline
XsdConvention::oddCoupon_optional& XsdConvention::
oddCoupon ()
{
  return this->oddCoupon_;
}

inline
void XsdConvention::
oddCoupon (const oddCoupon_type& x)
{
  this->oddCoupon_.set (x);
}

inline
void XsdConvention::
oddCoupon (const oddCoupon_optional& x)
{
  this->oddCoupon_ = x;
}

inline
void XsdConvention::
oddCoupon (::std::auto_ptr< oddCoupon_type > x)
{
  this->oddCoupon_.set (x);
}

inline
const XsdConvention::region_optional& XsdConvention::
region () const
{
  return this->region_;
}

inline
XsdConvention::region_optional& XsdConvention::
region ()
{
  return this->region_;
}

inline
void XsdConvention::
region (const region_type& x)
{
  this->region_.set (x);
}

inline
void XsdConvention::
region (const region_optional& x)
{
  this->region_ = x;
}

inline
void XsdConvention::
region (::std::auto_ptr< region_type > x)
{
  this->region_.set (x);
}

inline
const XsdConvention::region_type& XsdConvention::
region_default_value ()
{
  return region_default_value_;
}

inline
const XsdConvention::resetLag_optional& XsdConvention::
resetLag () const
{
  return this->resetLag_;
}

inline
XsdConvention::resetLag_optional& XsdConvention::
resetLag ()
{
  return this->resetLag_;
}

inline
void XsdConvention::
resetLag (const resetLag_type& x)
{
  this->resetLag_.set (x);
}

inline
void XsdConvention::
resetLag (const resetLag_optional& x)
{
  this->resetLag_ = x;
}

inline
void XsdConvention::
resetLag (::std::auto_ptr< resetLag_type > x)
{
  this->resetLag_.set (x);
}

inline
const XsdConvention::resetLag_type& XsdConvention::
resetLag_default_value ()
{
  return resetLag_default_value_;
}

inline
const XsdConvention::roll_optional& XsdConvention::
roll () const
{
  return this->roll_;
}

inline
XsdConvention::roll_optional& XsdConvention::
roll ()
{
  return this->roll_;
}

inline
void XsdConvention::
roll (const roll_type& x)
{
  this->roll_.set (x);
}

inline
void XsdConvention::
roll (const roll_optional& x)
{
  this->roll_ = x;
}

inline
void XsdConvention::
roll (::std::auto_ptr< roll_type > x)
{
  this->roll_.set (x);
}

inline
const XsdConvention::settleLag_optional& XsdConvention::
settleLag () const
{
  return this->settleLag_;
}

inline
XsdConvention::settleLag_optional& XsdConvention::
settleLag ()
{
  return this->settleLag_;
}

inline
void XsdConvention::
settleLag (const settleLag_type& x)
{
  this->settleLag_.set (x);
}

inline
void XsdConvention::
settleLag (const settleLag_optional& x)
{
  this->settleLag_ = x;
}

inline
void XsdConvention::
settleLag (::std::auto_ptr< settleLag_type > x)
{
  this->settleLag_.set (x);
}

inline
const XsdConvention::settleLag_type& XsdConvention::
settleLag_default_value ()
{
  return settleLag_default_value_;
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_CONVENTION_IXX
