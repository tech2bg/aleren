// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___SCHEMA_XSD_ASSET_SWAP_IXX
#define CXX___SCHEMA_XSD_ASSET_SWAP_IXX

// Begin prologue.
//
//
// End prologue.

#include "bond.ixx"

// XsdSwap
// 

inline
const XsdSwap::effective_optional& XsdSwap::
effective () const
{
  return this->effective_;
}

inline
XsdSwap::effective_optional& XsdSwap::
effective ()
{
  return this->effective_;
}

inline
void XsdSwap::
effective (const effective_type& x)
{
  this->effective_.set (x);
}

inline
void XsdSwap::
effective (const effective_optional& x)
{
  this->effective_ = x;
}

inline
void XsdSwap::
effective (::std::auto_ptr< effective_type > x)
{
  this->effective_.set (x);
}

inline
const XsdSwap::oddCoupon_optional& XsdSwap::
oddCoupon () const
{
  return this->oddCoupon_;
}

inline
XsdSwap::oddCoupon_optional& XsdSwap::
oddCoupon ()
{
  return this->oddCoupon_;
}

inline
void XsdSwap::
oddCoupon (const oddCoupon_type& x)
{
  this->oddCoupon_.set (x);
}

inline
void XsdSwap::
oddCoupon (const oddCoupon_optional& x)
{
  this->oddCoupon_ = x;
}

inline
void XsdSwap::
oddCoupon (::std::auto_ptr< oddCoupon_type > x)
{
  this->oddCoupon_.set (x);
}

inline
const XsdSwap::schedule_optional& XsdSwap::
schedule () const
{
  return this->schedule_;
}

inline
XsdSwap::schedule_optional& XsdSwap::
schedule ()
{
  return this->schedule_;
}

inline
void XsdSwap::
schedule (const schedule_type& x)
{
  this->schedule_.set (x);
}

inline
void XsdSwap::
schedule (const schedule_optional& x)
{
  this->schedule_ = x;
}

inline
void XsdSwap::
schedule (::std::auto_ptr< schedule_type > x)
{
  this->schedule_.set (x);
}


// XsdSwapLeg
// 

inline
const XsdSwapLeg::effective_optional& XsdSwapLeg::
effective () const
{
  return this->effective_;
}

inline
XsdSwapLeg::effective_optional& XsdSwapLeg::
effective ()
{
  return this->effective_;
}

inline
void XsdSwapLeg::
effective (const effective_type& x)
{
  this->effective_.set (x);
}

inline
void XsdSwapLeg::
effective (const effective_optional& x)
{
  this->effective_ = x;
}

inline
void XsdSwapLeg::
effective (::std::auto_ptr< effective_type > x)
{
  this->effective_.set (x);
}

inline
const XsdSwapLeg::oddCoupon_optional& XsdSwapLeg::
oddCoupon () const
{
  return this->oddCoupon_;
}

inline
XsdSwapLeg::oddCoupon_optional& XsdSwapLeg::
oddCoupon ()
{
  return this->oddCoupon_;
}

inline
void XsdSwapLeg::
oddCoupon (const oddCoupon_type& x)
{
  this->oddCoupon_.set (x);
}

inline
void XsdSwapLeg::
oddCoupon (const oddCoupon_optional& x)
{
  this->oddCoupon_ = x;
}

inline
void XsdSwapLeg::
oddCoupon (::std::auto_ptr< oddCoupon_type > x)
{
  this->oddCoupon_.set (x);
}


// XsdGenericSwap
// 

inline
const XsdGenericSwap::payLeg_sequence& XsdGenericSwap::
payLeg () const
{
  return this->payLeg_;
}

inline
XsdGenericSwap::payLeg_sequence& XsdGenericSwap::
payLeg ()
{
  return this->payLeg_;
}

inline
void XsdGenericSwap::
payLeg (const payLeg_sequence& s)
{
  this->payLeg_ = s;
}

inline
const XsdGenericSwap::receiveLeg_sequence& XsdGenericSwap::
receiveLeg () const
{
  return this->receiveLeg_;
}

inline
XsdGenericSwap::receiveLeg_sequence& XsdGenericSwap::
receiveLeg ()
{
  return this->receiveLeg_;
}

inline
void XsdGenericSwap::
receiveLeg (const receiveLeg_sequence& s)
{
  this->receiveLeg_ = s;
}


// XsdVanillaSwap
// 

inline
const XsdVanillaSwap::sign_optional& XsdVanillaSwap::
sign () const
{
  return this->sign_;
}

inline
XsdVanillaSwap::sign_optional& XsdVanillaSwap::
sign ()
{
  return this->sign_;
}

inline
void XsdVanillaSwap::
sign (const sign_type& x)
{
  this->sign_.set (x);
}

inline
void XsdVanillaSwap::
sign (const sign_optional& x)
{
  this->sign_ = x;
}

inline
void XsdVanillaSwap::
sign (::std::auto_ptr< sign_type > x)
{
  this->sign_.set (x);
}

inline
const XsdVanillaSwap::sign_type& XsdVanillaSwap::
sign_default_value ()
{
  return sign_default_value_;
}

inline
const XsdVanillaSwap::fixedLeg_type& XsdVanillaSwap::
fixedLeg () const
{
  return this->fixedLeg_.get ();
}

inline
XsdVanillaSwap::fixedLeg_type& XsdVanillaSwap::
fixedLeg ()
{
  return this->fixedLeg_.get ();
}

inline
void XsdVanillaSwap::
fixedLeg (const fixedLeg_type& x)
{
  this->fixedLeg_.set (x);
}

inline
void XsdVanillaSwap::
fixedLeg (::std::auto_ptr< fixedLeg_type > x)
{
  this->fixedLeg_.set (x);
}

inline
const XsdVanillaSwap::floatLeg_type& XsdVanillaSwap::
floatLeg () const
{
  return this->floatLeg_.get ();
}

inline
XsdVanillaSwap::floatLeg_type& XsdVanillaSwap::
floatLeg ()
{
  return this->floatLeg_.get ();
}

inline
void XsdVanillaSwap::
floatLeg (const floatLeg_type& x)
{
  this->floatLeg_.set (x);
}

inline
void XsdVanillaSwap::
floatLeg (::std::auto_ptr< floatLeg_type > x)
{
  this->floatLeg_.set (x);
}


// XsdActualSwapLeg
// 


// XsdBespokeSwapLeg
// 

inline
const XsdBespokeSwapLeg::coupon_type& XsdBespokeSwapLeg::
coupon () const
{
  return this->coupon_.get ();
}

inline
XsdBespokeSwapLeg::coupon_type& XsdBespokeSwapLeg::
coupon ()
{
  return this->coupon_.get ();
}

inline
void XsdBespokeSwapLeg::
coupon (const coupon_type& x)
{
  this->coupon_.set (x);
}

inline
void XsdBespokeSwapLeg::
coupon (::std::auto_ptr< coupon_type > x)
{
  this->coupon_.set (x);
}


// XsdFixedSwapLeg
// 

inline
const XsdFixedSwapLeg::coupon_type& XsdFixedSwapLeg::
coupon () const
{
  return this->coupon_.get ();
}

inline
XsdFixedSwapLeg::coupon_type& XsdFixedSwapLeg::
coupon ()
{
  return this->coupon_.get ();
}

inline
void XsdFixedSwapLeg::
coupon (const coupon_type& x)
{
  this->coupon_.set (x);
}


// XsdFloatSwapLeg
// 

inline
const XsdFloatSwapLeg::coupon_type& XsdFloatSwapLeg::
coupon () const
{
  return this->coupon_.get ();
}

inline
XsdFloatSwapLeg::coupon_type& XsdFloatSwapLeg::
coupon ()
{
  return this->coupon_.get ();
}

inline
void XsdFloatSwapLeg::
coupon (const coupon_type& x)
{
  this->coupon_.set (x);
}

inline
void XsdFloatSwapLeg::
coupon (::std::auto_ptr< coupon_type > x)
{
  this->coupon_.set (x);
}


// XsdAssetSwapLeg
// 

inline
const XsdAssetSwapLeg::asset_type& XsdAssetSwapLeg::
asset () const
{
  return this->asset_.get ();
}

inline
XsdAssetSwapLeg::asset_type& XsdAssetSwapLeg::
asset ()
{
  return this->asset_.get ();
}

inline
void XsdAssetSwapLeg::
asset (const asset_type& x)
{
  this->asset_.set (x);
}

inline
void XsdAssetSwapLeg::
asset (::std::auto_ptr< asset_type > x)
{
  this->asset_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SCHEMA_XSD_ASSET_SWAP_IXX
